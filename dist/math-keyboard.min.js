!function(I){var g={};function n(t){if(g[t])return g[t].exports;var c=g[t]={i:t,l:!1,exports:{}};return I[t].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=I,n.c=g,n.d=function(I,g,t){n.o(I,g)||Object.defineProperty(I,g,{enumerable:!0,get:t})},n.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},n.t=function(I,g){if(1&g&&(I=n(I)),8&g)return I;if(4&g&&"object"==typeof I&&I&&I.__esModule)return I;var t=Object.create(null);if(n.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:I}),2&g&&"string"!=typeof I)for(var c in I)n.d(t,c,function(g){return I[g]}.bind(null,c));return t},n.n=function(I){var g=I&&I.__esModule?function(){return I.default}:function(){return I};return n.d(g,"a",g),g},n.o=function(I,g){return Object.prototype.hasOwnProperty.call(I,g)},n.p="./dist/",n(n.s=56)}([function(module,exports){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn "@media " + item[2] + "{" + content + "}";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join("");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === "string")\n\t\t\tmodules = [[null, modules, ""]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === "number")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || \'\';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === \'function\') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn \'/*# sourceURL=\' + cssMapping.sourceRoot + source + \' */\'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n\t}\n\n\treturn [content].join(\'\\n\');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = \'sourceMappingURL=data:application/json;charset=utf-8;base64,\' + base64;\n\n\treturn \'/*# \' + data + \' */\';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRCxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxjQUFjOztBQUVsRTtBQUNBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuXHRNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuXHRBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24odXNlU291cmNlTWFwKSB7XG5cdHZhciBsaXN0ID0gW107XG5cblx0Ly8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXHRsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG5cdFx0XHR2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblx0XHRcdGlmKGl0ZW1bMl0pIHtcblx0XHRcdFx0cmV0dXJuIFwiQG1lZGlhIFwiICsgaXRlbVsyXSArIFwie1wiICsgY29udGVudCArIFwifVwiO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRlbnQ7XG5cdFx0XHR9XG5cdFx0fSkuam9pbihcIlwiKTtcblx0fTtcblxuXHQvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuXHRsaXN0LmkgPSBmdW5jdGlvbihtb2R1bGVzLCBtZWRpYVF1ZXJ5KSB7XG5cdFx0aWYodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpXG5cdFx0XHRtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG5cdFx0dmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblx0XHRmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGlkID0gdGhpc1tpXVswXTtcblx0XHRcdGlmKHR5cGVvZiBpZCA9PT0gXCJudW1iZXJcIilcblx0XHRcdFx0YWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuXHRcdH1cblx0XHRmb3IoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgaXRlbSA9IG1vZHVsZXNbaV07XG5cdFx0XHQvLyBza2lwIGFscmVhZHkgaW1wb3J0ZWQgbW9kdWxlXG5cdFx0XHQvLyB0aGlzIGltcGxlbWVudGF0aW9uIGlzIG5vdCAxMDAlIHBlcmZlY3QgZm9yIHdlaXJkIG1lZGlhIHF1ZXJ5IGNvbWJpbmF0aW9uc1xuXHRcdFx0Ly8gIHdoZW4gYSBtb2R1bGUgaXMgaW1wb3J0ZWQgbXVsdGlwbGUgdGltZXMgd2l0aCBkaWZmZXJlbnQgbWVkaWEgcXVlcmllcy5cblx0XHRcdC8vICBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cdFx0XHRpZih0eXBlb2YgaXRlbVswXSAhPT0gXCJudW1iZXJcIiB8fCAhYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuXHRcdFx0XHRpZihtZWRpYVF1ZXJ5ICYmICFpdGVtWzJdKSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IG1lZGlhUXVlcnk7XG5cdFx0XHRcdH0gZWxzZSBpZihtZWRpYVF1ZXJ5KSB7XG5cdFx0XHRcdFx0aXRlbVsyXSA9IFwiKFwiICsgaXRlbVsyXSArIFwiKSBhbmQgKFwiICsgbWVkaWFRdWVyeSArIFwiKVwiO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdHJldHVybiBsaXN0O1xufTtcblxuZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtLCB1c2VTb3VyY2VNYXApIHtcblx0dmFyIGNvbnRlbnQgPSBpdGVtWzFdIHx8ICcnO1xuXHR2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cdGlmICghY3NzTWFwcGluZykge1xuXHRcdHJldHVybiBjb250ZW50O1xuXHR9XG5cblx0aWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuXHRcdHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG5cdFx0XHRyZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nXG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcblx0fVxuXG5cdHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59XG5cbi8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcblx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG5cdHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuXHR2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuXG5cdHJldHVybiAnLyojICcgKyBkYXRhICsgJyAqLyc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"default\", function() { return /* binding */ addStylesClient; });\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== "undefined" && global) ||\n            (typeof self !== "undefined" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(50);\n// On some exotic environments, it\'s not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== "undefined" && self.setImmediate) ||\n                       (typeof global !== "undefined" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== "undefined" && self.clearImmediate) ||\n                         (typeof global !== "undefined" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcz81MTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxtQkFBTyxDQUFDLEVBQWM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgc2NvcGUgPSAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwpIHx8XG4gICAgICAgICAgICAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZikgfHxcbiAgICAgICAgICAgIHdpbmRvdztcbnZhciBhcHBseSA9IEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseTtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHNjb3BlLCBhcmd1bWVudHMpLCBjbGVhckludGVydmFsKTtcbn07XG5leHBvcnRzLmNsZWFyVGltZW91dCA9XG5leHBvcnRzLmNsZWFySW50ZXJ2YWwgPSBmdW5jdGlvbih0aW1lb3V0KSB7XG4gIGlmICh0aW1lb3V0KSB7XG4gICAgdGltZW91dC5jbG9zZSgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHNjb3BlLCB0aGlzLl9pZCk7XG59O1xuXG4vLyBEb2VzIG5vdCBzdGFydCB0aGUgdGltZSwganVzdCBzZXRzIHVwIHRoZSBtZW1iZXJzIG5lZWRlZC5cbmV4cG9ydHMuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSwgbXNlY3MpIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IG1zZWNzO1xufTtcblxuZXhwb3J0cy51bmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuICBpdGVtLl9pZGxlVGltZW91dCA9IC0xO1xufTtcblxuZXhwb3J0cy5fdW5yZWZBY3RpdmUgPSBleHBvcnRzLmFjdGl2ZSA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgY2xlYXJUaW1lb3V0KGl0ZW0uX2lkbGVUaW1lb3V0SWQpO1xuXG4gIHZhciBtc2VjcyA9IGl0ZW0uX2lkbGVUaW1lb3V0O1xuICBpZiAobXNlY3MgPj0gMCkge1xuICAgIGl0ZW0uX2lkbGVUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uIG9uVGltZW91dCgpIHtcbiAgICAgIGlmIChpdGVtLl9vblRpbWVvdXQpXG4gICAgICAgIGl0ZW0uX29uVGltZW91dCgpO1xuICAgIH0sIG1zZWNzKTtcbiAgfVxufTtcblxuLy8gc2V0aW1tZWRpYXRlIGF0dGFjaGVzIGl0c2VsZiB0byB0aGUgZ2xvYmFsIG9iamVjdFxucmVxdWlyZShcInNldGltbWVkaWF0ZVwiKTtcbi8vIE9uIHNvbWUgZXhvdGljIGVudmlyb25tZW50cywgaXQncyBub3QgY2xlYXIgd2hpY2ggb2JqZWN0IGBzZXRpbW1lZGlhdGVgIHdhc1xuLy8gYWJsZSB0byBpbnN0YWxsIG9udG8uICBTZWFyY2ggZWFjaCBwb3NzaWJpbGl0eSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGVcbi8vIGBzZXRpbW1lZGlhdGVgIGxpYnJhcnkuXG5leHBvcnRzLnNldEltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLnNldEltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5zZXRJbW1lZGlhdGUpO1xuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9ICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLmNsZWFySW1tZWRpYXRlKTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzP2NkMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* WEBPACK VAR INJECTION */(function(global, setImmediate) {/*!\n * Vue.js v2.6.11\n * (c) 2014-2019 Evan You\n * Released under the MIT License.\n */\n/*  */\n\nvar emptyObject = Object.freeze({});\n\n// These helpers produce better VM code in JS engines due to their\n// explicitness and function inlining.\nfunction isUndef (v) {\n  return v === undefined || v === null\n}\n\nfunction isDef (v) {\n  return v !== undefined && v !== null\n}\n\nfunction isTrue (v) {\n  return v === true\n}\n\nfunction isFalse (v) {\n  return v === false\n}\n\n/**\n * Check if value is primitive.\n */\nfunction isPrimitive (value) {\n  return (\n    typeof value === 'string' ||\n    typeof value === 'number' ||\n    // $flow-disable-line\n    typeof value === 'symbol' ||\n    typeof value === 'boolean'\n  )\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n */\nfunction isObject (obj) {\n  return obj !== null && typeof obj === 'object'\n}\n\n/**\n * Get the raw type string of a value, e.g., [object Object].\n */\nvar _toString = Object.prototype.toString;\n\nfunction toRawType (value) {\n  return _toString.call(value).slice(8, -1)\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n */\nfunction isPlainObject (obj) {\n  return _toString.call(obj) === '[object Object]'\n}\n\nfunction isRegExp (v) {\n  return _toString.call(v) === '[object RegExp]'\n}\n\n/**\n * Check if val is a valid array index.\n */\nfunction isValidArrayIndex (val) {\n  var n = parseFloat(String(val));\n  return n >= 0 && Math.floor(n) === n && isFinite(val)\n}\n\nfunction isPromise (val) {\n  return (\n    isDef(val) &&\n    typeof val.then === 'function' &&\n    typeof val.catch === 'function'\n  )\n}\n\n/**\n * Convert a value to a string that is actually rendered.\n */\nfunction toString (val) {\n  return val == null\n    ? ''\n    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)\n      ? JSON.stringify(val, null, 2)\n      : String(val)\n}\n\n/**\n * Convert an input value to a number for persistence.\n * If the conversion fails, return original string.\n */\nfunction toNumber (val) {\n  var n = parseFloat(val);\n  return isNaN(n) ? val : n\n}\n\n/**\n * Make a map and return a function for checking if a key\n * is in that map.\n */\nfunction makeMap (\n  str,\n  expectsLowerCase\n) {\n  var map = Object.create(null);\n  var list = str.split(',');\n  for (var i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n  return expectsLowerCase\n    ? function (val) { return map[val.toLowerCase()]; }\n    : function (val) { return map[val]; }\n}\n\n/**\n * Check if a tag is a built-in tag.\n */\nvar isBuiltInTag = makeMap('slot,component', true);\n\n/**\n * Check if an attribute is a reserved attribute.\n */\nvar isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');\n\n/**\n * Remove an item from an array.\n */\nfunction remove (arr, item) {\n  if (arr.length) {\n    var index = arr.indexOf(item);\n    if (index > -1) {\n      return arr.splice(index, 1)\n    }\n  }\n}\n\n/**\n * Check whether an object has the property.\n */\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwn (obj, key) {\n  return hasOwnProperty.call(obj, key)\n}\n\n/**\n * Create a cached version of a pure function.\n */\nfunction cached (fn) {\n  var cache = Object.create(null);\n  return (function cachedFn (str) {\n    var hit = cache[str];\n    return hit || (cache[str] = fn(str))\n  })\n}\n\n/**\n * Camelize a hyphen-delimited string.\n */\nvar camelizeRE = /-(\\w)/g;\nvar camelize = cached(function (str) {\n  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })\n});\n\n/**\n * Capitalize a string.\n */\nvar capitalize = cached(function (str) {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n});\n\n/**\n * Hyphenate a camelCase string.\n */\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = cached(function (str) {\n  return str.replace(hyphenateRE, '-$1').toLowerCase()\n});\n\n/**\n * Simple bind polyfill for environments that do not support it,\n * e.g., PhantomJS 1.x. Technically, we don't need this anymore\n * since native bind is now performant enough in most browsers.\n * But removing it would mean breaking code that was able to run in\n * PhantomJS 1.x, so this must be kept for backward compatibility.\n */\n\n/* istanbul ignore next */\nfunction polyfillBind (fn, ctx) {\n  function boundFn (a) {\n    var l = arguments.length;\n    return l\n      ? l > 1\n        ? fn.apply(ctx, arguments)\n        : fn.call(ctx, a)\n      : fn.call(ctx)\n  }\n\n  boundFn._length = fn.length;\n  return boundFn\n}\n\nfunction nativeBind (fn, ctx) {\n  return fn.bind(ctx)\n}\n\nvar bind = Function.prototype.bind\n  ? nativeBind\n  : polyfillBind;\n\n/**\n * Convert an Array-like object to a real Array.\n */\nfunction toArray (list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret\n}\n\n/**\n * Mix properties into target object.\n */\nfunction extend (to, _from) {\n  for (var key in _from) {\n    to[key] = _from[key];\n  }\n  return to\n}\n\n/**\n * Merge an Array of Objects into a single Object.\n */\nfunction toObject (arr) {\n  var res = {};\n  for (var i = 0; i < arr.length; i++) {\n    if (arr[i]) {\n      extend(res, arr[i]);\n    }\n  }\n  return res\n}\n\n/* eslint-disable no-unused-vars */\n\n/**\n * Perform no operation.\n * Stubbing args to make Flow happy without leaving useless transpiled code\n * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).\n */\nfunction noop (a, b, c) {}\n\n/**\n * Always return false.\n */\nvar no = function (a, b, c) { return false; };\n\n/* eslint-enable no-unused-vars */\n\n/**\n * Return the same value.\n */\nvar identity = function (_) { return _; };\n\n/**\n * Generate a string containing static keys from compiler modules.\n */\nfunction genStaticKeys (modules) {\n  return modules.reduce(function (keys, m) {\n    return keys.concat(m.staticKeys || [])\n  }, []).join(',')\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n */\nfunction looseEqual (a, b) {\n  if (a === b) { return true }\n  var isObjectA = isObject(a);\n  var isObjectB = isObject(b);\n  if (isObjectA && isObjectB) {\n    try {\n      var isArrayA = Array.isArray(a);\n      var isArrayB = Array.isArray(b);\n      if (isArrayA && isArrayB) {\n        return a.length === b.length && a.every(function (e, i) {\n          return looseEqual(e, b[i])\n        })\n      } else if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime()\n      } else if (!isArrayA && !isArrayB) {\n        var keysA = Object.keys(a);\n        var keysB = Object.keys(b);\n        return keysA.length === keysB.length && keysA.every(function (key) {\n          return looseEqual(a[key], b[key])\n        })\n      } else {\n        /* istanbul ignore next */\n        return false\n      }\n    } catch (e) {\n      /* istanbul ignore next */\n      return false\n    }\n  } else if (!isObjectA && !isObjectB) {\n    return String(a) === String(b)\n  } else {\n    return false\n  }\n}\n\n/**\n * Return the first index at which a loosely equal value can be\n * found in the array (if value is a plain object, the array must\n * contain an object of the same shape), or -1 if it is not present.\n */\nfunction looseIndexOf (arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    if (looseEqual(arr[i], val)) { return i }\n  }\n  return -1\n}\n\n/**\n * Ensure a function is called only once.\n */\nfunction once (fn) {\n  var called = false;\n  return function () {\n    if (!called) {\n      called = true;\n      fn.apply(this, arguments);\n    }\n  }\n}\n\nvar SSR_ATTR = 'data-server-rendered';\n\nvar ASSET_TYPES = [\n  'component',\n  'directive',\n  'filter'\n];\n\nvar LIFECYCLE_HOOKS = [\n  'beforeCreate',\n  'created',\n  'beforeMount',\n  'mounted',\n  'beforeUpdate',\n  'updated',\n  'beforeDestroy',\n  'destroyed',\n  'activated',\n  'deactivated',\n  'errorCaptured',\n  'serverPrefetch'\n];\n\n/*  */\n\n\n\nvar config = ({\n  /**\n   * Option merge strategies (used in core/util/options)\n   */\n  // $flow-disable-line\n  optionMergeStrategies: Object.create(null),\n\n  /**\n   * Whether to suppress warnings.\n   */\n  silent: false,\n\n  /**\n   * Show production mode tip message on boot?\n   */\n  productionTip: \"production\" !== 'production',\n\n  /**\n   * Whether to enable devtools\n   */\n  devtools: \"production\" !== 'production',\n\n  /**\n   * Whether to record perf\n   */\n  performance: false,\n\n  /**\n   * Error handler for watcher errors\n   */\n  errorHandler: null,\n\n  /**\n   * Warn handler for watcher warns\n   */\n  warnHandler: null,\n\n  /**\n   * Ignore certain custom elements\n   */\n  ignoredElements: [],\n\n  /**\n   * Custom user key aliases for v-on\n   */\n  // $flow-disable-line\n  keyCodes: Object.create(null),\n\n  /**\n   * Check if a tag is reserved so that it cannot be registered as a\n   * component. This is platform-dependent and may be overwritten.\n   */\n  isReservedTag: no,\n\n  /**\n   * Check if an attribute is reserved so that it cannot be used as a component\n   * prop. This is platform-dependent and may be overwritten.\n   */\n  isReservedAttr: no,\n\n  /**\n   * Check if a tag is an unknown element.\n   * Platform-dependent.\n   */\n  isUnknownElement: no,\n\n  /**\n   * Get the namespace of an element\n   */\n  getTagNamespace: noop,\n\n  /**\n   * Parse the real tag name for the specific platform.\n   */\n  parsePlatformTagName: identity,\n\n  /**\n   * Check if an attribute must be bound using property, e.g. value\n   * Platform-dependent.\n   */\n  mustUseProp: no,\n\n  /**\n   * Perform updates asynchronously. Intended to be used by Vue Test Utils\n   * This will significantly reduce performance if set to false.\n   */\n  async: true,\n\n  /**\n   * Exposed for legacy reasons\n   */\n  _lifecycleHooks: LIFECYCLE_HOOKS\n});\n\n/*  */\n\n/**\n * unicode letters used for parsing html tags, component names and property paths.\n * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname\n * skipping \\u10000-\\uEFFFF due to it freezing up PhantomJS\n */\nvar unicodeRegExp = /a-zA-Z\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD/;\n\n/**\n * Check if a string starts with $ or _\n */\nfunction isReserved (str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F\n}\n\n/**\n * Define a property.\n */\nfunction def (obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Parse simple path.\n */\nvar bailRE = new RegExp((\"[^\" + (unicodeRegExp.source) + \".$_\\\\d]\"));\nfunction parsePath (path) {\n  if (bailRE.test(path)) {\n    return\n  }\n  var segments = path.split('.');\n  return function (obj) {\n    for (var i = 0; i < segments.length; i++) {\n      if (!obj) { return }\n      obj = obj[segments[i]];\n    }\n    return obj\n  }\n}\n\n/*  */\n\n// can we use __proto__?\nvar hasProto = '__proto__' in {};\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined';\nvar inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;\nvar weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && /msie|trident/.test(UA);\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isEdge = UA && UA.indexOf('edge/') > 0;\nvar isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');\nvar isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');\nvar isChrome = UA && /chrome\\/\\d+/.test(UA) && !isEdge;\nvar isPhantomJS = UA && /phantomjs/.test(UA);\nvar isFF = UA && UA.match(/firefox\\/(\\d+)/);\n\n// Firefox has a \"watch\" function on Object.prototype...\nvar nativeWatch = ({}).watch;\n\nvar supportsPassive = false;\nif (inBrowser) {\n  try {\n    var opts = {};\n    Object.defineProperty(opts, 'passive', ({\n      get: function get () {\n        /* istanbul ignore next */\n        supportsPassive = true;\n      }\n    })); // https://github.com/facebook/flow/issues/285\n    window.addEventListener('test-passive', null, opts);\n  } catch (e) {}\n}\n\n// this needs to be lazy-evaled because vue may be required before\n// vue-server-renderer can set VUE_ENV\nvar _isServer;\nvar isServerRendering = function () {\n  if (_isServer === undefined) {\n    /* istanbul ignore if */\n    if (!inBrowser && !inWeex && typeof global !== 'undefined') {\n      // detect presence of vue-server-renderer and avoid\n      // Webpack shimming the process\n      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';\n    } else {\n      _isServer = false;\n    }\n  }\n  return _isServer\n};\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n/* istanbul ignore next */\nfunction isNative (Ctor) {\n  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())\n}\n\nvar hasSymbol =\n  typeof Symbol !== 'undefined' && isNative(Symbol) &&\n  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);\n\nvar _Set;\n/* istanbul ignore if */ // $flow-disable-line\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = /*@__PURE__*/(function () {\n    function Set () {\n      this.set = Object.create(null);\n    }\n    Set.prototype.has = function has (key) {\n      return this.set[key] === true\n    };\n    Set.prototype.add = function add (key) {\n      this.set[key] = true;\n    };\n    Set.prototype.clear = function clear () {\n      this.set = Object.create(null);\n    };\n\n    return Set;\n  }());\n}\n\n/*  */\n\nvar warn = noop;\nvar tip = noop;\nvar generateComponentTrace = (noop); // work around flow check\nvar formatComponentName = (noop);\n\nif (false) { var repeat, classify, classifyRE, hasConsole; }\n\n/*  */\n\nvar uid = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n */\nvar Dep = function Dep () {\n  this.id = uid++;\n  this.subs = [];\n};\n\nDep.prototype.addSub = function addSub (sub) {\n  this.subs.push(sub);\n};\n\nDep.prototype.removeSub = function removeSub (sub) {\n  remove(this.subs, sub);\n};\n\nDep.prototype.depend = function depend () {\n  if (Dep.target) {\n    Dep.target.addDep(this);\n  }\n};\n\nDep.prototype.notify = function notify () {\n  // stabilize the subscriber list first\n  var subs = this.subs.slice();\n  if (false) {}\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\n// The current target watcher being evaluated.\n// This is globally unique because only one watcher\n// can be evaluated at a time.\nDep.target = null;\nvar targetStack = [];\n\nfunction pushTarget (target) {\n  targetStack.push(target);\n  Dep.target = target;\n}\n\nfunction popTarget () {\n  targetStack.pop();\n  Dep.target = targetStack[targetStack.length - 1];\n}\n\n/*  */\n\nvar VNode = function VNode (\n  tag,\n  data,\n  children,\n  text,\n  elm,\n  context,\n  componentOptions,\n  asyncFactory\n) {\n  this.tag = tag;\n  this.data = data;\n  this.children = children;\n  this.text = text;\n  this.elm = elm;\n  this.ns = undefined;\n  this.context = context;\n  this.fnContext = undefined;\n  this.fnOptions = undefined;\n  this.fnScopeId = undefined;\n  this.key = data && data.key;\n  this.componentOptions = componentOptions;\n  this.componentInstance = undefined;\n  this.parent = undefined;\n  this.raw = false;\n  this.isStatic = false;\n  this.isRootInsert = true;\n  this.isComment = false;\n  this.isCloned = false;\n  this.isOnce = false;\n  this.asyncFactory = asyncFactory;\n  this.asyncMeta = undefined;\n  this.isAsyncPlaceholder = false;\n};\n\nvar prototypeAccessors = { child: { configurable: true } };\n\n// DEPRECATED: alias for componentInstance for backwards compat.\n/* istanbul ignore next */\nprototypeAccessors.child.get = function () {\n  return this.componentInstance\n};\n\nObject.defineProperties( VNode.prototype, prototypeAccessors );\n\nvar createEmptyVNode = function (text) {\n  if ( text === void 0 ) text = '';\n\n  var node = new VNode();\n  node.text = text;\n  node.isComment = true;\n  return node\n};\n\nfunction createTextVNode (val) {\n  return new VNode(undefined, undefined, undefined, String(val))\n}\n\n// optimized shallow clone\n// used for static nodes and slot nodes because they may be reused across\n// multiple renders, cloning them avoids errors when DOM manipulations rely\n// on their elm reference.\nfunction cloneVNode (vnode) {\n  var cloned = new VNode(\n    vnode.tag,\n    vnode.data,\n    // #7975\n    // clone children array to avoid mutating original in case of cloning\n    // a child.\n    vnode.children && vnode.children.slice(),\n    vnode.text,\n    vnode.elm,\n    vnode.context,\n    vnode.componentOptions,\n    vnode.asyncFactory\n  );\n  cloned.ns = vnode.ns;\n  cloned.isStatic = vnode.isStatic;\n  cloned.key = vnode.key;\n  cloned.isComment = vnode.isComment;\n  cloned.fnContext = vnode.fnContext;\n  cloned.fnOptions = vnode.fnOptions;\n  cloned.fnScopeId = vnode.fnScopeId;\n  cloned.asyncMeta = vnode.asyncMeta;\n  cloned.isCloned = true;\n  return cloned\n}\n\n/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto);\n\nvar methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n];\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator () {\n    var args = [], len = arguments.length;\n    while ( len-- ) args[ len ] = arguments[ len ];\n\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args;\n        break\n      case 'splice':\n        inserted = args.slice(2);\n        break\n    }\n    if (inserted) { ob.observeArray(inserted); }\n    // notify change\n    ob.dep.notify();\n    return result\n  });\n});\n\n/*  */\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */\nvar shouldObserve = true;\n\nfunction toggleObserving (value) {\n  shouldObserve = value;\n}\n\n/**\n * Observer class that is attached to each observed\n * object. Once attached, the observer converts the target\n * object's property keys into getter/setters that\n * collect dependencies and dispatch updates.\n */\nvar Observer = function Observer (value) {\n  this.value = value;\n  this.dep = new Dep();\n  this.vmCount = 0;\n  def(value, '__ob__', this);\n  if (Array.isArray(value)) {\n    if (hasProto) {\n      protoAugment(value, arrayMethods);\n    } else {\n      copyAugment(value, arrayMethods, arrayKeys);\n    }\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n};\n\n/**\n * Walk through all properties and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n */\nObserver.prototype.walk = function walk (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0; i < keys.length; i++) {\n    defineReactive$$1(obj, keys[i]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n */\nObserver.prototype.observeArray = function observeArray (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n// helpers\n\n/**\n * Augment a target Object or Array by intercepting\n * the prototype chain using __proto__\n */\nfunction protoAugment (target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment a target Object or Array by defining\n * hidden properties.\n */\n/* istanbul ignore next */\nfunction copyAugment (target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n */\nfunction observe (value, asRootData) {\n  if (!isObject(value) || value instanceof VNode) {\n    return\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (\n    shouldObserve &&\n    !isServerRendering() &&\n    (Array.isArray(value) || isPlainObject(value)) &&\n    Object.isExtensible(value) &&\n    !value._isVue\n  ) {\n    ob = new Observer(value);\n  }\n  if (asRootData && ob) {\n    ob.vmCount++;\n  }\n  return ob\n}\n\n/**\n * Define a reactive property on an Object.\n */\nfunction defineReactive$$1 (\n  obj,\n  key,\n  val,\n  customSetter,\n  shallow\n) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n  if ((!getter || setter) && arguments.length === 2) {\n    val = obj[key];\n  }\n\n  var childOb = !shallow && observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter () {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n          if (Array.isArray(value)) {\n            dependArray(value);\n          }\n        }\n      }\n      return value\n    },\n    set: function reactiveSetter (newVal) {\n      var value = getter ? getter.call(obj) : val;\n      /* eslint-disable no-self-compare */\n      if (newVal === value || (newVal !== newVal && value !== value)) {\n        return\n      }\n      /* eslint-enable no-self-compare */\n      if (false) {}\n      // #7981: for accessor properties without setter\n      if (getter && !setter) { return }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = !shallow && observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n/**\n * Set a property on an object. Adds the new property and\n * triggers change notification if the property doesn't\n * already exist.\n */\nfunction set (target, key, val) {\n  if (false\n  ) {}\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.length = Math.max(target.length, key);\n    target.splice(key, 1, val);\n    return val\n  }\n  if (key in target && !(key in Object.prototype)) {\n    target[key] = val;\n    return val\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     false && false;\n    return val\n  }\n  if (!ob) {\n    target[key] = val;\n    return val\n  }\n  defineReactive$$1(ob.value, key, val);\n  ob.dep.notify();\n  return val\n}\n\n/**\n * Delete a property and trigger change if necessary.\n */\nfunction del (target, key) {\n  if (false\n  ) {}\n  if (Array.isArray(target) && isValidArrayIndex(key)) {\n    target.splice(key, 1);\n    return\n  }\n  var ob = (target).__ob__;\n  if (target._isVue || (ob && ob.vmCount)) {\n     false && false;\n    return\n  }\n  if (!hasOwn(target, key)) {\n    return\n  }\n  delete target[key];\n  if (!ob) {\n    return\n  }\n  ob.dep.notify();\n}\n\n/**\n * Collect dependencies on array elements when the array is touched, since\n * we cannot intercept array element access like property getters.\n */\nfunction dependArray (value) {\n  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {\n    e = value[i];\n    e && e.__ob__ && e.__ob__.dep.depend();\n    if (Array.isArray(e)) {\n      dependArray(e);\n    }\n  }\n}\n\n/*  */\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */\nvar strats = config.optionMergeStrategies;\n\n/**\n * Options with restrictions\n */\nif (false) {}\n\n/**\n * Helper that recursively merges two data objects together.\n */\nfunction mergeData (to, from) {\n  if (!from) { return to }\n  var key, toVal, fromVal;\n\n  var keys = hasSymbol\n    ? Reflect.ownKeys(from)\n    : Object.keys(from);\n\n  for (var i = 0; i < keys.length; i++) {\n    key = keys[i];\n    // in case the object is already observed...\n    if (key === '__ob__') { continue }\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (\n      toVal !== fromVal &&\n      isPlainObject(toVal) &&\n      isPlainObject(fromVal)\n    ) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to\n}\n\n/**\n * Data\n */\nfunction mergeDataOrFn (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal\n    }\n    if (!parentVal) {\n      return childVal\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn () {\n      return mergeData(\n        typeof childVal === 'function' ? childVal.call(this, this) : childVal,\n        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal\n      )\n    }\n  } else {\n    return function mergedInstanceDataFn () {\n      // instance merge\n      var instanceData = typeof childVal === 'function'\n        ? childVal.call(vm, vm)\n        : childVal;\n      var defaultData = typeof parentVal === 'function'\n        ? parentVal.call(vm, vm)\n        : parentVal;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData)\n      } else {\n        return defaultData\n      }\n    }\n  }\n}\n\nstrats.data = function (\n  parentVal,\n  childVal,\n  vm\n) {\n  if (!vm) {\n    if (childVal && typeof childVal !== 'function') {\n       false && false;\n\n      return parentVal\n    }\n    return mergeDataOrFn(parentVal, childVal)\n  }\n\n  return mergeDataOrFn(parentVal, childVal, vm)\n};\n\n/**\n * Hooks and props are merged as arrays.\n */\nfunction mergeHook (\n  parentVal,\n  childVal\n) {\n  var res = childVal\n    ? parentVal\n      ? parentVal.concat(childVal)\n      : Array.isArray(childVal)\n        ? childVal\n        : [childVal]\n    : parentVal;\n  return res\n    ? dedupeHooks(res)\n    : res\n}\n\nfunction dedupeHooks (hooks) {\n  var res = [];\n  for (var i = 0; i < hooks.length; i++) {\n    if (res.indexOf(hooks[i]) === -1) {\n      res.push(hooks[i]);\n    }\n  }\n  return res\n}\n\nLIFECYCLE_HOOKS.forEach(function (hook) {\n  strats[hook] = mergeHook;\n});\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\nfunction mergeAssets (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  var res = Object.create(parentVal || null);\n  if (childVal) {\n     false && false;\n    return extend(res, childVal)\n  } else {\n    return res\n  }\n}\n\nASSET_TYPES.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\nstrats.watch = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  // work around Firefox's Object.prototype.watch...\n  if (parentVal === nativeWatch) { parentVal = undefined; }\n  if (childVal === nativeWatch) { childVal = undefined; }\n  /* istanbul ignore if */\n  if (!childVal) { return Object.create(parentVal || null) }\n  if (false) {}\n  if (!parentVal) { return childVal }\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key$1 in childVal) {\n    var parent = ret[key$1];\n    var child = childVal[key$1];\n    if (parent && !Array.isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key$1] = parent\n      ? parent.concat(child)\n      : Array.isArray(child) ? child : [child];\n  }\n  return ret\n};\n\n/**\n * Other object hashes.\n */\nstrats.props =\nstrats.methods =\nstrats.inject =\nstrats.computed = function (\n  parentVal,\n  childVal,\n  vm,\n  key\n) {\n  if (childVal && \"production\" !== 'production') {\n    assertObjectType(key, childVal, vm);\n  }\n  if (!parentVal) { return childVal }\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  if (childVal) { extend(ret, childVal); }\n  return ret\n};\nstrats.provide = mergeDataOrFn;\n\n/**\n * Default strategy.\n */\nvar defaultStrat = function (parentVal, childVal) {\n  return childVal === undefined\n    ? parentVal\n    : childVal\n};\n\n/**\n * Validate component names\n */\nfunction checkComponents (options) {\n  for (var key in options.components) {\n    validateComponentName(key);\n  }\n}\n\nfunction validateComponentName (name) {\n  if (!new RegExp((\"^[a-zA-Z][\\\\-\\\\.0-9_\" + (unicodeRegExp.source) + \"]*$\")).test(name)) {\n    warn(\n      'Invalid component name: \"' + name + '\". Component names ' +\n      'should conform to valid custom element name in html5 specification.'\n    );\n  }\n  if (isBuiltInTag(name) || config.isReservedTag(name)) {\n    warn(\n      'Do not use built-in or reserved HTML elements as component ' +\n      'id: ' + name\n    );\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n */\nfunction normalizeProps (options, vm) {\n  var props = options.props;\n  if (!props) { return }\n  var res = {};\n  var i, val, name;\n  if (Array.isArray(props)) {\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        name = camelize(val);\n        res[name] = { type: null };\n      } else if (false) {}\n    }\n  } else if (isPlainObject(props)) {\n    for (var key in props) {\n      val = props[key];\n      name = camelize(key);\n      res[name] = isPlainObject(val)\n        ? val\n        : { type: val };\n    }\n  } else if (false) {}\n  options.props = res;\n}\n\n/**\n * Normalize all injections into Object-based format\n */\nfunction normalizeInject (options, vm) {\n  var inject = options.inject;\n  if (!inject) { return }\n  var normalized = options.inject = {};\n  if (Array.isArray(inject)) {\n    for (var i = 0; i < inject.length; i++) {\n      normalized[inject[i]] = { from: inject[i] };\n    }\n  } else if (isPlainObject(inject)) {\n    for (var key in inject) {\n      var val = inject[key];\n      normalized[key] = isPlainObject(val)\n        ? extend({ from: key }, val)\n        : { from: val };\n    }\n  } else if (false) {}\n}\n\n/**\n * Normalize raw function directives into object format.\n */\nfunction normalizeDirectives (options) {\n  var dirs = options.directives;\n  if (dirs) {\n    for (var key in dirs) {\n      var def$$1 = dirs[key];\n      if (typeof def$$1 === 'function') {\n        dirs[key] = { bind: def$$1, update: def$$1 };\n      }\n    }\n  }\n}\n\nfunction assertObjectType (name, value, vm) {\n  if (!isPlainObject(value)) {\n    warn(\n      \"Invalid value for option \\\"\" + name + \"\\\": expected an Object, \" +\n      \"but got \" + (toRawType(value)) + \".\",\n      vm\n    );\n  }\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n */\nfunction mergeOptions (\n  parent,\n  child,\n  vm\n) {\n  if (false) {}\n\n  if (typeof child === 'function') {\n    child = child.options;\n  }\n\n  normalizeProps(child, vm);\n  normalizeInject(child, vm);\n  normalizeDirectives(child);\n\n  // Apply extends and mixins on the child options,\n  // but only if it is a raw options object that isn't\n  // the result of another mergeOptions call.\n  // Only merged options has the _base property.\n  if (!child._base) {\n    if (child.extends) {\n      parent = mergeOptions(parent, child.extends, vm);\n    }\n    if (child.mixins) {\n      for (var i = 0, l = child.mixins.length; i < l; i++) {\n        parent = mergeOptions(parent, child.mixins[i], vm);\n      }\n    }\n  }\n\n  var options = {};\n  var key;\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField (key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n */\nfunction resolveAsset (\n  options,\n  type,\n  id,\n  warnMissing\n) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return\n  }\n  var assets = options[type];\n  // check local registration variations first\n  if (hasOwn(assets, id)) { return assets[id] }\n  var camelizedId = camelize(id);\n  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }\n  var PascalCaseId = capitalize(camelizedId);\n  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }\n  // fallback to prototype chain\n  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];\n  if (false) {}\n  return res\n}\n\n/*  */\n\n\n\nfunction validateProp (\n  key,\n  propOptions,\n  propsData,\n  vm\n) {\n  var prop = propOptions[key];\n  var absent = !hasOwn(propsData, key);\n  var value = propsData[key];\n  // boolean casting\n  var booleanIndex = getTypeIndex(Boolean, prop.type);\n  if (booleanIndex > -1) {\n    if (absent && !hasOwn(prop, 'default')) {\n      value = false;\n    } else if (value === '' || value === hyphenate(key)) {\n      // only cast empty string / same name to boolean if\n      // boolean has higher priority\n      var stringIndex = getTypeIndex(String, prop.type);\n      if (stringIndex < 0 || booleanIndex < stringIndex) {\n        value = true;\n      }\n    }\n  }\n  // check default value\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop, key);\n    // since the default value is a fresh copy,\n    // make sure to observe it.\n    var prevShouldObserve = shouldObserve;\n    toggleObserving(true);\n    observe(value);\n    toggleObserving(prevShouldObserve);\n  }\n  if (\n    false\n  ) {}\n  return value\n}\n\n/**\n * Get the default value of a prop.\n */\nfunction getPropDefaultValue (vm, prop, key) {\n  // no default, return undefined\n  if (!hasOwn(prop, 'default')) {\n    return undefined\n  }\n  var def = prop.default;\n  // warn against non-factory defaults for Object & Array\n  if (false) {}\n  // the raw prop value was also undefined from previous render,\n  // return previous default value to avoid unnecessary watcher trigger\n  if (vm && vm.$options.propsData &&\n    vm.$options.propsData[key] === undefined &&\n    vm._props[key] !== undefined\n  ) {\n    return vm._props[key]\n  }\n  // call factory function for non-Function types\n  // a value is Function if its prototype is function even across different execution context\n  return typeof def === 'function' && getType(prop.type) !== 'Function'\n    ? def.call(vm)\n    : def\n}\n\n/**\n * Assert whether a prop is valid.\n */\nfunction assertProp (\n  prop,\n  name,\n  value,\n  vm,\n  absent\n) {\n  if (prop.required && absent) {\n    warn(\n      'Missing required prop: \"' + name + '\"',\n      vm\n    );\n    return\n  }\n  if (value == null && !prop.required) {\n    return\n  }\n  var type = prop.type;\n  var valid = !type || type === true;\n  var expectedTypes = [];\n  if (type) {\n    if (!Array.isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType || '');\n      valid = assertedType.valid;\n    }\n  }\n\n  if (!valid) {\n    warn(\n      getInvalidTypeMessage(name, value, expectedTypes),\n      vm\n    );\n    return\n  }\n  var validator = prop.validator;\n  if (validator) {\n    if (!validator(value)) {\n      warn(\n        'Invalid prop: custom validator check failed for prop \"' + name + '\".',\n        vm\n      );\n    }\n  }\n}\n\nvar simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;\n\nfunction assertType (value, type) {\n  var valid;\n  var expectedType = getType(type);\n  if (simpleCheckRE.test(expectedType)) {\n    var t = typeof value;\n    valid = t === expectedType.toLowerCase();\n    // for primitive wrapper objects\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = isPlainObject(value);\n  } else if (expectedType === 'Array') {\n    valid = Array.isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  }\n}\n\n/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */\nfunction getType (fn) {\n  var match = fn && fn.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : ''\n}\n\nfunction isSameType (a, b) {\n  return getType(a) === getType(b)\n}\n\nfunction getTypeIndex (type, expectedTypes) {\n  if (!Array.isArray(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1\n  }\n  for (var i = 0, len = expectedTypes.length; i < len; i++) {\n    if (isSameType(expectedTypes[i], type)) {\n      return i\n    }\n  }\n  return -1\n}\n\nfunction getInvalidTypeMessage (name, value, expectedTypes) {\n  var message = \"Invalid prop: type check failed for prop \\\"\" + name + \"\\\".\" +\n    \" Expected \" + (expectedTypes.map(capitalize).join(', '));\n  var expectedType = expectedTypes[0];\n  var receivedType = toRawType(value);\n  var expectedValue = styleValue(value, expectedType);\n  var receivedValue = styleValue(value, receivedType);\n  // check if we need to specify expected value\n  if (expectedTypes.length === 1 &&\n      isExplicable(expectedType) &&\n      !isBoolean(expectedType, receivedType)) {\n    message += \" with value \" + expectedValue;\n  }\n  message += \", got \" + receivedType + \" \";\n  // check if we need to specify received value\n  if (isExplicable(receivedType)) {\n    message += \"with value \" + receivedValue + \".\";\n  }\n  return message\n}\n\nfunction styleValue (value, type) {\n  if (type === 'String') {\n    return (\"\\\"\" + value + \"\\\"\")\n  } else if (type === 'Number') {\n    return (\"\" + (Number(value)))\n  } else {\n    return (\"\" + value)\n  }\n}\n\nfunction isExplicable (value) {\n  var explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })\n}\n\nfunction isBoolean () {\n  var args = [], len = arguments.length;\n  while ( len-- ) args[ len ] = arguments[ len ];\n\n  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })\n}\n\n/*  */\n\nfunction handleError (err, vm, info) {\n  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.\n  // See: https://github.com/vuejs/vuex/issues/1505\n  pushTarget();\n  try {\n    if (vm) {\n      var cur = vm;\n      while ((cur = cur.$parent)) {\n        var hooks = cur.$options.errorCaptured;\n        if (hooks) {\n          for (var i = 0; i < hooks.length; i++) {\n            try {\n              var capture = hooks[i].call(cur, err, vm, info) === false;\n              if (capture) { return }\n            } catch (e) {\n              globalHandleError(e, cur, 'errorCaptured hook');\n            }\n          }\n        }\n      }\n    }\n    globalHandleError(err, vm, info);\n  } finally {\n    popTarget();\n  }\n}\n\nfunction invokeWithErrorHandling (\n  handler,\n  context,\n  args,\n  vm,\n  info\n) {\n  var res;\n  try {\n    res = args ? handler.apply(context, args) : handler.call(context);\n    if (res && !res._isVue && isPromise(res) && !res._handled) {\n      res.catch(function (e) { return handleError(e, vm, info + \" (Promise/async)\"); });\n      // issue #9511\n      // avoid catch triggering multiple times when nested calls\n      res._handled = true;\n    }\n  } catch (e) {\n    handleError(e, vm, info);\n  }\n  return res\n}\n\nfunction globalHandleError (err, vm, info) {\n  if (config.errorHandler) {\n    try {\n      return config.errorHandler.call(null, err, vm, info)\n    } catch (e) {\n      // if the user intentionally throws the original error in the handler,\n      // do not log it twice\n      if (e !== err) {\n        logError(e, null, 'config.errorHandler');\n      }\n    }\n  }\n  logError(err, vm, info);\n}\n\nfunction logError (err, vm, info) {\n  if (false) {}\n  /* istanbul ignore else */\n  if ((inBrowser || inWeex) && typeof console !== 'undefined') {\n    console.error(err);\n  } else {\n    throw err\n  }\n}\n\n/*  */\n\nvar isUsingMicroTask = false;\n\nvar callbacks = [];\nvar pending = false;\n\nfunction flushCallbacks () {\n  pending = false;\n  var copies = callbacks.slice(0);\n  callbacks.length = 0;\n  for (var i = 0; i < copies.length; i++) {\n    copies[i]();\n  }\n}\n\n// Here we have async deferring wrappers using microtasks.\n// In 2.5 we used (macro) tasks (in combination with microtasks).\n// However, it has subtle problems when state is changed right before repaint\n// (e.g. #6813, out-in transitions).\n// Also, using (macro) tasks in event handler would cause some weird behaviors\n// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).\n// So we now use microtasks everywhere, again.\n// A major drawback of this tradeoff is that there are some scenarios\n// where microtasks have too high a priority and fire in between supposedly\n// sequential events (e.g. #4521, #6690, which have workarounds)\n// or even between bubbling of the same event (#6566).\nvar timerFunc;\n\n// The nextTick behavior leverages the microtask queue, which can be accessed\n// via either native Promise.then or MutationObserver.\n// MutationObserver has wider support, however it is seriously bugged in\n// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n// completely stops working after triggering a few times... so, if native\n// Promise is available, we will use it:\n/* istanbul ignore next, $flow-disable-line */\nif (typeof Promise !== 'undefined' && isNative(Promise)) {\n  var p = Promise.resolve();\n  timerFunc = function () {\n    p.then(flushCallbacks);\n    // In problematic UIWebViews, Promise.then doesn't completely break, but\n    // it can get stuck in a weird state where callbacks are pushed into the\n    // microtask queue but the queue isn't being flushed, until the browser\n    // needs to do some other work, e.g. handle a timer. Therefore we can\n    // \"force\" the microtask queue to be flushed by adding an empty timer.\n    if (isIOS) { setTimeout(noop); }\n  };\n  isUsingMicroTask = true;\n} else if (!isIE && typeof MutationObserver !== 'undefined' && (\n  isNative(MutationObserver) ||\n  // PhantomJS and iOS 7.x\n  MutationObserver.toString() === '[object MutationObserverConstructor]'\n)) {\n  // Use MutationObserver where native Promise is not available,\n  // e.g. PhantomJS, iOS7, Android 4.4\n  // (#6466 MutationObserver is unreliable in IE11)\n  var counter = 1;\n  var observer = new MutationObserver(flushCallbacks);\n  var textNode = document.createTextNode(String(counter));\n  observer.observe(textNode, {\n    characterData: true\n  });\n  timerFunc = function () {\n    counter = (counter + 1) % 2;\n    textNode.data = String(counter);\n  };\n  isUsingMicroTask = true;\n} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {\n  // Fallback to setImmediate.\n  // Technically it leverages the (macro) task queue,\n  // but it is still a better choice than setTimeout.\n  timerFunc = function () {\n    setImmediate(flushCallbacks);\n  };\n} else {\n  // Fallback to setTimeout.\n  timerFunc = function () {\n    setTimeout(flushCallbacks, 0);\n  };\n}\n\nfunction nextTick (cb, ctx) {\n  var _resolve;\n  callbacks.push(function () {\n    if (cb) {\n      try {\n        cb.call(ctx);\n      } catch (e) {\n        handleError(e, ctx, 'nextTick');\n      }\n    } else if (_resolve) {\n      _resolve(ctx);\n    }\n  });\n  if (!pending) {\n    pending = true;\n    timerFunc();\n  }\n  // $flow-disable-line\n  if (!cb && typeof Promise !== 'undefined') {\n    return new Promise(function (resolve) {\n      _resolve = resolve;\n    })\n  }\n}\n\n/*  */\n\nvar mark;\nvar measure;\n\nif (false) { var perf; }\n\n/* not type checking this file because flow doesn't play well with Proxy */\n\nvar initProxy;\n\nif (false) { var getHandler, hasHandler, isBuiltInModifier, hasProxy, warnReservedPrefix, warnNonPresent, allowedGlobals; }\n\n/*  */\n\nvar seenObjects = new _Set();\n\n/**\n * Recursively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n */\nfunction traverse (val) {\n  _traverse(val, seenObjects);\n  seenObjects.clear();\n}\n\nfunction _traverse (val, seen) {\n  var i, keys;\n  var isA = Array.isArray(val);\n  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {\n    return\n  }\n  if (val.__ob__) {\n    var depId = val.__ob__.dep.id;\n    if (seen.has(depId)) {\n      return\n    }\n    seen.add(depId);\n  }\n  if (isA) {\n    i = val.length;\n    while (i--) { _traverse(val[i], seen); }\n  } else {\n    keys = Object.keys(val);\n    i = keys.length;\n    while (i--) { _traverse(val[keys[i]], seen); }\n  }\n}\n\n/*  */\n\nvar normalizeEvent = cached(function (name) {\n  var passive = name.charAt(0) === '&';\n  name = passive ? name.slice(1) : name;\n  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first\n  name = once$$1 ? name.slice(1) : name;\n  var capture = name.charAt(0) === '!';\n  name = capture ? name.slice(1) : name;\n  return {\n    name: name,\n    once: once$$1,\n    capture: capture,\n    passive: passive\n  }\n});\n\nfunction createFnInvoker (fns, vm) {\n  function invoker () {\n    var arguments$1 = arguments;\n\n    var fns = invoker.fns;\n    if (Array.isArray(fns)) {\n      var cloned = fns.slice();\n      for (var i = 0; i < cloned.length; i++) {\n        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, \"v-on handler\");\n      }\n    } else {\n      // return handler return value for single handlers\n      return invokeWithErrorHandling(fns, null, arguments, vm, \"v-on handler\")\n    }\n  }\n  invoker.fns = fns;\n  return invoker\n}\n\nfunction updateListeners (\n  on,\n  oldOn,\n  add,\n  remove$$1,\n  createOnceHandler,\n  vm\n) {\n  var name, def$$1, cur, old, event;\n  for (name in on) {\n    def$$1 = cur = on[name];\n    old = oldOn[name];\n    event = normalizeEvent(name);\n    if (isUndef(cur)) {\n       false && false;\n    } else if (isUndef(old)) {\n      if (isUndef(cur.fns)) {\n        cur = on[name] = createFnInvoker(cur, vm);\n      }\n      if (isTrue(event.once)) {\n        cur = on[name] = createOnceHandler(event.name, cur, event.capture);\n      }\n      add(event.name, cur, event.capture, event.passive, event.params);\n    } else if (cur !== old) {\n      old.fns = cur;\n      on[name] = old;\n    }\n  }\n  for (name in oldOn) {\n    if (isUndef(on[name])) {\n      event = normalizeEvent(name);\n      remove$$1(event.name, oldOn[name], event.capture);\n    }\n  }\n}\n\n/*  */\n\nfunction mergeVNodeHook (def, hookKey, hook) {\n  if (def instanceof VNode) {\n    def = def.data.hook || (def.data.hook = {});\n  }\n  var invoker;\n  var oldHook = def[hookKey];\n\n  function wrappedHook () {\n    hook.apply(this, arguments);\n    // important: remove merged hook to ensure it's called only once\n    // and prevent memory leak\n    remove(invoker.fns, wrappedHook);\n  }\n\n  if (isUndef(oldHook)) {\n    // no existing hook\n    invoker = createFnInvoker([wrappedHook]);\n  } else {\n    /* istanbul ignore if */\n    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {\n      // already a merged invoker\n      invoker = oldHook;\n      invoker.fns.push(wrappedHook);\n    } else {\n      // existing plain hook\n      invoker = createFnInvoker([oldHook, wrappedHook]);\n    }\n  }\n\n  invoker.merged = true;\n  def[hookKey] = invoker;\n}\n\n/*  */\n\nfunction extractPropsFromVNodeData (\n  data,\n  Ctor,\n  tag\n) {\n  // we are only extracting raw values here.\n  // validation and default values are handled in the child\n  // component itself.\n  var propOptions = Ctor.options.props;\n  if (isUndef(propOptions)) {\n    return\n  }\n  var res = {};\n  var attrs = data.attrs;\n  var props = data.props;\n  if (isDef(attrs) || isDef(props)) {\n    for (var key in propOptions) {\n      var altKey = hyphenate(key);\n      if (false) { var keyInLowerCase; }\n      checkProp(res, props, key, altKey, true) ||\n      checkProp(res, attrs, key, altKey, false);\n    }\n  }\n  return res\n}\n\nfunction checkProp (\n  res,\n  hash,\n  key,\n  altKey,\n  preserve\n) {\n  if (isDef(hash)) {\n    if (hasOwn(hash, key)) {\n      res[key] = hash[key];\n      if (!preserve) {\n        delete hash[key];\n      }\n      return true\n    } else if (hasOwn(hash, altKey)) {\n      res[key] = hash[altKey];\n      if (!preserve) {\n        delete hash[altKey];\n      }\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\n// The template compiler attempts to minimize the need for normalization by\n// statically analyzing the template at compile time.\n//\n// For plain HTML markup, normalization can be completely skipped because the\n// generated render function is guaranteed to return Array<VNode>. There are\n// two cases where extra normalization is needed:\n\n// 1. When the children contains components - because a functional component\n// may return an Array instead of a single root. In this case, just a simple\n// normalization is needed - if any child is an Array, we flatten the whole\n// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep\n// because functional components already normalize their own children.\nfunction simpleNormalizeChildren (children) {\n  for (var i = 0; i < children.length; i++) {\n    if (Array.isArray(children[i])) {\n      return Array.prototype.concat.apply([], children)\n    }\n  }\n  return children\n}\n\n// 2. When the children contains constructs that always generated nested Arrays,\n// e.g. <template>, <slot>, v-for, or when the children is provided by user\n// with hand-written render functions / JSX. In such cases a full normalization\n// is needed to cater to all possible types of children values.\nfunction normalizeChildren (children) {\n  return isPrimitive(children)\n    ? [createTextVNode(children)]\n    : Array.isArray(children)\n      ? normalizeArrayChildren(children)\n      : undefined\n}\n\nfunction isTextNode (node) {\n  return isDef(node) && isDef(node.text) && isFalse(node.isComment)\n}\n\nfunction normalizeArrayChildren (children, nestedIndex) {\n  var res = [];\n  var i, c, lastIndex, last;\n  for (i = 0; i < children.length; i++) {\n    c = children[i];\n    if (isUndef(c) || typeof c === 'boolean') { continue }\n    lastIndex = res.length - 1;\n    last = res[lastIndex];\n    //  nested\n    if (Array.isArray(c)) {\n      if (c.length > 0) {\n        c = normalizeArrayChildren(c, ((nestedIndex || '') + \"_\" + i));\n        // merge adjacent text nodes\n        if (isTextNode(c[0]) && isTextNode(last)) {\n          res[lastIndex] = createTextVNode(last.text + (c[0]).text);\n          c.shift();\n        }\n        res.push.apply(res, c);\n      }\n    } else if (isPrimitive(c)) {\n      if (isTextNode(last)) {\n        // merge adjacent text nodes\n        // this is necessary for SSR hydration because text nodes are\n        // essentially merged when rendered to HTML strings\n        res[lastIndex] = createTextVNode(last.text + c);\n      } else if (c !== '') {\n        // convert primitive to vnode\n        res.push(createTextVNode(c));\n      }\n    } else {\n      if (isTextNode(c) && isTextNode(last)) {\n        // merge adjacent text nodes\n        res[lastIndex] = createTextVNode(last.text + c.text);\n      } else {\n        // default key for nested array children (likely generated by v-for)\n        if (isTrue(children._isVList) &&\n          isDef(c.tag) &&\n          isUndef(c.key) &&\n          isDef(nestedIndex)) {\n          c.key = \"__vlist\" + nestedIndex + \"_\" + i + \"__\";\n        }\n        res.push(c);\n      }\n    }\n  }\n  return res\n}\n\n/*  */\n\nfunction initProvide (vm) {\n  var provide = vm.$options.provide;\n  if (provide) {\n    vm._provided = typeof provide === 'function'\n      ? provide.call(vm)\n      : provide;\n  }\n}\n\nfunction initInjections (vm) {\n  var result = resolveInject(vm.$options.inject, vm);\n  if (result) {\n    toggleObserving(false);\n    Object.keys(result).forEach(function (key) {\n      /* istanbul ignore else */\n      if (false) {} else {\n        defineReactive$$1(vm, key, result[key]);\n      }\n    });\n    toggleObserving(true);\n  }\n}\n\nfunction resolveInject (inject, vm) {\n  if (inject) {\n    // inject is :any because flow is not smart enough to figure out cached\n    var result = Object.create(null);\n    var keys = hasSymbol\n      ? Reflect.ownKeys(inject)\n      : Object.keys(inject);\n\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      // #6574 in case the inject object is observed...\n      if (key === '__ob__') { continue }\n      var provideKey = inject[key].from;\n      var source = vm;\n      while (source) {\n        if (source._provided && hasOwn(source._provided, provideKey)) {\n          result[key] = source._provided[provideKey];\n          break\n        }\n        source = source.$parent;\n      }\n      if (!source) {\n        if ('default' in inject[key]) {\n          var provideDefault = inject[key].default;\n          result[key] = typeof provideDefault === 'function'\n            ? provideDefault.call(vm)\n            : provideDefault;\n        } else if (false) {}\n      }\n    }\n    return result\n  }\n}\n\n/*  */\n\n\n\n/**\n * Runtime helper for resolving raw children VNodes into a slot object.\n */\nfunction resolveSlots (\n  children,\n  context\n) {\n  if (!children || !children.length) {\n    return {}\n  }\n  var slots = {};\n  for (var i = 0, l = children.length; i < l; i++) {\n    var child = children[i];\n    var data = child.data;\n    // remove slot attribute if the node is resolved as a Vue slot node\n    if (data && data.attrs && data.attrs.slot) {\n      delete data.attrs.slot;\n    }\n    // named slots should only be respected if the vnode was rendered in the\n    // same context.\n    if ((child.context === context || child.fnContext === context) &&\n      data && data.slot != null\n    ) {\n      var name = data.slot;\n      var slot = (slots[name] || (slots[name] = []));\n      if (child.tag === 'template') {\n        slot.push.apply(slot, child.children || []);\n      } else {\n        slot.push(child);\n      }\n    } else {\n      (slots.default || (slots.default = [])).push(child);\n    }\n  }\n  // ignore slots that contains only whitespace\n  for (var name$1 in slots) {\n    if (slots[name$1].every(isWhitespace)) {\n      delete slots[name$1];\n    }\n  }\n  return slots\n}\n\nfunction isWhitespace (node) {\n  return (node.isComment && !node.asyncFactory) || node.text === ' '\n}\n\n/*  */\n\nfunction normalizeScopedSlots (\n  slots,\n  normalSlots,\n  prevSlots\n) {\n  var res;\n  var hasNormalSlots = Object.keys(normalSlots).length > 0;\n  var isStable = slots ? !!slots.$stable : !hasNormalSlots;\n  var key = slots && slots.$key;\n  if (!slots) {\n    res = {};\n  } else if (slots._normalized) {\n    // fast path 1: child component re-render only, parent did not change\n    return slots._normalized\n  } else if (\n    isStable &&\n    prevSlots &&\n    prevSlots !== emptyObject &&\n    key === prevSlots.$key &&\n    !hasNormalSlots &&\n    !prevSlots.$hasNormal\n  ) {\n    // fast path 2: stable scoped slots w/ no normal slots to proxy,\n    // only need to normalize once\n    return prevSlots\n  } else {\n    res = {};\n    for (var key$1 in slots) {\n      if (slots[key$1] && key$1[0] !== '$') {\n        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);\n      }\n    }\n  }\n  // expose normal slots on scopedSlots\n  for (var key$2 in normalSlots) {\n    if (!(key$2 in res)) {\n      res[key$2] = proxyNormalSlot(normalSlots, key$2);\n    }\n  }\n  // avoriaz seems to mock a non-extensible $scopedSlots object\n  // and when that is passed down this would cause an error\n  if (slots && Object.isExtensible(slots)) {\n    (slots)._normalized = res;\n  }\n  def(res, '$stable', isStable);\n  def(res, '$key', key);\n  def(res, '$hasNormal', hasNormalSlots);\n  return res\n}\n\nfunction normalizeScopedSlot(normalSlots, key, fn) {\n  var normalized = function () {\n    var res = arguments.length ? fn.apply(null, arguments) : fn({});\n    res = res && typeof res === 'object' && !Array.isArray(res)\n      ? [res] // single vnode\n      : normalizeChildren(res);\n    return res && (\n      res.length === 0 ||\n      (res.length === 1 && res[0].isComment) // #9658\n    ) ? undefined\n      : res\n  };\n  // this is a slot using the new v-slot syntax without scope. although it is\n  // compiled as a scoped slot, render fn users would expect it to be present\n  // on this.$slots because the usage is semantically a normal slot.\n  if (fn.proxy) {\n    Object.defineProperty(normalSlots, key, {\n      get: normalized,\n      enumerable: true,\n      configurable: true\n    });\n  }\n  return normalized\n}\n\nfunction proxyNormalSlot(slots, key) {\n  return function () { return slots[key]; }\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering v-for lists.\n */\nfunction renderList (\n  val,\n  render\n) {\n  var ret, i, l, keys, key;\n  if (Array.isArray(val) || typeof val === 'string') {\n    ret = new Array(val.length);\n    for (i = 0, l = val.length; i < l; i++) {\n      ret[i] = render(val[i], i);\n    }\n  } else if (typeof val === 'number') {\n    ret = new Array(val);\n    for (i = 0; i < val; i++) {\n      ret[i] = render(i + 1, i);\n    }\n  } else if (isObject(val)) {\n    if (hasSymbol && val[Symbol.iterator]) {\n      ret = [];\n      var iterator = val[Symbol.iterator]();\n      var result = iterator.next();\n      while (!result.done) {\n        ret.push(render(result.value, ret.length));\n        result = iterator.next();\n      }\n    } else {\n      keys = Object.keys(val);\n      ret = new Array(keys.length);\n      for (i = 0, l = keys.length; i < l; i++) {\n        key = keys[i];\n        ret[i] = render(val[key], key, i);\n      }\n    }\n  }\n  if (!isDef(ret)) {\n    ret = [];\n  }\n  (ret)._isVList = true;\n  return ret\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering <slot>\n */\nfunction renderSlot (\n  name,\n  fallback,\n  props,\n  bindObject\n) {\n  var scopedSlotFn = this.$scopedSlots[name];\n  var nodes;\n  if (scopedSlotFn) { // scoped slot\n    props = props || {};\n    if (bindObject) {\n      if (false) {}\n      props = extend(extend({}, bindObject), props);\n    }\n    nodes = scopedSlotFn(props) || fallback;\n  } else {\n    nodes = this.$slots[name] || fallback;\n  }\n\n  var target = props && props.slot;\n  if (target) {\n    return this.$createElement('template', { slot: target }, nodes)\n  } else {\n    return nodes\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for resolving filters\n */\nfunction resolveFilter (id) {\n  return resolveAsset(this.$options, 'filters', id, true) || identity\n}\n\n/*  */\n\nfunction isKeyNotMatch (expect, actual) {\n  if (Array.isArray(expect)) {\n    return expect.indexOf(actual) === -1\n  } else {\n    return expect !== actual\n  }\n}\n\n/**\n * Runtime helper for checking keyCodes from config.\n * exposed as Vue.prototype._k\n * passing in eventKeyName as last argument separately for backwards compat\n */\nfunction checkKeyCodes (\n  eventKeyCode,\n  key,\n  builtInKeyCode,\n  eventKeyName,\n  builtInKeyName\n) {\n  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;\n  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {\n    return isKeyNotMatch(builtInKeyName, eventKeyName)\n  } else if (mappedKeyCode) {\n    return isKeyNotMatch(mappedKeyCode, eventKeyCode)\n  } else if (eventKeyName) {\n    return hyphenate(eventKeyName) !== key\n  }\n}\n\n/*  */\n\n/**\n * Runtime helper for merging v-bind=\"object\" into a VNode's data.\n */\nfunction bindObjectProps (\n  data,\n  tag,\n  value,\n  asProp,\n  isSync\n) {\n  if (value) {\n    if (!isObject(value)) {\n       false && false;\n    } else {\n      if (Array.isArray(value)) {\n        value = toObject(value);\n      }\n      var hash;\n      var loop = function ( key ) {\n        if (\n          key === 'class' ||\n          key === 'style' ||\n          isReservedAttribute(key)\n        ) {\n          hash = data;\n        } else {\n          var type = data.attrs && data.attrs.type;\n          hash = asProp || config.mustUseProp(tag, type, key)\n            ? data.domProps || (data.domProps = {})\n            : data.attrs || (data.attrs = {});\n        }\n        var camelizedKey = camelize(key);\n        var hyphenatedKey = hyphenate(key);\n        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {\n          hash[key] = value[key];\n\n          if (isSync) {\n            var on = data.on || (data.on = {});\n            on[(\"update:\" + key)] = function ($event) {\n              value[key] = $event;\n            };\n          }\n        }\n      };\n\n      for (var key in value) loop( key );\n    }\n  }\n  return data\n}\n\n/*  */\n\n/**\n * Runtime helper for rendering static trees.\n */\nfunction renderStatic (\n  index,\n  isInFor\n) {\n  var cached = this._staticTrees || (this._staticTrees = []);\n  var tree = cached[index];\n  // if has already-rendered static tree and not inside v-for,\n  // we can reuse the same tree.\n  if (tree && !isInFor) {\n    return tree\n  }\n  // otherwise, render a fresh tree.\n  tree = cached[index] = this.$options.staticRenderFns[index].call(\n    this._renderProxy,\n    null,\n    this // for render fns generated for functional component templates\n  );\n  markStatic(tree, (\"__static__\" + index), false);\n  return tree\n}\n\n/**\n * Runtime helper for v-once.\n * Effectively it means marking the node as static with a unique key.\n */\nfunction markOnce (\n  tree,\n  index,\n  key\n) {\n  markStatic(tree, (\"__once__\" + index + (key ? (\"_\" + key) : \"\")), true);\n  return tree\n}\n\nfunction markStatic (\n  tree,\n  key,\n  isOnce\n) {\n  if (Array.isArray(tree)) {\n    for (var i = 0; i < tree.length; i++) {\n      if (tree[i] && typeof tree[i] !== 'string') {\n        markStaticNode(tree[i], (key + \"_\" + i), isOnce);\n      }\n    }\n  } else {\n    markStaticNode(tree, key, isOnce);\n  }\n}\n\nfunction markStaticNode (node, key, isOnce) {\n  node.isStatic = true;\n  node.key = key;\n  node.isOnce = isOnce;\n}\n\n/*  */\n\nfunction bindObjectListeners (data, value) {\n  if (value) {\n    if (!isPlainObject(value)) {\n       false && false;\n    } else {\n      var on = data.on = data.on ? extend({}, data.on) : {};\n      for (var key in value) {\n        var existing = on[key];\n        var ours = value[key];\n        on[key] = existing ? [].concat(existing, ours) : ours;\n      }\n    }\n  }\n  return data\n}\n\n/*  */\n\nfunction resolveScopedSlots (\n  fns, // see flow/vnode\n  res,\n  // the following are added in 2.6\n  hasDynamicKeys,\n  contentHashKey\n) {\n  res = res || { $stable: !hasDynamicKeys };\n  for (var i = 0; i < fns.length; i++) {\n    var slot = fns[i];\n    if (Array.isArray(slot)) {\n      resolveScopedSlots(slot, res, hasDynamicKeys);\n    } else if (slot) {\n      // marker for reverse proxying v-slot without scope on this.$slots\n      if (slot.proxy) {\n        slot.fn.proxy = true;\n      }\n      res[slot.key] = slot.fn;\n    }\n  }\n  if (contentHashKey) {\n    (res).$key = contentHashKey;\n  }\n  return res\n}\n\n/*  */\n\nfunction bindDynamicKeys (baseObj, values) {\n  for (var i = 0; i < values.length; i += 2) {\n    var key = values[i];\n    if (typeof key === 'string' && key) {\n      baseObj[values[i]] = values[i + 1];\n    } else if (false) {}\n  }\n  return baseObj\n}\n\n// helper to dynamically append modifier runtime markers to event names.\n// ensure only append when value is already string, otherwise it will be cast\n// to string and cause the type check to miss.\nfunction prependModifier (value, symbol) {\n  return typeof value === 'string' ? symbol + value : value\n}\n\n/*  */\n\nfunction installRenderHelpers (target) {\n  target._o = markOnce;\n  target._n = toNumber;\n  target._s = toString;\n  target._l = renderList;\n  target._t = renderSlot;\n  target._q = looseEqual;\n  target._i = looseIndexOf;\n  target._m = renderStatic;\n  target._f = resolveFilter;\n  target._k = checkKeyCodes;\n  target._b = bindObjectProps;\n  target._v = createTextVNode;\n  target._e = createEmptyVNode;\n  target._u = resolveScopedSlots;\n  target._g = bindObjectListeners;\n  target._d = bindDynamicKeys;\n  target._p = prependModifier;\n}\n\n/*  */\n\nfunction FunctionalRenderContext (\n  data,\n  props,\n  children,\n  parent,\n  Ctor\n) {\n  var this$1 = this;\n\n  var options = Ctor.options;\n  // ensure the createElement function in functional components\n  // gets a unique context - this is necessary for correct named slot check\n  var contextVm;\n  if (hasOwn(parent, '_uid')) {\n    contextVm = Object.create(parent);\n    // $flow-disable-line\n    contextVm._original = parent;\n  } else {\n    // the context vm passed in is a functional context as well.\n    // in this case we want to make sure we are able to get a hold to the\n    // real context instance.\n    contextVm = parent;\n    // $flow-disable-line\n    parent = parent._original;\n  }\n  var isCompiled = isTrue(options._compiled);\n  var needNormalization = !isCompiled;\n\n  this.data = data;\n  this.props = props;\n  this.children = children;\n  this.parent = parent;\n  this.listeners = data.on || emptyObject;\n  this.injections = resolveInject(options.inject, parent);\n  this.slots = function () {\n    if (!this$1.$slots) {\n      normalizeScopedSlots(\n        data.scopedSlots,\n        this$1.$slots = resolveSlots(children, parent)\n      );\n    }\n    return this$1.$slots\n  };\n\n  Object.defineProperty(this, 'scopedSlots', ({\n    enumerable: true,\n    get: function get () {\n      return normalizeScopedSlots(data.scopedSlots, this.slots())\n    }\n  }));\n\n  // support for compiled functional template\n  if (isCompiled) {\n    // exposing $options for renderStatic()\n    this.$options = options;\n    // pre-resolve slots for renderSlot()\n    this.$slots = this.slots();\n    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);\n  }\n\n  if (options._scopeId) {\n    this._c = function (a, b, c, d) {\n      var vnode = createElement(contextVm, a, b, c, d, needNormalization);\n      if (vnode && !Array.isArray(vnode)) {\n        vnode.fnScopeId = options._scopeId;\n        vnode.fnContext = parent;\n      }\n      return vnode\n    };\n  } else {\n    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };\n  }\n}\n\ninstallRenderHelpers(FunctionalRenderContext.prototype);\n\nfunction createFunctionalComponent (\n  Ctor,\n  propsData,\n  data,\n  contextVm,\n  children\n) {\n  var options = Ctor.options;\n  var props = {};\n  var propOptions = options.props;\n  if (isDef(propOptions)) {\n    for (var key in propOptions) {\n      props[key] = validateProp(key, propOptions, propsData || emptyObject);\n    }\n  } else {\n    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }\n    if (isDef(data.props)) { mergeProps(props, data.props); }\n  }\n\n  var renderContext = new FunctionalRenderContext(\n    data,\n    props,\n    children,\n    contextVm,\n    Ctor\n  );\n\n  var vnode = options.render.call(null, renderContext._c, renderContext);\n\n  if (vnode instanceof VNode) {\n    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)\n  } else if (Array.isArray(vnode)) {\n    var vnodes = normalizeChildren(vnode) || [];\n    var res = new Array(vnodes.length);\n    for (var i = 0; i < vnodes.length; i++) {\n      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);\n    }\n    return res\n  }\n}\n\nfunction cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {\n  // #7817 clone node before setting fnContext, otherwise if the node is reused\n  // (e.g. it was from a cached normal slot) the fnContext causes named slots\n  // that should not be matched to match.\n  var clone = cloneVNode(vnode);\n  clone.fnContext = contextVm;\n  clone.fnOptions = options;\n  if (false) {}\n  if (data.slot) {\n    (clone.data || (clone.data = {})).slot = data.slot;\n  }\n  return clone\n}\n\nfunction mergeProps (to, from) {\n  for (var key in from) {\n    to[camelize(key)] = from[key];\n  }\n}\n\n/*  */\n\n/*  */\n\n/*  */\n\n/*  */\n\n// inline hooks to be invoked on component VNodes during patch\nvar componentVNodeHooks = {\n  init: function init (vnode, hydrating) {\n    if (\n      vnode.componentInstance &&\n      !vnode.componentInstance._isDestroyed &&\n      vnode.data.keepAlive\n    ) {\n      // kept-alive components, treat as a patch\n      var mountedNode = vnode; // work around flow\n      componentVNodeHooks.prepatch(mountedNode, mountedNode);\n    } else {\n      var child = vnode.componentInstance = createComponentInstanceForVnode(\n        vnode,\n        activeInstance\n      );\n      child.$mount(hydrating ? vnode.elm : undefined, hydrating);\n    }\n  },\n\n  prepatch: function prepatch (oldVnode, vnode) {\n    var options = vnode.componentOptions;\n    var child = vnode.componentInstance = oldVnode.componentInstance;\n    updateChildComponent(\n      child,\n      options.propsData, // updated props\n      options.listeners, // updated listeners\n      vnode, // new parent vnode\n      options.children // new children\n    );\n  },\n\n  insert: function insert (vnode) {\n    var context = vnode.context;\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isMounted) {\n      componentInstance._isMounted = true;\n      callHook(componentInstance, 'mounted');\n    }\n    if (vnode.data.keepAlive) {\n      if (context._isMounted) {\n        // vue-router#1212\n        // During updates, a kept-alive component's child components may\n        // change, so directly walking the tree here may call activated hooks\n        // on incorrect children. Instead we push them into a queue which will\n        // be processed after the whole patch process ended.\n        queueActivatedComponent(componentInstance);\n      } else {\n        activateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  },\n\n  destroy: function destroy (vnode) {\n    var componentInstance = vnode.componentInstance;\n    if (!componentInstance._isDestroyed) {\n      if (!vnode.data.keepAlive) {\n        componentInstance.$destroy();\n      } else {\n        deactivateChildComponent(componentInstance, true /* direct */);\n      }\n    }\n  }\n};\n\nvar hooksToMerge = Object.keys(componentVNodeHooks);\n\nfunction createComponent (\n  Ctor,\n  data,\n  context,\n  children,\n  tag\n) {\n  if (isUndef(Ctor)) {\n    return\n  }\n\n  var baseCtor = context.$options._base;\n\n  // plain options object: turn it into a constructor\n  if (isObject(Ctor)) {\n    Ctor = baseCtor.extend(Ctor);\n  }\n\n  // if at this stage it's not a constructor or an async component factory,\n  // reject.\n  if (typeof Ctor !== 'function') {\n    if (false) {}\n    return\n  }\n\n  // async component\n  var asyncFactory;\n  if (isUndef(Ctor.cid)) {\n    asyncFactory = Ctor;\n    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);\n    if (Ctor === undefined) {\n      // return a placeholder node for async component, which is rendered\n      // as a comment node but preserves all the raw information for the node.\n      // the information will be used for async server-rendering and hydration.\n      return createAsyncPlaceholder(\n        asyncFactory,\n        data,\n        context,\n        children,\n        tag\n      )\n    }\n  }\n\n  data = data || {};\n\n  // resolve constructor options in case global mixins are applied after\n  // component constructor creation\n  resolveConstructorOptions(Ctor);\n\n  // transform component v-model data into props & events\n  if (isDef(data.model)) {\n    transformModel(Ctor.options, data);\n  }\n\n  // extract props\n  var propsData = extractPropsFromVNodeData(data, Ctor, tag);\n\n  // functional component\n  if (isTrue(Ctor.options.functional)) {\n    return createFunctionalComponent(Ctor, propsData, data, context, children)\n  }\n\n  // extract listeners, since these needs to be treated as\n  // child component listeners instead of DOM listeners\n  var listeners = data.on;\n  // replace with listeners with .native modifier\n  // so it gets processed during parent component patch.\n  data.on = data.nativeOn;\n\n  if (isTrue(Ctor.options.abstract)) {\n    // abstract components do not keep anything\n    // other than props & listeners & slot\n\n    // work around flow\n    var slot = data.slot;\n    data = {};\n    if (slot) {\n      data.slot = slot;\n    }\n  }\n\n  // install component management hooks onto the placeholder node\n  installComponentHooks(data);\n\n  // return a placeholder vnode\n  var name = Ctor.options.name || tag;\n  var vnode = new VNode(\n    (\"vue-component-\" + (Ctor.cid) + (name ? (\"-\" + name) : '')),\n    data, undefined, undefined, undefined, context,\n    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },\n    asyncFactory\n  );\n\n  return vnode\n}\n\nfunction createComponentInstanceForVnode (\n  vnode, // we know it's MountedComponentVNode but flow doesn't\n  parent // activeInstance in lifecycle state\n) {\n  var options = {\n    _isComponent: true,\n    _parentVnode: vnode,\n    parent: parent\n  };\n  // check inline-template render functions\n  var inlineTemplate = vnode.data.inlineTemplate;\n  if (isDef(inlineTemplate)) {\n    options.render = inlineTemplate.render;\n    options.staticRenderFns = inlineTemplate.staticRenderFns;\n  }\n  return new vnode.componentOptions.Ctor(options)\n}\n\nfunction installComponentHooks (data) {\n  var hooks = data.hook || (data.hook = {});\n  for (var i = 0; i < hooksToMerge.length; i++) {\n    var key = hooksToMerge[i];\n    var existing = hooks[key];\n    var toMerge = componentVNodeHooks[key];\n    if (existing !== toMerge && !(existing && existing._merged)) {\n      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;\n    }\n  }\n}\n\nfunction mergeHook$1 (f1, f2) {\n  var merged = function (a, b) {\n    // flow complains about extra args which is why we use any\n    f1(a, b);\n    f2(a, b);\n  };\n  merged._merged = true;\n  return merged\n}\n\n// transform component v-model info (value and callback) into\n// prop and event handler respectively.\nfunction transformModel (options, data) {\n  var prop = (options.model && options.model.prop) || 'value';\n  var event = (options.model && options.model.event) || 'input'\n  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;\n  var on = data.on || (data.on = {});\n  var existing = on[event];\n  var callback = data.model.callback;\n  if (isDef(existing)) {\n    if (\n      Array.isArray(existing)\n        ? existing.indexOf(callback) === -1\n        : existing !== callback\n    ) {\n      on[event] = [callback].concat(existing);\n    }\n  } else {\n    on[event] = callback;\n  }\n}\n\n/*  */\n\nvar SIMPLE_NORMALIZE = 1;\nvar ALWAYS_NORMALIZE = 2;\n\n// wrapper function for providing a more flexible interface\n// without getting yelled at by flow\nfunction createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType,\n  alwaysNormalize\n) {\n  if (Array.isArray(data) || isPrimitive(data)) {\n    normalizationType = children;\n    children = data;\n    data = undefined;\n  }\n  if (isTrue(alwaysNormalize)) {\n    normalizationType = ALWAYS_NORMALIZE;\n  }\n  return _createElement(context, tag, data, children, normalizationType)\n}\n\nfunction _createElement (\n  context,\n  tag,\n  data,\n  children,\n  normalizationType\n) {\n  if (isDef(data) && isDef((data).__ob__)) {\n     false && false;\n    return createEmptyVNode()\n  }\n  // object syntax in v-bind\n  if (isDef(data) && isDef(data.is)) {\n    tag = data.is;\n  }\n  if (!tag) {\n    // in case of component :is set to falsy value\n    return createEmptyVNode()\n  }\n  // warn against non-primitive key\n  if (false\n  ) {}\n  // support single function children as default scoped slot\n  if (Array.isArray(children) &&\n    typeof children[0] === 'function'\n  ) {\n    data = data || {};\n    data.scopedSlots = { default: children[0] };\n    children.length = 0;\n  }\n  if (normalizationType === ALWAYS_NORMALIZE) {\n    children = normalizeChildren(children);\n  } else if (normalizationType === SIMPLE_NORMALIZE) {\n    children = simpleNormalizeChildren(children);\n  }\n  var vnode, ns;\n  if (typeof tag === 'string') {\n    var Ctor;\n    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);\n    if (config.isReservedTag(tag)) {\n      // platform built-in elements\n      if (false) {}\n      vnode = new VNode(\n        config.parsePlatformTagName(tag), data, children,\n        undefined, undefined, context\n      );\n    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {\n      // component\n      vnode = createComponent(Ctor, data, context, children, tag);\n    } else {\n      // unknown or unlisted namespaced elements\n      // check at runtime because it may get assigned a namespace when its\n      // parent normalizes children\n      vnode = new VNode(\n        tag, data, children,\n        undefined, undefined, context\n      );\n    }\n  } else {\n    // direct component options / constructor\n    vnode = createComponent(tag, data, context, children);\n  }\n  if (Array.isArray(vnode)) {\n    return vnode\n  } else if (isDef(vnode)) {\n    if (isDef(ns)) { applyNS(vnode, ns); }\n    if (isDef(data)) { registerDeepBindings(data); }\n    return vnode\n  } else {\n    return createEmptyVNode()\n  }\n}\n\nfunction applyNS (vnode, ns, force) {\n  vnode.ns = ns;\n  if (vnode.tag === 'foreignObject') {\n    // use default namespace inside foreignObject\n    ns = undefined;\n    force = true;\n  }\n  if (isDef(vnode.children)) {\n    for (var i = 0, l = vnode.children.length; i < l; i++) {\n      var child = vnode.children[i];\n      if (isDef(child.tag) && (\n        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {\n        applyNS(child, ns, force);\n      }\n    }\n  }\n}\n\n// ref #5318\n// necessary to ensure parent re-render when deep bindings like :style and\n// :class are used on slot nodes\nfunction registerDeepBindings (data) {\n  if (isObject(data.style)) {\n    traverse(data.style);\n  }\n  if (isObject(data.class)) {\n    traverse(data.class);\n  }\n}\n\n/*  */\n\nfunction initRender (vm) {\n  vm._vnode = null; // the root of the child tree\n  vm._staticTrees = null; // v-once cached trees\n  var options = vm.$options;\n  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree\n  var renderContext = parentVnode && parentVnode.context;\n  vm.$slots = resolveSlots(options._renderChildren, renderContext);\n  vm.$scopedSlots = emptyObject;\n  // bind the createElement fn to this instance\n  // so that we get proper render context inside it.\n  // args order: tag, data, children, normalizationType, alwaysNormalize\n  // internal version is used by render functions compiled from templates\n  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };\n  // normalization is always applied for the public version, used in\n  // user-written render functions.\n  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };\n\n  // $attrs & $listeners are exposed for easier HOC creation.\n  // they need to be reactive so that HOCs using them are always updated\n  var parentData = parentVnode && parentVnode.data;\n\n  /* istanbul ignore else */\n  if (false) {} else {\n    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, null, true);\n    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, null, true);\n  }\n}\n\nvar currentRenderingInstance = null;\n\nfunction renderMixin (Vue) {\n  // install runtime convenience helpers\n  installRenderHelpers(Vue.prototype);\n\n  Vue.prototype.$nextTick = function (fn) {\n    return nextTick(fn, this)\n  };\n\n  Vue.prototype._render = function () {\n    var vm = this;\n    var ref = vm.$options;\n    var render = ref.render;\n    var _parentVnode = ref._parentVnode;\n\n    if (_parentVnode) {\n      vm.$scopedSlots = normalizeScopedSlots(\n        _parentVnode.data.scopedSlots,\n        vm.$slots,\n        vm.$scopedSlots\n      );\n    }\n\n    // set parent vnode. this allows render functions to have access\n    // to the data on the placeholder node.\n    vm.$vnode = _parentVnode;\n    // render self\n    var vnode;\n    try {\n      // There's no need to maintain a stack because all render fns are called\n      // separately from one another. Nested component's render fns are called\n      // when parent component is patched.\n      currentRenderingInstance = vm;\n      vnode = render.call(vm._renderProxy, vm.$createElement);\n    } catch (e) {\n      handleError(e, vm, \"render\");\n      // return error render result,\n      // or previous vnode to prevent render error causing blank component\n      /* istanbul ignore else */\n      if (false) {} else {\n        vnode = vm._vnode;\n      }\n    } finally {\n      currentRenderingInstance = null;\n    }\n    // if the returned array contains only a single node, allow it\n    if (Array.isArray(vnode) && vnode.length === 1) {\n      vnode = vnode[0];\n    }\n    // return empty vnode in case the render function errored out\n    if (!(vnode instanceof VNode)) {\n      if (false) {}\n      vnode = createEmptyVNode();\n    }\n    // set parent\n    vnode.parent = _parentVnode;\n    return vnode\n  };\n}\n\n/*  */\n\nfunction ensureCtor (comp, base) {\n  if (\n    comp.__esModule ||\n    (hasSymbol && comp[Symbol.toStringTag] === 'Module')\n  ) {\n    comp = comp.default;\n  }\n  return isObject(comp)\n    ? base.extend(comp)\n    : comp\n}\n\nfunction createAsyncPlaceholder (\n  factory,\n  data,\n  context,\n  children,\n  tag\n) {\n  var node = createEmptyVNode();\n  node.asyncFactory = factory;\n  node.asyncMeta = { data: data, context: context, children: children, tag: tag };\n  return node\n}\n\nfunction resolveAsyncComponent (\n  factory,\n  baseCtor\n) {\n  if (isTrue(factory.error) && isDef(factory.errorComp)) {\n    return factory.errorComp\n  }\n\n  if (isDef(factory.resolved)) {\n    return factory.resolved\n  }\n\n  var owner = currentRenderingInstance;\n  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {\n    // already pending\n    factory.owners.push(owner);\n  }\n\n  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {\n    return factory.loadingComp\n  }\n\n  if (owner && !isDef(factory.owners)) {\n    var owners = factory.owners = [owner];\n    var sync = true;\n    var timerLoading = null;\n    var timerTimeout = null\n\n    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });\n\n    var forceRender = function (renderCompleted) {\n      for (var i = 0, l = owners.length; i < l; i++) {\n        (owners[i]).$forceUpdate();\n      }\n\n      if (renderCompleted) {\n        owners.length = 0;\n        if (timerLoading !== null) {\n          clearTimeout(timerLoading);\n          timerLoading = null;\n        }\n        if (timerTimeout !== null) {\n          clearTimeout(timerTimeout);\n          timerTimeout = null;\n        }\n      }\n    };\n\n    var resolve = once(function (res) {\n      // cache resolved\n      factory.resolved = ensureCtor(res, baseCtor);\n      // invoke callbacks only if this is not a synchronous resolve\n      // (async resolves are shimmed as synchronous during SSR)\n      if (!sync) {\n        forceRender(true);\n      } else {\n        owners.length = 0;\n      }\n    });\n\n    var reject = once(function (reason) {\n       false && false;\n      if (isDef(factory.errorComp)) {\n        factory.error = true;\n        forceRender(true);\n      }\n    });\n\n    var res = factory(resolve, reject);\n\n    if (isObject(res)) {\n      if (isPromise(res)) {\n        // () => Promise\n        if (isUndef(factory.resolved)) {\n          res.then(resolve, reject);\n        }\n      } else if (isPromise(res.component)) {\n        res.component.then(resolve, reject);\n\n        if (isDef(res.error)) {\n          factory.errorComp = ensureCtor(res.error, baseCtor);\n        }\n\n        if (isDef(res.loading)) {\n          factory.loadingComp = ensureCtor(res.loading, baseCtor);\n          if (res.delay === 0) {\n            factory.loading = true;\n          } else {\n            timerLoading = setTimeout(function () {\n              timerLoading = null;\n              if (isUndef(factory.resolved) && isUndef(factory.error)) {\n                factory.loading = true;\n                forceRender(false);\n              }\n            }, res.delay || 200);\n          }\n        }\n\n        if (isDef(res.timeout)) {\n          timerTimeout = setTimeout(function () {\n            timerTimeout = null;\n            if (isUndef(factory.resolved)) {\n              reject(\n                 false\n                  ? (undefined)\n                  : null\n              );\n            }\n          }, res.timeout);\n        }\n      }\n    }\n\n    sync = false;\n    // return in case resolved synchronously\n    return factory.loading\n      ? factory.loadingComp\n      : factory.resolved\n  }\n}\n\n/*  */\n\nfunction isAsyncPlaceholder (node) {\n  return node.isComment && node.asyncFactory\n}\n\n/*  */\n\nfunction getFirstComponentChild (children) {\n  if (Array.isArray(children)) {\n    for (var i = 0; i < children.length; i++) {\n      var c = children[i];\n      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {\n        return c\n      }\n    }\n  }\n}\n\n/*  */\n\n/*  */\n\nfunction initEvents (vm) {\n  vm._events = Object.create(null);\n  vm._hasHookEvent = false;\n  // init parent attached events\n  var listeners = vm.$options._parentListeners;\n  if (listeners) {\n    updateComponentListeners(vm, listeners);\n  }\n}\n\nvar target;\n\nfunction add (event, fn) {\n  target.$on(event, fn);\n}\n\nfunction remove$1 (event, fn) {\n  target.$off(event, fn);\n}\n\nfunction createOnceHandler (event, fn) {\n  var _target = target;\n  return function onceHandler () {\n    var res = fn.apply(null, arguments);\n    if (res !== null) {\n      _target.$off(event, onceHandler);\n    }\n  }\n}\n\nfunction updateComponentListeners (\n  vm,\n  listeners,\n  oldListeners\n) {\n  target = vm;\n  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);\n  target = undefined;\n}\n\nfunction eventsMixin (Vue) {\n  var hookRE = /^hook:/;\n  Vue.prototype.$on = function (event, fn) {\n    var vm = this;\n    if (Array.isArray(event)) {\n      for (var i = 0, l = event.length; i < l; i++) {\n        vm.$on(event[i], fn);\n      }\n    } else {\n      (vm._events[event] || (vm._events[event] = [])).push(fn);\n      // optimize hook:event cost by using a boolean flag marked at registration\n      // instead of a hash lookup\n      if (hookRE.test(event)) {\n        vm._hasHookEvent = true;\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$once = function (event, fn) {\n    var vm = this;\n    function on () {\n      vm.$off(event, on);\n      fn.apply(vm, arguments);\n    }\n    on.fn = fn;\n    vm.$on(event, on);\n    return vm\n  };\n\n  Vue.prototype.$off = function (event, fn) {\n    var vm = this;\n    // all\n    if (!arguments.length) {\n      vm._events = Object.create(null);\n      return vm\n    }\n    // array of events\n    if (Array.isArray(event)) {\n      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {\n        vm.$off(event[i$1], fn);\n      }\n      return vm\n    }\n    // specific event\n    var cbs = vm._events[event];\n    if (!cbs) {\n      return vm\n    }\n    if (!fn) {\n      vm._events[event] = null;\n      return vm\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        cbs.splice(i, 1);\n        break\n      }\n    }\n    return vm\n  };\n\n  Vue.prototype.$emit = function (event) {\n    var vm = this;\n    if (false) { var lowerCaseEvent; }\n    var cbs = vm._events[event];\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      var args = toArray(arguments, 1);\n      var info = \"event handler for \\\"\" + event + \"\\\"\";\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        invokeWithErrorHandling(cbs[i], vm, args, vm, info);\n      }\n    }\n    return vm\n  };\n}\n\n/*  */\n\nvar activeInstance = null;\nvar isUpdatingChildComponent = false;\n\nfunction setActiveInstance(vm) {\n  var prevActiveInstance = activeInstance;\n  activeInstance = vm;\n  return function () {\n    activeInstance = prevActiveInstance;\n  }\n}\n\nfunction initLifecycle (vm) {\n  var options = vm.$options;\n\n  // locate first non-abstract parent\n  var parent = options.parent;\n  if (parent && !options.abstract) {\n    while (parent.$options.abstract && parent.$parent) {\n      parent = parent.$parent;\n    }\n    parent.$children.push(vm);\n  }\n\n  vm.$parent = parent;\n  vm.$root = parent ? parent.$root : vm;\n\n  vm.$children = [];\n  vm.$refs = {};\n\n  vm._watcher = null;\n  vm._inactive = null;\n  vm._directInactive = false;\n  vm._isMounted = false;\n  vm._isDestroyed = false;\n  vm._isBeingDestroyed = false;\n}\n\nfunction lifecycleMixin (Vue) {\n  Vue.prototype._update = function (vnode, hydrating) {\n    var vm = this;\n    var prevEl = vm.$el;\n    var prevVnode = vm._vnode;\n    var restoreActiveInstance = setActiveInstance(vm);\n    vm._vnode = vnode;\n    // Vue.prototype.__patch__ is injected in entry points\n    // based on the rendering backend used.\n    if (!prevVnode) {\n      // initial render\n      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);\n    } else {\n      // updates\n      vm.$el = vm.__patch__(prevVnode, vnode);\n    }\n    restoreActiveInstance();\n    // update __vue__ reference\n    if (prevEl) {\n      prevEl.__vue__ = null;\n    }\n    if (vm.$el) {\n      vm.$el.__vue__ = vm;\n    }\n    // if parent is an HOC, update its $el as well\n    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {\n      vm.$parent.$el = vm.$el;\n    }\n    // updated hook is called by the scheduler to ensure that children are\n    // updated in a parent's updated hook.\n  };\n\n  Vue.prototype.$forceUpdate = function () {\n    var vm = this;\n    if (vm._watcher) {\n      vm._watcher.update();\n    }\n  };\n\n  Vue.prototype.$destroy = function () {\n    var vm = this;\n    if (vm._isBeingDestroyed) {\n      return\n    }\n    callHook(vm, 'beforeDestroy');\n    vm._isBeingDestroyed = true;\n    // remove self from parent\n    var parent = vm.$parent;\n    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {\n      remove(parent.$children, vm);\n    }\n    // teardown watchers\n    if (vm._watcher) {\n      vm._watcher.teardown();\n    }\n    var i = vm._watchers.length;\n    while (i--) {\n      vm._watchers[i].teardown();\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (vm._data.__ob__) {\n      vm._data.__ob__.vmCount--;\n    }\n    // call the last hook...\n    vm._isDestroyed = true;\n    // invoke destroy hooks on current rendered tree\n    vm.__patch__(vm._vnode, null);\n    // fire destroyed hook\n    callHook(vm, 'destroyed');\n    // turn off all instance listeners.\n    vm.$off();\n    // remove __vue__ reference\n    if (vm.$el) {\n      vm.$el.__vue__ = null;\n    }\n    // release circular reference (#6759)\n    if (vm.$vnode) {\n      vm.$vnode.parent = null;\n    }\n  };\n}\n\nfunction mountComponent (\n  vm,\n  el,\n  hydrating\n) {\n  vm.$el = el;\n  if (!vm.$options.render) {\n    vm.$options.render = createEmptyVNode;\n    if (false) {}\n  }\n  callHook(vm, 'beforeMount');\n\n  var updateComponent;\n  /* istanbul ignore if */\n  if (false) {} else {\n    updateComponent = function () {\n      vm._update(vm._render(), hydrating);\n    };\n  }\n\n  // we set this to vm._watcher inside the watcher's constructor\n  // since the watcher's initial patch may call $forceUpdate (e.g. inside child\n  // component's mounted hook), which relies on vm._watcher being already defined\n  new Watcher(vm, updateComponent, noop, {\n    before: function before () {\n      if (vm._isMounted && !vm._isDestroyed) {\n        callHook(vm, 'beforeUpdate');\n      }\n    }\n  }, true /* isRenderWatcher */);\n  hydrating = false;\n\n  // manually mounted instance, call mounted on self\n  // mounted is called for render-created child components in its inserted hook\n  if (vm.$vnode == null) {\n    vm._isMounted = true;\n    callHook(vm, 'mounted');\n  }\n  return vm\n}\n\nfunction updateChildComponent (\n  vm,\n  propsData,\n  listeners,\n  parentVnode,\n  renderChildren\n) {\n  if (false) {}\n\n  // determine whether component has slot children\n  // we need to do this before overwriting $options._renderChildren.\n\n  // check if there are dynamic scopedSlots (hand-written or compiled but with\n  // dynamic slot names). Static scoped slots compiled from template has the\n  // \"$stable\" marker.\n  var newScopedSlots = parentVnode.data.scopedSlots;\n  var oldScopedSlots = vm.$scopedSlots;\n  var hasDynamicScopedSlot = !!(\n    (newScopedSlots && !newScopedSlots.$stable) ||\n    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||\n    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)\n  );\n\n  // Any static slot children from the parent may have changed during parent's\n  // update. Dynamic scoped slots may also have changed. In such cases, a forced\n  // update is necessary to ensure correctness.\n  var needsForceUpdate = !!(\n    renderChildren ||               // has new static slots\n    vm.$options._renderChildren ||  // has old static slots\n    hasDynamicScopedSlot\n  );\n\n  vm.$options._parentVnode = parentVnode;\n  vm.$vnode = parentVnode; // update vm's placeholder node without re-render\n\n  if (vm._vnode) { // update child tree's parent\n    vm._vnode.parent = parentVnode;\n  }\n  vm.$options._renderChildren = renderChildren;\n\n  // update $attrs and $listeners hash\n  // these are also reactive so they may trigger child update if the child\n  // used them during render\n  vm.$attrs = parentVnode.data.attrs || emptyObject;\n  vm.$listeners = listeners || emptyObject;\n\n  // update props\n  if (propsData && vm.$options.props) {\n    toggleObserving(false);\n    var props = vm._props;\n    var propKeys = vm.$options._propKeys || [];\n    for (var i = 0; i < propKeys.length; i++) {\n      var key = propKeys[i];\n      var propOptions = vm.$options.props; // wtf flow?\n      props[key] = validateProp(key, propOptions, propsData, vm);\n    }\n    toggleObserving(true);\n    // keep a copy of raw propsData\n    vm.$options.propsData = propsData;\n  }\n\n  // update listeners\n  listeners = listeners || emptyObject;\n  var oldListeners = vm.$options._parentListeners;\n  vm.$options._parentListeners = listeners;\n  updateComponentListeners(vm, listeners, oldListeners);\n\n  // resolve slots + force update if has children\n  if (needsForceUpdate) {\n    vm.$slots = resolveSlots(renderChildren, parentVnode.context);\n    vm.$forceUpdate();\n  }\n\n  if (false) {}\n}\n\nfunction isInInactiveTree (vm) {\n  while (vm && (vm = vm.$parent)) {\n    if (vm._inactive) { return true }\n  }\n  return false\n}\n\nfunction activateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = false;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  } else if (vm._directInactive) {\n    return\n  }\n  if (vm._inactive || vm._inactive === null) {\n    vm._inactive = false;\n    for (var i = 0; i < vm.$children.length; i++) {\n      activateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'activated');\n  }\n}\n\nfunction deactivateChildComponent (vm, direct) {\n  if (direct) {\n    vm._directInactive = true;\n    if (isInInactiveTree(vm)) {\n      return\n    }\n  }\n  if (!vm._inactive) {\n    vm._inactive = true;\n    for (var i = 0; i < vm.$children.length; i++) {\n      deactivateChildComponent(vm.$children[i]);\n    }\n    callHook(vm, 'deactivated');\n  }\n}\n\nfunction callHook (vm, hook) {\n  // #7573 disable dep collection when invoking lifecycle hooks\n  pushTarget();\n  var handlers = vm.$options[hook];\n  var info = hook + \" hook\";\n  if (handlers) {\n    for (var i = 0, j = handlers.length; i < j; i++) {\n      invokeWithErrorHandling(handlers[i], vm, null, vm, info);\n    }\n  }\n  if (vm._hasHookEvent) {\n    vm.$emit('hook:' + hook);\n  }\n  popTarget();\n}\n\n/*  */\n\nvar MAX_UPDATE_COUNT = 100;\n\nvar queue = [];\nvar activatedChildren = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\nvar flushing = false;\nvar index = 0;\n\n/**\n * Reset the scheduler's state.\n */\nfunction resetSchedulerState () {\n  index = queue.length = activatedChildren.length = 0;\n  has = {};\n  if (false) {}\n  waiting = flushing = false;\n}\n\n// Async edge case #6566 requires saving the timestamp when event listeners are\n// attached. However, calling performance.now() has a perf overhead especially\n// if the page has thousands of event listeners. Instead, we take a timestamp\n// every time the scheduler flushes and use that for all event listeners\n// attached during that flush.\nvar currentFlushTimestamp = 0;\n\n// Async edge case fix requires storing an event listener's attach timestamp.\nvar getNow = Date.now;\n\n// Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n// All IE versions use low-res event timestamps, and have problematic clock\n// implementations (#9632)\nif (inBrowser && !isIE) {\n  var performance = window.performance;\n  if (\n    performance &&\n    typeof performance.now === 'function' &&\n    getNow() > document.createEvent('Event').timeStamp\n  ) {\n    // if the event timestamp, although evaluated AFTER the Date.now(), is\n    // smaller than it, it means the event is using a hi-res timestamp,\n    // and we need to use the hi-res version for event listener timestamps as\n    // well.\n    getNow = function () { return performance.now(); };\n  }\n}\n\n/**\n * Flush both queues and run the watchers.\n */\nfunction flushSchedulerQueue () {\n  currentFlushTimestamp = getNow();\n  flushing = true;\n  var watcher, id;\n\n  // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child)\n  // 2. A component's user watchers are run before its render watcher (because\n  //    user watchers are created before the render watcher)\n  // 3. If a component is destroyed during a parent component's watcher run,\n  //    its watchers can be skipped.\n  queue.sort(function (a, b) { return a.id - b.id; });\n\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (index = 0; index < queue.length; index++) {\n    watcher = queue[index];\n    if (watcher.before) {\n      watcher.before();\n    }\n    id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (false) {}\n  }\n\n  // keep copies of post queues before resetting state\n  var activatedQueue = activatedChildren.slice();\n  var updatedQueue = queue.slice();\n\n  resetSchedulerState();\n\n  // call component updated and activated hooks\n  callActivatedHooks(activatedQueue);\n  callUpdatedHooks(updatedQueue);\n\n  // devtool hook\n  /* istanbul ignore if */\n  if (devtools && config.devtools) {\n    devtools.emit('flush');\n  }\n}\n\nfunction callUpdatedHooks (queue) {\n  var i = queue.length;\n  while (i--) {\n    var watcher = queue[i];\n    var vm = watcher.vm;\n    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {\n      callHook(vm, 'updated');\n    }\n  }\n}\n\n/**\n * Queue a kept-alive component that was activated during patch.\n * The queue will be processed after the entire tree has been patched.\n */\nfunction queueActivatedComponent (vm) {\n  // setting _inactive to false here so that a render function can\n  // rely on checking whether it's in an inactive tree (e.g. router-view)\n  vm._inactive = false;\n  activatedChildren.push(vm);\n}\n\nfunction callActivatedHooks (queue) {\n  for (var i = 0; i < queue.length; i++) {\n    queue[i]._inactive = true;\n    activateChildComponent(queue[i], true /* true */);\n  }\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n */\nfunction queueWatcher (watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    has[id] = true;\n    if (!flushing) {\n      queue.push(watcher);\n    } else {\n      // if already flushing, splice the watcher based on its id\n      // if already past its id, it will be run next immediately.\n      var i = queue.length - 1;\n      while (i > index && queue[i].id > watcher.id) {\n        i--;\n      }\n      queue.splice(i + 1, 0, watcher);\n    }\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n\n      if (false) {}\n      nextTick(flushSchedulerQueue);\n    }\n  }\n}\n\n/*  */\n\n\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n */\nvar Watcher = function Watcher (\n  vm,\n  expOrFn,\n  cb,\n  options,\n  isRenderWatcher\n) {\n  this.vm = vm;\n  if (isRenderWatcher) {\n    vm._watcher = this;\n  }\n  vm._watchers.push(this);\n  // options\n  if (options) {\n    this.deep = !!options.deep;\n    this.user = !!options.user;\n    this.lazy = !!options.lazy;\n    this.sync = !!options.sync;\n    this.before = options.before;\n  } else {\n    this.deep = this.user = this.lazy = this.sync = false;\n  }\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.expression =  false\n    ? undefined\n    : '';\n  // parse expression for getter\n  if (typeof expOrFn === 'function') {\n    this.getter = expOrFn;\n  } else {\n    this.getter = parsePath(expOrFn);\n    if (!this.getter) {\n      this.getter = noop;\n       false && false;\n    }\n  }\n  this.value = this.lazy\n    ? undefined\n    : this.get();\n};\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\nWatcher.prototype.get = function get () {\n  pushTarget(this);\n  var value;\n  var vm = this.vm;\n  try {\n    value = this.getter.call(vm, vm);\n  } catch (e) {\n    if (this.user) {\n      handleError(e, vm, (\"getter for watcher \\\"\" + (this.expression) + \"\\\"\"));\n    } else {\n      throw e\n    }\n  } finally {\n    // \"touch\" every property so they are all tracked as\n    // dependencies for deep watching\n    if (this.deep) {\n      traverse(value);\n    }\n    popTarget();\n    this.cleanupDeps();\n  }\n  return value\n};\n\n/**\n * Add a dependency to this directive.\n */\nWatcher.prototype.addDep = function addDep (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\nWatcher.prototype.cleanupDeps = function cleanupDeps () {\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n */\nWatcher.prototype.update = function update () {\n  /* istanbul ignore else */\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync) {\n    this.run();\n  } else {\n    queueWatcher(this);\n  }\n};\n\n/**\n * Scheduler job interface.\n * Will be called by the scheduler.\n */\nWatcher.prototype.run = function run () {\n  if (this.active) {\n    var value = this.get();\n    if (\n      value !== this.value ||\n      // Deep watchers and watchers on Object/Arrays should fire even\n      // when the value is the same, because the value may\n      // have mutated.\n      isObject(value) ||\n      this.deep\n    ) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      if (this.user) {\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          handleError(e, this.vm, (\"callback for watcher \\\"\" + (this.expression) + \"\\\"\"));\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\nWatcher.prototype.evaluate = function evaluate () {\n  this.value = this.get();\n  this.dirty = false;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\nWatcher.prototype.depend = function depend () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subscriber list.\n */\nWatcher.prototype.teardown = function teardown () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed.\n    if (!this.vm._isBeingDestroyed) {\n      remove(this.vm._watchers, this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n  }\n};\n\n/*  */\n\nvar sharedPropertyDefinition = {\n  enumerable: true,\n  configurable: true,\n  get: noop,\n  set: noop\n};\n\nfunction proxy (target, sourceKey, key) {\n  sharedPropertyDefinition.get = function proxyGetter () {\n    return this[sourceKey][key]\n  };\n  sharedPropertyDefinition.set = function proxySetter (val) {\n    this[sourceKey][key] = val;\n  };\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction initState (vm) {\n  vm._watchers = [];\n  var opts = vm.$options;\n  if (opts.props) { initProps(vm, opts.props); }\n  if (opts.methods) { initMethods(vm, opts.methods); }\n  if (opts.data) {\n    initData(vm);\n  } else {\n    observe(vm._data = {}, true /* asRootData */);\n  }\n  if (opts.computed) { initComputed(vm, opts.computed); }\n  if (opts.watch && opts.watch !== nativeWatch) {\n    initWatch(vm, opts.watch);\n  }\n}\n\nfunction initProps (vm, propsOptions) {\n  var propsData = vm.$options.propsData || {};\n  var props = vm._props = {};\n  // cache prop keys so that future props updates can iterate using Array\n  // instead of dynamic object key enumeration.\n  var keys = vm.$options._propKeys = [];\n  var isRoot = !vm.$parent;\n  // root instance props should be converted\n  if (!isRoot) {\n    toggleObserving(false);\n  }\n  var loop = function ( key ) {\n    keys.push(key);\n    var value = validateProp(key, propsOptions, propsData, vm);\n    /* istanbul ignore else */\n    if (false) { var hyphenatedKey; } else {\n      defineReactive$$1(props, key, value);\n    }\n    // static props are already proxied on the component's prototype\n    // during Vue.extend(). We only need to proxy props defined at\n    // instantiation here.\n    if (!(key in vm)) {\n      proxy(vm, \"_props\", key);\n    }\n  };\n\n  for (var key in propsOptions) loop( key );\n  toggleObserving(true);\n}\n\nfunction initData (vm) {\n  var data = vm.$options.data;\n  data = vm._data = typeof data === 'function'\n    ? getData(data, vm)\n    : data || {};\n  if (!isPlainObject(data)) {\n    data = {};\n     false && false;\n  }\n  // proxy data on instance\n  var keys = Object.keys(data);\n  var props = vm.$options.props;\n  var methods = vm.$options.methods;\n  var i = keys.length;\n  while (i--) {\n    var key = keys[i];\n    if (false) {}\n    if (props && hasOwn(props, key)) {\n       false && false;\n    } else if (!isReserved(key)) {\n      proxy(vm, \"_data\", key);\n    }\n  }\n  // observe data\n  observe(data, true /* asRootData */);\n}\n\nfunction getData (data, vm) {\n  // #7573 disable dep collection when invoking data getters\n  pushTarget();\n  try {\n    return data.call(vm, vm)\n  } catch (e) {\n    handleError(e, vm, \"data()\");\n    return {}\n  } finally {\n    popTarget();\n  }\n}\n\nvar computedWatcherOptions = { lazy: true };\n\nfunction initComputed (vm, computed) {\n  // $flow-disable-line\n  var watchers = vm._computedWatchers = Object.create(null);\n  // computed properties are just getters during SSR\n  var isSSR = isServerRendering();\n\n  for (var key in computed) {\n    var userDef = computed[key];\n    var getter = typeof userDef === 'function' ? userDef : userDef.get;\n    if (false) {}\n\n    if (!isSSR) {\n      // create internal watcher for the computed property.\n      watchers[key] = new Watcher(\n        vm,\n        getter || noop,\n        noop,\n        computedWatcherOptions\n      );\n    }\n\n    // component-defined computed properties are already defined on the\n    // component prototype. We only need to define computed properties defined\n    // at instantiation here.\n    if (!(key in vm)) {\n      defineComputed(vm, key, userDef);\n    } else if (false) {}\n  }\n}\n\nfunction defineComputed (\n  target,\n  key,\n  userDef\n) {\n  var shouldCache = !isServerRendering();\n  if (typeof userDef === 'function') {\n    sharedPropertyDefinition.get = shouldCache\n      ? createComputedGetter(key)\n      : createGetterInvoker(userDef);\n    sharedPropertyDefinition.set = noop;\n  } else {\n    sharedPropertyDefinition.get = userDef.get\n      ? shouldCache && userDef.cache !== false\n        ? createComputedGetter(key)\n        : createGetterInvoker(userDef.get)\n      : noop;\n    sharedPropertyDefinition.set = userDef.set || noop;\n  }\n  if (false) {}\n  Object.defineProperty(target, key, sharedPropertyDefinition);\n}\n\nfunction createComputedGetter (key) {\n  return function computedGetter () {\n    var watcher = this._computedWatchers && this._computedWatchers[key];\n    if (watcher) {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value\n    }\n  }\n}\n\nfunction createGetterInvoker(fn) {\n  return function computedGetter () {\n    return fn.call(this, this)\n  }\n}\n\nfunction initMethods (vm, methods) {\n  var props = vm.$options.props;\n  for (var key in methods) {\n    if (false) {}\n    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);\n  }\n}\n\nfunction initWatch (vm, watch) {\n  for (var key in watch) {\n    var handler = watch[key];\n    if (Array.isArray(handler)) {\n      for (var i = 0; i < handler.length; i++) {\n        createWatcher(vm, key, handler[i]);\n      }\n    } else {\n      createWatcher(vm, key, handler);\n    }\n  }\n}\n\nfunction createWatcher (\n  vm,\n  expOrFn,\n  handler,\n  options\n) {\n  if (isPlainObject(handler)) {\n    options = handler;\n    handler = handler.handler;\n  }\n  if (typeof handler === 'string') {\n    handler = vm[handler];\n  }\n  return vm.$watch(expOrFn, handler, options)\n}\n\nfunction stateMixin (Vue) {\n  // flow somehow has problems with directly declared definition object\n  // when using Object.defineProperty, so we have to procedurally build up\n  // the object here.\n  var dataDef = {};\n  dataDef.get = function () { return this._data };\n  var propsDef = {};\n  propsDef.get = function () { return this._props };\n  if (false) {}\n  Object.defineProperty(Vue.prototype, '$data', dataDef);\n  Object.defineProperty(Vue.prototype, '$props', propsDef);\n\n  Vue.prototype.$set = set;\n  Vue.prototype.$delete = del;\n\n  Vue.prototype.$watch = function (\n    expOrFn,\n    cb,\n    options\n  ) {\n    var vm = this;\n    if (isPlainObject(cb)) {\n      return createWatcher(vm, expOrFn, cb, options)\n    }\n    options = options || {};\n    options.user = true;\n    var watcher = new Watcher(vm, expOrFn, cb, options);\n    if (options.immediate) {\n      try {\n        cb.call(vm, watcher.value);\n      } catch (error) {\n        handleError(error, vm, (\"callback for immediate watcher \\\"\" + (watcher.expression) + \"\\\"\"));\n      }\n    }\n    return function unwatchFn () {\n      watcher.teardown();\n    }\n  };\n}\n\n/*  */\n\nvar uid$3 = 0;\n\nfunction initMixin (Vue) {\n  Vue.prototype._init = function (options) {\n    var vm = this;\n    // a uid\n    vm._uid = uid$3++;\n\n    var startTag, endTag;\n    /* istanbul ignore if */\n    if (false) {}\n\n    // a flag to avoid this being observed\n    vm._isVue = true;\n    // merge options\n    if (options && options._isComponent) {\n      // optimize internal component instantiation\n      // since dynamic options merging is pretty slow, and none of the\n      // internal component options needs special treatment.\n      initInternalComponent(vm, options);\n    } else {\n      vm.$options = mergeOptions(\n        resolveConstructorOptions(vm.constructor),\n        options || {},\n        vm\n      );\n    }\n    /* istanbul ignore else */\n    if (false) {} else {\n      vm._renderProxy = vm;\n    }\n    // expose real self\n    vm._self = vm;\n    initLifecycle(vm);\n    initEvents(vm);\n    initRender(vm);\n    callHook(vm, 'beforeCreate');\n    initInjections(vm); // resolve injections before data/props\n    initState(vm);\n    initProvide(vm); // resolve provide after data/props\n    callHook(vm, 'created');\n\n    /* istanbul ignore if */\n    if (false) {}\n\n    if (vm.$options.el) {\n      vm.$mount(vm.$options.el);\n    }\n  };\n}\n\nfunction initInternalComponent (vm, options) {\n  var opts = vm.$options = Object.create(vm.constructor.options);\n  // doing this because it's faster than dynamic enumeration.\n  var parentVnode = options._parentVnode;\n  opts.parent = options.parent;\n  opts._parentVnode = parentVnode;\n\n  var vnodeComponentOptions = parentVnode.componentOptions;\n  opts.propsData = vnodeComponentOptions.propsData;\n  opts._parentListeners = vnodeComponentOptions.listeners;\n  opts._renderChildren = vnodeComponentOptions.children;\n  opts._componentTag = vnodeComponentOptions.tag;\n\n  if (options.render) {\n    opts.render = options.render;\n    opts.staticRenderFns = options.staticRenderFns;\n  }\n}\n\nfunction resolveConstructorOptions (Ctor) {\n  var options = Ctor.options;\n  if (Ctor.super) {\n    var superOptions = resolveConstructorOptions(Ctor.super);\n    var cachedSuperOptions = Ctor.superOptions;\n    if (superOptions !== cachedSuperOptions) {\n      // super option changed,\n      // need to resolve new options.\n      Ctor.superOptions = superOptions;\n      // check if there are any late-modified/attached options (#4976)\n      var modifiedOptions = resolveModifiedOptions(Ctor);\n      // update base extend options\n      if (modifiedOptions) {\n        extend(Ctor.extendOptions, modifiedOptions);\n      }\n      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);\n      if (options.name) {\n        options.components[options.name] = Ctor;\n      }\n    }\n  }\n  return options\n}\n\nfunction resolveModifiedOptions (Ctor) {\n  var modified;\n  var latest = Ctor.options;\n  var sealed = Ctor.sealedOptions;\n  for (var key in latest) {\n    if (latest[key] !== sealed[key]) {\n      if (!modified) { modified = {}; }\n      modified[key] = latest[key];\n    }\n  }\n  return modified\n}\n\nfunction Vue (options) {\n  if (false\n  ) {}\n  this._init(options);\n}\n\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nrenderMixin(Vue);\n\n/*  */\n\nfunction initUse (Vue) {\n  Vue.use = function (plugin) {\n    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));\n    if (installedPlugins.indexOf(plugin) > -1) {\n      return this\n    }\n\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else if (typeof plugin === 'function') {\n      plugin.apply(null, args);\n    }\n    installedPlugins.push(plugin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initMixin$1 (Vue) {\n  Vue.mixin = function (mixin) {\n    this.options = mergeOptions(this.options, mixin);\n    return this\n  };\n}\n\n/*  */\n\nfunction initExtend (Vue) {\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   */\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var SuperId = Super.cid;\n    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});\n    if (cachedCtors[SuperId]) {\n      return cachedCtors[SuperId]\n    }\n\n    var name = extendOptions.name || Super.options.name;\n    if (false) {}\n\n    var Sub = function VueComponent (options) {\n      this._init(options);\n    };\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(\n      Super.options,\n      extendOptions\n    );\n    Sub['super'] = Super;\n\n    // For props and computed properties, we define the proxy getters on\n    // the Vue instances at extension time, on the extended prototype. This\n    // avoids Object.defineProperty calls for each instance created.\n    if (Sub.options.props) {\n      initProps$1(Sub);\n    }\n    if (Sub.options.computed) {\n      initComputed$1(Sub);\n    }\n\n    // allow further extension/mixin/plugin usage\n    Sub.extend = Super.extend;\n    Sub.mixin = Super.mixin;\n    Sub.use = Super.use;\n\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    ASSET_TYPES.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n\n    // keep a reference to the super options at extension time.\n    // later at instantiation we can check if Super's options have\n    // been updated.\n    Sub.superOptions = Super.options;\n    Sub.extendOptions = extendOptions;\n    Sub.sealedOptions = extend({}, Sub.options);\n\n    // cache constructor\n    cachedCtors[SuperId] = Sub;\n    return Sub\n  };\n}\n\nfunction initProps$1 (Comp) {\n  var props = Comp.options.props;\n  for (var key in props) {\n    proxy(Comp.prototype, \"_props\", key);\n  }\n}\n\nfunction initComputed$1 (Comp) {\n  var computed = Comp.options.computed;\n  for (var key in computed) {\n    defineComputed(Comp.prototype, key, computed[key]);\n  }\n}\n\n/*  */\n\nfunction initAssetRegisters (Vue) {\n  /**\n   * Create asset registration methods.\n   */\n  ASSET_TYPES.forEach(function (type) {\n    Vue[type] = function (\n      id,\n      definition\n    ) {\n      if (!definition) {\n        return this.options[type + 's'][id]\n      } else {\n        /* istanbul ignore if */\n        if (false) {}\n        if (type === 'component' && isPlainObject(definition)) {\n          definition.name = definition.name || id;\n          definition = this.options._base.extend(definition);\n        }\n        if (type === 'directive' && typeof definition === 'function') {\n          definition = { bind: definition, update: definition };\n        }\n        this.options[type + 's'][id] = definition;\n        return definition\n      }\n    };\n  });\n}\n\n/*  */\n\n\n\nfunction getComponentName (opts) {\n  return opts && (opts.Ctor.options.name || opts.tag)\n}\n\nfunction matches (pattern, name) {\n  if (Array.isArray(pattern)) {\n    return pattern.indexOf(name) > -1\n  } else if (typeof pattern === 'string') {\n    return pattern.split(',').indexOf(name) > -1\n  } else if (isRegExp(pattern)) {\n    return pattern.test(name)\n  }\n  /* istanbul ignore next */\n  return false\n}\n\nfunction pruneCache (keepAliveInstance, filter) {\n  var cache = keepAliveInstance.cache;\n  var keys = keepAliveInstance.keys;\n  var _vnode = keepAliveInstance._vnode;\n  for (var key in cache) {\n    var cachedNode = cache[key];\n    if (cachedNode) {\n      var name = getComponentName(cachedNode.componentOptions);\n      if (name && !filter(name)) {\n        pruneCacheEntry(cache, key, keys, _vnode);\n      }\n    }\n  }\n}\n\nfunction pruneCacheEntry (\n  cache,\n  key,\n  keys,\n  current\n) {\n  var cached$$1 = cache[key];\n  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {\n    cached$$1.componentInstance.$destroy();\n  }\n  cache[key] = null;\n  remove(keys, key);\n}\n\nvar patternTypes = [String, RegExp, Array];\n\nvar KeepAlive = {\n  name: 'keep-alive',\n  abstract: true,\n\n  props: {\n    include: patternTypes,\n    exclude: patternTypes,\n    max: [String, Number]\n  },\n\n  created: function created () {\n    this.cache = Object.create(null);\n    this.keys = [];\n  },\n\n  destroyed: function destroyed () {\n    for (var key in this.cache) {\n      pruneCacheEntry(this.cache, key, this.keys);\n    }\n  },\n\n  mounted: function mounted () {\n    var this$1 = this;\n\n    this.$watch('include', function (val) {\n      pruneCache(this$1, function (name) { return matches(val, name); });\n    });\n    this.$watch('exclude', function (val) {\n      pruneCache(this$1, function (name) { return !matches(val, name); });\n    });\n  },\n\n  render: function render () {\n    var slot = this.$slots.default;\n    var vnode = getFirstComponentChild(slot);\n    var componentOptions = vnode && vnode.componentOptions;\n    if (componentOptions) {\n      // check pattern\n      var name = getComponentName(componentOptions);\n      var ref = this;\n      var include = ref.include;\n      var exclude = ref.exclude;\n      if (\n        // not included\n        (include && (!name || !matches(include, name))) ||\n        // excluded\n        (exclude && name && matches(exclude, name))\n      ) {\n        return vnode\n      }\n\n      var ref$1 = this;\n      var cache = ref$1.cache;\n      var keys = ref$1.keys;\n      var key = vnode.key == null\n        // same constructor may get registered as different local components\n        // so cid alone is not enough (#3269)\n        ? componentOptions.Ctor.cid + (componentOptions.tag ? (\"::\" + (componentOptions.tag)) : '')\n        : vnode.key;\n      if (cache[key]) {\n        vnode.componentInstance = cache[key].componentInstance;\n        // make current key freshest\n        remove(keys, key);\n        keys.push(key);\n      } else {\n        cache[key] = vnode;\n        keys.push(key);\n        // prune oldest entry\n        if (this.max && keys.length > parseInt(this.max)) {\n          pruneCacheEntry(cache, keys[0], keys, this._vnode);\n        }\n      }\n\n      vnode.data.keepAlive = true;\n    }\n    return vnode || (slot && slot[0])\n  }\n};\n\nvar builtInComponents = {\n  KeepAlive: KeepAlive\n};\n\n/*  */\n\nfunction initGlobalAPI (Vue) {\n  // config\n  var configDef = {};\n  configDef.get = function () { return config; };\n  if (false) {}\n  Object.defineProperty(Vue, 'config', configDef);\n\n  // exposed util methods.\n  // NOTE: these are not considered part of the public API - avoid relying on\n  // them unless you are aware of the risk.\n  Vue.util = {\n    warn: warn,\n    extend: extend,\n    mergeOptions: mergeOptions,\n    defineReactive: defineReactive$$1\n  };\n\n  Vue.set = set;\n  Vue.delete = del;\n  Vue.nextTick = nextTick;\n\n  // 2.6 explicit observable API\n  Vue.observable = function (obj) {\n    observe(obj);\n    return obj\n  };\n\n  Vue.options = Object.create(null);\n  ASSET_TYPES.forEach(function (type) {\n    Vue.options[type + 's'] = Object.create(null);\n  });\n\n  // this is used to identify the \"base\" constructor to extend all plain-object\n  // components with in Weex's multi-instance scenarios.\n  Vue.options._base = Vue;\n\n  extend(Vue.options.components, builtInComponents);\n\n  initUse(Vue);\n  initMixin$1(Vue);\n  initExtend(Vue);\n  initAssetRegisters(Vue);\n}\n\ninitGlobalAPI(Vue);\n\nObject.defineProperty(Vue.prototype, '$isServer', {\n  get: isServerRendering\n});\n\nObject.defineProperty(Vue.prototype, '$ssrContext', {\n  get: function get () {\n    /* istanbul ignore next */\n    return this.$vnode && this.$vnode.ssrContext\n  }\n});\n\n// expose FunctionalRenderContext for ssr runtime helper installation\nObject.defineProperty(Vue, 'FunctionalRenderContext', {\n  value: FunctionalRenderContext\n});\n\nVue.version = '2.6.11';\n\n/*  */\n\n// these are reserved for web because they are directly compiled away\n// during template compilation\nvar isReservedAttr = makeMap('style,class');\n\n// attributes that should be using props for binding\nvar acceptValue = makeMap('input,textarea,option,select,progress');\nvar mustUseProp = function (tag, type, attr) {\n  return (\n    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||\n    (attr === 'selected' && tag === 'option') ||\n    (attr === 'checked' && tag === 'input') ||\n    (attr === 'muted' && tag === 'video')\n  )\n};\n\nvar isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');\n\nvar isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');\n\nvar convertEnumeratedValue = function (key, value) {\n  return isFalsyAttrValue(value) || value === 'false'\n    ? 'false'\n    // allow arbitrary string value for contenteditable\n    : key === 'contenteditable' && isValidContentEditableValue(value)\n      ? value\n      : 'true'\n};\n\nvar isBooleanAttr = makeMap(\n  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +\n  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +\n  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +\n  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +\n  'required,reversed,scoped,seamless,selected,sortable,translate,' +\n  'truespeed,typemustmatch,visible'\n);\n\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\n\nvar isXlink = function (name) {\n  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'\n};\n\nvar getXlinkProp = function (name) {\n  return isXlink(name) ? name.slice(6, name.length) : ''\n};\n\nvar isFalsyAttrValue = function (val) {\n  return val == null || val === false\n};\n\n/*  */\n\nfunction genClassForVnode (vnode) {\n  var data = vnode.data;\n  var parentNode = vnode;\n  var childNode = vnode;\n  while (isDef(childNode.componentInstance)) {\n    childNode = childNode.componentInstance._vnode;\n    if (childNode && childNode.data) {\n      data = mergeClassData(childNode.data, data);\n    }\n  }\n  while (isDef(parentNode = parentNode.parent)) {\n    if (parentNode && parentNode.data) {\n      data = mergeClassData(data, parentNode.data);\n    }\n  }\n  return renderClass(data.staticClass, data.class)\n}\n\nfunction mergeClassData (child, parent) {\n  return {\n    staticClass: concat(child.staticClass, parent.staticClass),\n    class: isDef(child.class)\n      ? [child.class, parent.class]\n      : parent.class\n  }\n}\n\nfunction renderClass (\n  staticClass,\n  dynamicClass\n) {\n  if (isDef(staticClass) || isDef(dynamicClass)) {\n    return concat(staticClass, stringifyClass(dynamicClass))\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction concat (a, b) {\n  return a ? b ? (a + ' ' + b) : a : (b || '')\n}\n\nfunction stringifyClass (value) {\n  if (Array.isArray(value)) {\n    return stringifyArray(value)\n  }\n  if (isObject(value)) {\n    return stringifyObject(value)\n  }\n  if (typeof value === 'string') {\n    return value\n  }\n  /* istanbul ignore next */\n  return ''\n}\n\nfunction stringifyArray (value) {\n  var res = '';\n  var stringified;\n  for (var i = 0, l = value.length; i < l; i++) {\n    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {\n      if (res) { res += ' '; }\n      res += stringified;\n    }\n  }\n  return res\n}\n\nfunction stringifyObject (value) {\n  var res = '';\n  for (var key in value) {\n    if (value[key]) {\n      if (res) { res += ' '; }\n      res += key;\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar namespaceMap = {\n  svg: 'http://www.w3.org/2000/svg',\n  math: 'http://www.w3.org/1998/Math/MathML'\n};\n\nvar isHTMLTag = makeMap(\n  'html,body,base,head,link,meta,style,title,' +\n  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +\n  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +\n  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +\n  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +\n  'embed,object,param,source,canvas,script,noscript,del,ins,' +\n  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +\n  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +\n  'output,progress,select,textarea,' +\n  'details,dialog,menu,menuitem,summary,' +\n  'content,element,shadow,template,blockquote,iframe,tfoot'\n);\n\n// this map is intentionally selective, only covering SVG elements that may\n// contain child elements.\nvar isSVG = makeMap(\n  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +\n  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +\n  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',\n  true\n);\n\nvar isPreTag = function (tag) { return tag === 'pre'; };\n\nvar isReservedTag = function (tag) {\n  return isHTMLTag(tag) || isSVG(tag)\n};\n\nfunction getTagNamespace (tag) {\n  if (isSVG(tag)) {\n    return 'svg'\n  }\n  // basic support for MathML\n  // note it doesn't support other MathML elements being component roots\n  if (tag === 'math') {\n    return 'math'\n  }\n}\n\nvar unknownElementCache = Object.create(null);\nfunction isUnknownElement (tag) {\n  /* istanbul ignore if */\n  if (!inBrowser) {\n    return true\n  }\n  if (isReservedTag(tag)) {\n    return false\n  }\n  tag = tag.toLowerCase();\n  /* istanbul ignore if */\n  if (unknownElementCache[tag] != null) {\n    return unknownElementCache[tag]\n  }\n  var el = document.createElement(tag);\n  if (tag.indexOf('-') > -1) {\n    // http://stackoverflow.com/a/28210364/1070244\n    return (unknownElementCache[tag] = (\n      el.constructor === window.HTMLUnknownElement ||\n      el.constructor === window.HTMLElement\n    ))\n  } else {\n    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))\n  }\n}\n\nvar isTextInputType = makeMap('text,number,password,search,email,tel,url');\n\n/*  */\n\n/**\n * Query an element selector if it's not an element already.\n */\nfunction query (el) {\n  if (typeof el === 'string') {\n    var selected = document.querySelector(el);\n    if (!selected) {\n       false && false;\n      return document.createElement('div')\n    }\n    return selected\n  } else {\n    return el\n  }\n}\n\n/*  */\n\nfunction createElement$1 (tagName, vnode) {\n  var elm = document.createElement(tagName);\n  if (tagName !== 'select') {\n    return elm\n  }\n  // false or null will remove the attribute but undefined will not\n  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {\n    elm.setAttribute('multiple', 'multiple');\n  }\n  return elm\n}\n\nfunction createElementNS (namespace, tagName) {\n  return document.createElementNS(namespaceMap[namespace], tagName)\n}\n\nfunction createTextNode (text) {\n  return document.createTextNode(text)\n}\n\nfunction createComment (text) {\n  return document.createComment(text)\n}\n\nfunction insertBefore (parentNode, newNode, referenceNode) {\n  parentNode.insertBefore(newNode, referenceNode);\n}\n\nfunction removeChild (node, child) {\n  node.removeChild(child);\n}\n\nfunction appendChild (node, child) {\n  node.appendChild(child);\n}\n\nfunction parentNode (node) {\n  return node.parentNode\n}\n\nfunction nextSibling (node) {\n  return node.nextSibling\n}\n\nfunction tagName (node) {\n  return node.tagName\n}\n\nfunction setTextContent (node, text) {\n  node.textContent = text;\n}\n\nfunction setStyleScope (node, scopeId) {\n  node.setAttribute(scopeId, '');\n}\n\nvar nodeOps = /*#__PURE__*/Object.freeze({\n  createElement: createElement$1,\n  createElementNS: createElementNS,\n  createTextNode: createTextNode,\n  createComment: createComment,\n  insertBefore: insertBefore,\n  removeChild: removeChild,\n  appendChild: appendChild,\n  parentNode: parentNode,\n  nextSibling: nextSibling,\n  tagName: tagName,\n  setTextContent: setTextContent,\n  setStyleScope: setStyleScope\n});\n\n/*  */\n\nvar ref = {\n  create: function create (_, vnode) {\n    registerRef(vnode);\n  },\n  update: function update (oldVnode, vnode) {\n    if (oldVnode.data.ref !== vnode.data.ref) {\n      registerRef(oldVnode, true);\n      registerRef(vnode);\n    }\n  },\n  destroy: function destroy (vnode) {\n    registerRef(vnode, true);\n  }\n};\n\nfunction registerRef (vnode, isRemoval) {\n  var key = vnode.data.ref;\n  if (!isDef(key)) { return }\n\n  var vm = vnode.context;\n  var ref = vnode.componentInstance || vnode.elm;\n  var refs = vm.$refs;\n  if (isRemoval) {\n    if (Array.isArray(refs[key])) {\n      remove(refs[key], ref);\n    } else if (refs[key] === ref) {\n      refs[key] = undefined;\n    }\n  } else {\n    if (vnode.data.refInFor) {\n      if (!Array.isArray(refs[key])) {\n        refs[key] = [ref];\n      } else if (refs[key].indexOf(ref) < 0) {\n        // $flow-disable-line\n        refs[key].push(ref);\n      }\n    } else {\n      refs[key] = ref;\n    }\n  }\n}\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/paldepind/snabbdom/blob/master/LICENSE\n *\n * modified by Evan You (@yyx990803)\n *\n * Not type-checking this because this file is perf-critical and the cost\n * of making flow understand it is not worth it.\n */\n\nvar emptyNode = new VNode('', {}, []);\n\nvar hooks = ['create', 'activate', 'update', 'remove', 'destroy'];\n\nfunction sameVnode (a, b) {\n  return (\n    a.key === b.key && (\n      (\n        a.tag === b.tag &&\n        a.isComment === b.isComment &&\n        isDef(a.data) === isDef(b.data) &&\n        sameInputType(a, b)\n      ) || (\n        isTrue(a.isAsyncPlaceholder) &&\n        a.asyncFactory === b.asyncFactory &&\n        isUndef(b.asyncFactory.error)\n      )\n    )\n  )\n}\n\nfunction sameInputType (a, b) {\n  if (a.tag !== 'input') { return true }\n  var i;\n  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;\n  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;\n  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)\n}\n\nfunction createKeyToOldIdx (children, beginIdx, endIdx) {\n  var i, key;\n  var map = {};\n  for (i = beginIdx; i <= endIdx; ++i) {\n    key = children[i].key;\n    if (isDef(key)) { map[key] = i; }\n  }\n  return map\n}\n\nfunction createPatchFunction (backend) {\n  var i, j;\n  var cbs = {};\n\n  var modules = backend.modules;\n  var nodeOps = backend.nodeOps;\n\n  for (i = 0; i < hooks.length; ++i) {\n    cbs[hooks[i]] = [];\n    for (j = 0; j < modules.length; ++j) {\n      if (isDef(modules[j][hooks[i]])) {\n        cbs[hooks[i]].push(modules[j][hooks[i]]);\n      }\n    }\n  }\n\n  function emptyNodeAt (elm) {\n    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)\n  }\n\n  function createRmCb (childElm, listeners) {\n    function remove$$1 () {\n      if (--remove$$1.listeners === 0) {\n        removeNode(childElm);\n      }\n    }\n    remove$$1.listeners = listeners;\n    return remove$$1\n  }\n\n  function removeNode (el) {\n    var parent = nodeOps.parentNode(el);\n    // element may have already been removed due to v-html / v-text\n    if (isDef(parent)) {\n      nodeOps.removeChild(parent, el);\n    }\n  }\n\n  function isUnknownElement$$1 (vnode, inVPre) {\n    return (\n      !inVPre &&\n      !vnode.ns &&\n      !(\n        config.ignoredElements.length &&\n        config.ignoredElements.some(function (ignore) {\n          return isRegExp(ignore)\n            ? ignore.test(vnode.tag)\n            : ignore === vnode.tag\n        })\n      ) &&\n      config.isUnknownElement(vnode.tag)\n    )\n  }\n\n  var creatingElmInVPre = 0;\n\n  function createElm (\n    vnode,\n    insertedVnodeQueue,\n    parentElm,\n    refElm,\n    nested,\n    ownerArray,\n    index\n  ) {\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // This vnode was used in a previous render!\n      // now it's used as a new node, overwriting its elm would cause\n      // potential patch errors down the road when it's used as an insertion\n      // reference node. Instead, we clone the node on-demand before creating\n      // associated DOM element for it.\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    vnode.isRootInsert = !nested; // for transition enter check\n    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {\n      return\n    }\n\n    var data = vnode.data;\n    var children = vnode.children;\n    var tag = vnode.tag;\n    if (isDef(tag)) {\n      if (false) {}\n\n      vnode.elm = vnode.ns\n        ? nodeOps.createElementNS(vnode.ns, tag)\n        : nodeOps.createElement(tag, vnode);\n      setScope(vnode);\n\n      /* istanbul ignore if */\n      {\n        createChildren(vnode, children, insertedVnodeQueue);\n        if (isDef(data)) {\n          invokeCreateHooks(vnode, insertedVnodeQueue);\n        }\n        insert(parentElm, vnode.elm, refElm);\n      }\n\n      if (false) {}\n    } else if (isTrue(vnode.isComment)) {\n      vnode.elm = nodeOps.createComment(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    } else {\n      vnode.elm = nodeOps.createTextNode(vnode.text);\n      insert(parentElm, vnode.elm, refElm);\n    }\n  }\n\n  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i = vnode.data;\n    if (isDef(i)) {\n      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;\n      if (isDef(i = i.hook) && isDef(i = i.init)) {\n        i(vnode, false /* hydrating */);\n      }\n      // after calling the init hook, if the vnode is a child component\n      // it should've created a child instance and mounted it. the child\n      // component also has set the placeholder vnode's elm.\n      // in that case we can just return the element and be done.\n      if (isDef(vnode.componentInstance)) {\n        initComponent(vnode, insertedVnodeQueue);\n        insert(parentElm, vnode.elm, refElm);\n        if (isTrue(isReactivated)) {\n          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);\n        }\n        return true\n      }\n    }\n  }\n\n  function initComponent (vnode, insertedVnodeQueue) {\n    if (isDef(vnode.data.pendingInsert)) {\n      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);\n      vnode.data.pendingInsert = null;\n    }\n    vnode.elm = vnode.componentInstance.$el;\n    if (isPatchable(vnode)) {\n      invokeCreateHooks(vnode, insertedVnodeQueue);\n      setScope(vnode);\n    } else {\n      // empty component root.\n      // skip all element-related modules except for ref (#3455)\n      registerRef(vnode);\n      // make sure to invoke the insert hook\n      insertedVnodeQueue.push(vnode);\n    }\n  }\n\n  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {\n    var i;\n    // hack for #4339: a reactivated component with inner transition\n    // does not trigger because the inner node's created hooks are not called\n    // again. It's not ideal to involve module-specific logic in here but\n    // there doesn't seem to be a better way to do it.\n    var innerNode = vnode;\n    while (innerNode.componentInstance) {\n      innerNode = innerNode.componentInstance._vnode;\n      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {\n        for (i = 0; i < cbs.activate.length; ++i) {\n          cbs.activate[i](emptyNode, innerNode);\n        }\n        insertedVnodeQueue.push(innerNode);\n        break\n      }\n    }\n    // unlike a newly created component,\n    // a reactivated keep-alive component doesn't insert itself\n    insert(parentElm, vnode.elm, refElm);\n  }\n\n  function insert (parent, elm, ref$$1) {\n    if (isDef(parent)) {\n      if (isDef(ref$$1)) {\n        if (nodeOps.parentNode(ref$$1) === parent) {\n          nodeOps.insertBefore(parent, elm, ref$$1);\n        }\n      } else {\n        nodeOps.appendChild(parent, elm);\n      }\n    }\n  }\n\n  function createChildren (vnode, children, insertedVnodeQueue) {\n    if (Array.isArray(children)) {\n      if (false) {}\n      for (var i = 0; i < children.length; ++i) {\n        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);\n      }\n    } else if (isPrimitive(vnode.text)) {\n      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));\n    }\n  }\n\n  function isPatchable (vnode) {\n    while (vnode.componentInstance) {\n      vnode = vnode.componentInstance._vnode;\n    }\n    return isDef(vnode.tag)\n  }\n\n  function invokeCreateHooks (vnode, insertedVnodeQueue) {\n    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n      cbs.create[i$1](emptyNode, vnode);\n    }\n    i = vnode.data.hook; // Reuse variable\n    if (isDef(i)) {\n      if (isDef(i.create)) { i.create(emptyNode, vnode); }\n      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }\n    }\n  }\n\n  // set scope id attribute for scoped CSS.\n  // this is implemented as a special case to avoid the overhead\n  // of going through the normal attribute patching process.\n  function setScope (vnode) {\n    var i;\n    if (isDef(i = vnode.fnScopeId)) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    } else {\n      var ancestor = vnode;\n      while (ancestor) {\n        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {\n          nodeOps.setStyleScope(vnode.elm, i);\n        }\n        ancestor = ancestor.parent;\n      }\n    }\n    // for slot content they should also get the scopeId from the host instance.\n    if (isDef(i = activeInstance) &&\n      i !== vnode.context &&\n      i !== vnode.fnContext &&\n      isDef(i = i.$options._scopeId)\n    ) {\n      nodeOps.setStyleScope(vnode.elm, i);\n    }\n  }\n\n  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);\n    }\n  }\n\n  function invokeDestroyHook (vnode) {\n    var i, j;\n    var data = vnode.data;\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }\n      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }\n    }\n    if (isDef(i = vnode.children)) {\n      for (j = 0; j < vnode.children.length; ++j) {\n        invokeDestroyHook(vnode.children[j]);\n      }\n    }\n  }\n\n  function removeVnodes (vnodes, startIdx, endIdx) {\n    for (; startIdx <= endIdx; ++startIdx) {\n      var ch = vnodes[startIdx];\n      if (isDef(ch)) {\n        if (isDef(ch.tag)) {\n          removeAndInvokeRemoveHook(ch);\n          invokeDestroyHook(ch);\n        } else { // Text node\n          removeNode(ch.elm);\n        }\n      }\n    }\n  }\n\n  function removeAndInvokeRemoveHook (vnode, rm) {\n    if (isDef(rm) || isDef(vnode.data)) {\n      var i;\n      var listeners = cbs.remove.length + 1;\n      if (isDef(rm)) {\n        // we have a recursively passed down rm callback\n        // increase the listeners count\n        rm.listeners += listeners;\n      } else {\n        // directly removing\n        rm = createRmCb(vnode.elm, listeners);\n      }\n      // recursively invoke hooks on child component root node\n      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {\n        removeAndInvokeRemoveHook(i, rm);\n      }\n      for (i = 0; i < cbs.remove.length; ++i) {\n        cbs.remove[i](vnode, rm);\n      }\n      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {\n        i(vnode, rm);\n      } else {\n        rm();\n      }\n    } else {\n      removeNode(vnode.elm);\n    }\n  }\n\n  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {\n    var oldStartIdx = 0;\n    var newStartIdx = 0;\n    var oldEndIdx = oldCh.length - 1;\n    var oldStartVnode = oldCh[0];\n    var oldEndVnode = oldCh[oldEndIdx];\n    var newEndIdx = newCh.length - 1;\n    var newStartVnode = newCh[0];\n    var newEndVnode = newCh[newEndIdx];\n    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;\n\n    // removeOnly is a special flag used only by <transition-group>\n    // to ensure removed elements stay in correct relative positions\n    // during leaving transitions\n    var canMove = !removeOnly;\n\n    if (false) {}\n\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n      if (isUndef(oldStartVnode)) {\n        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left\n      } else if (isUndef(oldEndVnode)) {\n        oldEndVnode = oldCh[--oldEndIdx];\n      } else if (sameVnode(oldStartVnode, newStartVnode)) {\n        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        oldStartVnode = oldCh[++oldStartIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else if (sameVnode(oldEndVnode, newEndVnode)) {\n        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));\n        oldStartVnode = oldCh[++oldStartIdx];\n        newEndVnode = newCh[--newEndIdx];\n      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n        oldEndVnode = oldCh[--oldEndIdx];\n        newStartVnode = newCh[++newStartIdx];\n      } else {\n        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }\n        idxInOld = isDef(newStartVnode.key)\n          ? oldKeyToIdx[newStartVnode.key]\n          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);\n        if (isUndef(idxInOld)) { // New element\n          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n        } else {\n          vnodeToMove = oldCh[idxInOld];\n          if (sameVnode(vnodeToMove, newStartVnode)) {\n            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);\n            oldCh[idxInOld] = undefined;\n            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);\n          } else {\n            // same key but different element. treat as new element\n            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);\n          }\n        }\n        newStartVnode = newCh[++newStartIdx];\n      }\n    }\n    if (oldStartIdx > oldEndIdx) {\n      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;\n      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n    } else if (newStartIdx > newEndIdx) {\n      removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n  }\n\n  function checkDuplicateKeys (children) {\n    var seenKeys = {};\n    for (var i = 0; i < children.length; i++) {\n      var vnode = children[i];\n      var key = vnode.key;\n      if (isDef(key)) {\n        if (seenKeys[key]) {\n          warn(\n            (\"Duplicate keys detected: '\" + key + \"'. This may cause an update error.\"),\n            vnode.context\n          );\n        } else {\n          seenKeys[key] = true;\n        }\n      }\n    }\n  }\n\n  function findIdxInOld (node, oldCh, start, end) {\n    for (var i = start; i < end; i++) {\n      var c = oldCh[i];\n      if (isDef(c) && sameVnode(node, c)) { return i }\n    }\n  }\n\n  function patchVnode (\n    oldVnode,\n    vnode,\n    insertedVnodeQueue,\n    ownerArray,\n    index,\n    removeOnly\n  ) {\n    if (oldVnode === vnode) {\n      return\n    }\n\n    if (isDef(vnode.elm) && isDef(ownerArray)) {\n      // clone reused vnode\n      vnode = ownerArray[index] = cloneVNode(vnode);\n    }\n\n    var elm = vnode.elm = oldVnode.elm;\n\n    if (isTrue(oldVnode.isAsyncPlaceholder)) {\n      if (isDef(vnode.asyncFactory.resolved)) {\n        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);\n      } else {\n        vnode.isAsyncPlaceholder = true;\n      }\n      return\n    }\n\n    // reuse element for static trees.\n    // note we only do this if the vnode is cloned -\n    // if the new node is not cloned it means the render functions have been\n    // reset by the hot-reload-api and we need to do a proper re-render.\n    if (isTrue(vnode.isStatic) &&\n      isTrue(oldVnode.isStatic) &&\n      vnode.key === oldVnode.key &&\n      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))\n    ) {\n      vnode.componentInstance = oldVnode.componentInstance;\n      return\n    }\n\n    var i;\n    var data = vnode.data;\n    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {\n      i(oldVnode, vnode);\n    }\n\n    var oldCh = oldVnode.children;\n    var ch = vnode.children;\n    if (isDef(data) && isPatchable(vnode)) {\n      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }\n      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }\n    }\n    if (isUndef(vnode.text)) {\n      if (isDef(oldCh) && isDef(ch)) {\n        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }\n      } else if (isDef(ch)) {\n        if (false) {}\n        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }\n        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n      } else if (isDef(oldCh)) {\n        removeVnodes(oldCh, 0, oldCh.length - 1);\n      } else if (isDef(oldVnode.text)) {\n        nodeOps.setTextContent(elm, '');\n      }\n    } else if (oldVnode.text !== vnode.text) {\n      nodeOps.setTextContent(elm, vnode.text);\n    }\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }\n    }\n  }\n\n  function invokeInsertHook (vnode, queue, initial) {\n    // delay insert hooks for component root nodes, invoke them after the\n    // element is really inserted\n    if (isTrue(initial) && isDef(vnode.parent)) {\n      vnode.parent.data.pendingInsert = queue;\n    } else {\n      for (var i = 0; i < queue.length; ++i) {\n        queue[i].data.hook.insert(queue[i]);\n      }\n    }\n  }\n\n  var hydrationBailed = false;\n  // list of modules that can skip create hook during hydration because they\n  // are already rendered on the client or has no need for initialization\n  // Note: style is excluded because it relies on initial clone for future\n  // deep updates (#7063).\n  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');\n\n  // Note: this is a browser-only function so we can assume elms are DOM nodes.\n  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {\n    var i;\n    var tag = vnode.tag;\n    var data = vnode.data;\n    var children = vnode.children;\n    inVPre = inVPre || (data && data.pre);\n    vnode.elm = elm;\n\n    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {\n      vnode.isAsyncPlaceholder = true;\n      return true\n    }\n    // assert node match\n    if (false) {}\n    if (isDef(data)) {\n      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }\n      if (isDef(i = vnode.componentInstance)) {\n        // child component. it should have hydrated its own tree.\n        initComponent(vnode, insertedVnodeQueue);\n        return true\n      }\n    }\n    if (isDef(tag)) {\n      if (isDef(children)) {\n        // empty element, allow client to pick up and populate children\n        if (!elm.hasChildNodes()) {\n          createChildren(vnode, children, insertedVnodeQueue);\n        } else {\n          // v-html and domProps: innerHTML\n          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {\n            if (i !== elm.innerHTML) {\n              /* istanbul ignore if */\n              if (false\n              ) {}\n              return false\n            }\n          } else {\n            // iterate and compare children lists\n            var childrenMatch = true;\n            var childNode = elm.firstChild;\n            for (var i$1 = 0; i$1 < children.length; i$1++) {\n              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {\n                childrenMatch = false;\n                break\n              }\n              childNode = childNode.nextSibling;\n            }\n            // if childNode is not null, it means the actual childNodes list is\n            // longer than the virtual children list.\n            if (!childrenMatch || childNode) {\n              /* istanbul ignore if */\n              if (false\n              ) {}\n              return false\n            }\n          }\n        }\n      }\n      if (isDef(data)) {\n        var fullInvoke = false;\n        for (var key in data) {\n          if (!isRenderedModule(key)) {\n            fullInvoke = true;\n            invokeCreateHooks(vnode, insertedVnodeQueue);\n            break\n          }\n        }\n        if (!fullInvoke && data['class']) {\n          // ensure collecting deps for deep class bindings for future updates\n          traverse(data['class']);\n        }\n      }\n    } else if (elm.data !== vnode.text) {\n      elm.data = vnode.text;\n    }\n    return true\n  }\n\n  function assertNodeMatch (node, vnode, inVPre) {\n    if (isDef(vnode.tag)) {\n      return vnode.tag.indexOf('vue-component') === 0 || (\n        !isUnknownElement$$1(vnode, inVPre) &&\n        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())\n      )\n    } else {\n      return node.nodeType === (vnode.isComment ? 8 : 3)\n    }\n  }\n\n  return function patch (oldVnode, vnode, hydrating, removeOnly) {\n    if (isUndef(vnode)) {\n      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }\n      return\n    }\n\n    var isInitialPatch = false;\n    var insertedVnodeQueue = [];\n\n    if (isUndef(oldVnode)) {\n      // empty mount (likely as component), create new root element\n      isInitialPatch = true;\n      createElm(vnode, insertedVnodeQueue);\n    } else {\n      var isRealElement = isDef(oldVnode.nodeType);\n      if (!isRealElement && sameVnode(oldVnode, vnode)) {\n        // patch existing root node\n        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);\n      } else {\n        if (isRealElement) {\n          // mounting to a real element\n          // check if this is server-rendered content and if we can perform\n          // a successful hydration.\n          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {\n            oldVnode.removeAttribute(SSR_ATTR);\n            hydrating = true;\n          }\n          if (isTrue(hydrating)) {\n            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {\n              invokeInsertHook(vnode, insertedVnodeQueue, true);\n              return oldVnode\n            } else if (false) {}\n          }\n          // either not server-rendered, or hydration failed.\n          // create an empty node and replace it\n          oldVnode = emptyNodeAt(oldVnode);\n        }\n\n        // replacing existing element\n        var oldElm = oldVnode.elm;\n        var parentElm = nodeOps.parentNode(oldElm);\n\n        // create new node\n        createElm(\n          vnode,\n          insertedVnodeQueue,\n          // extremely rare edge case: do not insert if old element is in a\n          // leaving transition. Only happens when combining transition +\n          // keep-alive + HOCs. (#4590)\n          oldElm._leaveCb ? null : parentElm,\n          nodeOps.nextSibling(oldElm)\n        );\n\n        // update parent placeholder node element, recursively\n        if (isDef(vnode.parent)) {\n          var ancestor = vnode.parent;\n          var patchable = isPatchable(vnode);\n          while (ancestor) {\n            for (var i = 0; i < cbs.destroy.length; ++i) {\n              cbs.destroy[i](ancestor);\n            }\n            ancestor.elm = vnode.elm;\n            if (patchable) {\n              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {\n                cbs.create[i$1](emptyNode, ancestor);\n              }\n              // #6513\n              // invoke insert hooks that may have been merged by create hooks.\n              // e.g. for directives that uses the \"inserted\" hook.\n              var insert = ancestor.data.hook.insert;\n              if (insert.merged) {\n                // start at index 1 to avoid re-invoking component mounted hook\n                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {\n                  insert.fns[i$2]();\n                }\n              }\n            } else {\n              registerRef(ancestor);\n            }\n            ancestor = ancestor.parent;\n          }\n        }\n\n        // destroy old node\n        if (isDef(parentElm)) {\n          removeVnodes([oldVnode], 0, 0);\n        } else if (isDef(oldVnode.tag)) {\n          invokeDestroyHook(oldVnode);\n        }\n      }\n    }\n\n    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);\n    return vnode.elm\n  }\n}\n\n/*  */\n\nvar directives = {\n  create: updateDirectives,\n  update: updateDirectives,\n  destroy: function unbindDirectives (vnode) {\n    updateDirectives(vnode, emptyNode);\n  }\n};\n\nfunction updateDirectives (oldVnode, vnode) {\n  if (oldVnode.data.directives || vnode.data.directives) {\n    _update(oldVnode, vnode);\n  }\n}\n\nfunction _update (oldVnode, vnode) {\n  var isCreate = oldVnode === emptyNode;\n  var isDestroy = vnode === emptyNode;\n  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);\n  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);\n\n  var dirsWithInsert = [];\n  var dirsWithPostpatch = [];\n\n  var key, oldDir, dir;\n  for (key in newDirs) {\n    oldDir = oldDirs[key];\n    dir = newDirs[key];\n    if (!oldDir) {\n      // new directive, bind\n      callHook$1(dir, 'bind', vnode, oldVnode);\n      if (dir.def && dir.def.inserted) {\n        dirsWithInsert.push(dir);\n      }\n    } else {\n      // existing directive, update\n      dir.oldValue = oldDir.value;\n      dir.oldArg = oldDir.arg;\n      callHook$1(dir, 'update', vnode, oldVnode);\n      if (dir.def && dir.def.componentUpdated) {\n        dirsWithPostpatch.push(dir);\n      }\n    }\n  }\n\n  if (dirsWithInsert.length) {\n    var callInsert = function () {\n      for (var i = 0; i < dirsWithInsert.length; i++) {\n        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);\n      }\n    };\n    if (isCreate) {\n      mergeVNodeHook(vnode, 'insert', callInsert);\n    } else {\n      callInsert();\n    }\n  }\n\n  if (dirsWithPostpatch.length) {\n    mergeVNodeHook(vnode, 'postpatch', function () {\n      for (var i = 0; i < dirsWithPostpatch.length; i++) {\n        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);\n      }\n    });\n  }\n\n  if (!isCreate) {\n    for (key in oldDirs) {\n      if (!newDirs[key]) {\n        // no longer present, unbind\n        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);\n      }\n    }\n  }\n}\n\nvar emptyModifiers = Object.create(null);\n\nfunction normalizeDirectives$1 (\n  dirs,\n  vm\n) {\n  var res = Object.create(null);\n  if (!dirs) {\n    // $flow-disable-line\n    return res\n  }\n  var i, dir;\n  for (i = 0; i < dirs.length; i++) {\n    dir = dirs[i];\n    if (!dir.modifiers) {\n      // $flow-disable-line\n      dir.modifiers = emptyModifiers;\n    }\n    res[getRawDirName(dir)] = dir;\n    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);\n  }\n  // $flow-disable-line\n  return res\n}\n\nfunction getRawDirName (dir) {\n  return dir.rawName || ((dir.name) + \".\" + (Object.keys(dir.modifiers || {}).join('.')))\n}\n\nfunction callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {\n  var fn = dir.def && dir.def[hook];\n  if (fn) {\n    try {\n      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);\n    } catch (e) {\n      handleError(e, vnode.context, (\"directive \" + (dir.name) + \" \" + hook + \" hook\"));\n    }\n  }\n}\n\nvar baseModules = [\n  ref,\n  directives\n];\n\n/*  */\n\nfunction updateAttrs (oldVnode, vnode) {\n  var opts = vnode.componentOptions;\n  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {\n    return\n  }\n  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {\n    return\n  }\n  var key, cur, old;\n  var elm = vnode.elm;\n  var oldAttrs = oldVnode.data.attrs || {};\n  var attrs = vnode.data.attrs || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(attrs.__ob__)) {\n    attrs = vnode.data.attrs = extend({}, attrs);\n  }\n\n  for (key in attrs) {\n    cur = attrs[key];\n    old = oldAttrs[key];\n    if (old !== cur) {\n      setAttr(elm, key, cur);\n    }\n  }\n  // #4391: in IE9, setting type can reset value for input[type=radio]\n  // #6666: IE/Edge forces progress value down to 1 before setting a max\n  /* istanbul ignore if */\n  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {\n    setAttr(elm, 'value', attrs.value);\n  }\n  for (key in oldAttrs) {\n    if (isUndef(attrs[key])) {\n      if (isXlink(key)) {\n        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));\n      } else if (!isEnumeratedAttr(key)) {\n        elm.removeAttribute(key);\n      }\n    }\n  }\n}\n\nfunction setAttr (el, key, value) {\n  if (el.tagName.indexOf('-') > -1) {\n    baseSetAttr(el, key, value);\n  } else if (isBooleanAttr(key)) {\n    // set attribute for blank value\n    // e.g. <option disabled>Select one</option>\n    if (isFalsyAttrValue(value)) {\n      el.removeAttribute(key);\n    } else {\n      // technically allowfullscreen is a boolean attribute for <iframe>,\n      // but Flash expects a value of \"true\" when used on <embed> tag\n      value = key === 'allowfullscreen' && el.tagName === 'EMBED'\n        ? 'true'\n        : key;\n      el.setAttribute(key, value);\n    }\n  } else if (isEnumeratedAttr(key)) {\n    el.setAttribute(key, convertEnumeratedValue(key, value));\n  } else if (isXlink(key)) {\n    if (isFalsyAttrValue(value)) {\n      el.removeAttributeNS(xlinkNS, getXlinkProp(key));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    baseSetAttr(el, key, value);\n  }\n}\n\nfunction baseSetAttr (el, key, value) {\n  if (isFalsyAttrValue(value)) {\n    el.removeAttribute(key);\n  } else {\n    // #7138: IE10 & 11 fires input event when setting placeholder on\n    // <textarea>... block the first input event and remove the blocker\n    // immediately.\n    /* istanbul ignore if */\n    if (\n      isIE && !isIE9 &&\n      el.tagName === 'TEXTAREA' &&\n      key === 'placeholder' && value !== '' && !el.__ieph\n    ) {\n      var blocker = function (e) {\n        e.stopImmediatePropagation();\n        el.removeEventListener('input', blocker);\n      };\n      el.addEventListener('input', blocker);\n      // $flow-disable-line\n      el.__ieph = true; /* IE placeholder patched */\n    }\n    el.setAttribute(key, value);\n  }\n}\n\nvar attrs = {\n  create: updateAttrs,\n  update: updateAttrs\n};\n\n/*  */\n\nfunction updateClass (oldVnode, vnode) {\n  var el = vnode.elm;\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n  if (\n    isUndef(data.staticClass) &&\n    isUndef(data.class) && (\n      isUndef(oldData) || (\n        isUndef(oldData.staticClass) &&\n        isUndef(oldData.class)\n      )\n    )\n  ) {\n    return\n  }\n\n  var cls = genClassForVnode(vnode);\n\n  // handle transition classes\n  var transitionClass = el._transitionClasses;\n  if (isDef(transitionClass)) {\n    cls = concat(cls, stringifyClass(transitionClass));\n  }\n\n  // set the class\n  if (cls !== el._prevClass) {\n    el.setAttribute('class', cls);\n    el._prevClass = cls;\n  }\n}\n\nvar klass = {\n  create: updateClass,\n  update: updateClass\n};\n\n/*  */\n\nvar validDivisionCharRE = /[\\w).+\\-_$\\]]/;\n\nfunction parseFilters (exp) {\n  var inSingle = false;\n  var inDouble = false;\n  var inTemplateString = false;\n  var inRegex = false;\n  var curly = 0;\n  var square = 0;\n  var paren = 0;\n  var lastFilterIndex = 0;\n  var c, prev, i, expression, filters;\n\n  for (i = 0; i < exp.length; i++) {\n    prev = c;\n    c = exp.charCodeAt(i);\n    if (inSingle) {\n      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }\n    } else if (inDouble) {\n      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }\n    } else if (inTemplateString) {\n      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }\n    } else if (inRegex) {\n      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }\n    } else if (\n      c === 0x7C && // pipe\n      exp.charCodeAt(i + 1) !== 0x7C &&\n      exp.charCodeAt(i - 1) !== 0x7C &&\n      !curly && !square && !paren\n    ) {\n      if (expression === undefined) {\n        // first filter, end of expression\n        lastFilterIndex = i + 1;\n        expression = exp.slice(0, i).trim();\n      } else {\n        pushFilter();\n      }\n    } else {\n      switch (c) {\n        case 0x22: inDouble = true; break         // \"\n        case 0x27: inSingle = true; break         // '\n        case 0x60: inTemplateString = true; break // `\n        case 0x28: paren++; break                 // (\n        case 0x29: paren--; break                 // )\n        case 0x5B: square++; break                // [\n        case 0x5D: square--; break                // ]\n        case 0x7B: curly++; break                 // {\n        case 0x7D: curly--; break                 // }\n      }\n      if (c === 0x2f) { // /\n        var j = i - 1;\n        var p = (void 0);\n        // find first non-whitespace prev char\n        for (; j >= 0; j--) {\n          p = exp.charAt(j);\n          if (p !== ' ') { break }\n        }\n        if (!p || !validDivisionCharRE.test(p)) {\n          inRegex = true;\n        }\n      }\n    }\n  }\n\n  if (expression === undefined) {\n    expression = exp.slice(0, i).trim();\n  } else if (lastFilterIndex !== 0) {\n    pushFilter();\n  }\n\n  function pushFilter () {\n    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());\n    lastFilterIndex = i + 1;\n  }\n\n  if (filters) {\n    for (i = 0; i < filters.length; i++) {\n      expression = wrapFilter(expression, filters[i]);\n    }\n  }\n\n  return expression\n}\n\nfunction wrapFilter (exp, filter) {\n  var i = filter.indexOf('(');\n  if (i < 0) {\n    // _f: resolveFilter\n    return (\"_f(\\\"\" + filter + \"\\\")(\" + exp + \")\")\n  } else {\n    var name = filter.slice(0, i);\n    var args = filter.slice(i + 1);\n    return (\"_f(\\\"\" + name + \"\\\")(\" + exp + (args !== ')' ? ',' + args : args))\n  }\n}\n\n/*  */\n\n\n\n/* eslint-disable no-unused-vars */\nfunction baseWarn (msg, range) {\n  console.error((\"[Vue compiler]: \" + msg));\n}\n/* eslint-enable no-unused-vars */\n\nfunction pluckModuleFunction (\n  modules,\n  key\n) {\n  return modules\n    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })\n    : []\n}\n\nfunction addProp (el, name, value, range, dynamic) {\n  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\nfunction addAttr (el, name, value, range, dynamic) {\n  var attrs = dynamic\n    ? (el.dynamicAttrs || (el.dynamicAttrs = []))\n    : (el.attrs || (el.attrs = []));\n  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));\n  el.plain = false;\n}\n\n// add a raw attr (use this in preTransforms)\nfunction addRawAttr (el, name, value, range) {\n  el.attrsMap[name] = value;\n  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));\n}\n\nfunction addDirective (\n  el,\n  name,\n  rawName,\n  value,\n  arg,\n  isDynamicArg,\n  modifiers,\n  range\n) {\n  (el.directives || (el.directives = [])).push(rangeSetItem({\n    name: name,\n    rawName: rawName,\n    value: value,\n    arg: arg,\n    isDynamicArg: isDynamicArg,\n    modifiers: modifiers\n  }, range));\n  el.plain = false;\n}\n\nfunction prependModifierMarker (symbol, name, dynamic) {\n  return dynamic\n    ? (\"_p(\" + name + \",\\\"\" + symbol + \"\\\")\")\n    : symbol + name // mark the event as captured\n}\n\nfunction addHandler (\n  el,\n  name,\n  value,\n  modifiers,\n  important,\n  warn,\n  range,\n  dynamic\n) {\n  modifiers = modifiers || emptyObject;\n  // warn prevent and passive modifier\n  /* istanbul ignore if */\n  if (\n    false\n  ) {}\n\n  // normalize click.right and click.middle since they don't actually fire\n  // this is technically browser-specific, but at least for now browsers are\n  // the only target envs that have right/middle clicks.\n  if (modifiers.right) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'contextmenu':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'contextmenu';\n      delete modifiers.right;\n    }\n  } else if (modifiers.middle) {\n    if (dynamic) {\n      name = \"(\" + name + \")==='click'?'mouseup':(\" + name + \")\";\n    } else if (name === 'click') {\n      name = 'mouseup';\n    }\n  }\n\n  // check capture modifier\n  if (modifiers.capture) {\n    delete modifiers.capture;\n    name = prependModifierMarker('!', name, dynamic);\n  }\n  if (modifiers.once) {\n    delete modifiers.once;\n    name = prependModifierMarker('~', name, dynamic);\n  }\n  /* istanbul ignore if */\n  if (modifiers.passive) {\n    delete modifiers.passive;\n    name = prependModifierMarker('&', name, dynamic);\n  }\n\n  var events;\n  if (modifiers.native) {\n    delete modifiers.native;\n    events = el.nativeEvents || (el.nativeEvents = {});\n  } else {\n    events = el.events || (el.events = {});\n  }\n\n  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);\n  if (modifiers !== emptyObject) {\n    newHandler.modifiers = modifiers;\n  }\n\n  var handlers = events[name];\n  /* istanbul ignore if */\n  if (Array.isArray(handlers)) {\n    important ? handlers.unshift(newHandler) : handlers.push(newHandler);\n  } else if (handlers) {\n    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];\n  } else {\n    events[name] = newHandler;\n  }\n\n  el.plain = false;\n}\n\nfunction getRawBindingAttr (\n  el,\n  name\n) {\n  return el.rawAttrsMap[':' + name] ||\n    el.rawAttrsMap['v-bind:' + name] ||\n    el.rawAttrsMap[name]\n}\n\nfunction getBindingAttr (\n  el,\n  name,\n  getStatic\n) {\n  var dynamicValue =\n    getAndRemoveAttr(el, ':' + name) ||\n    getAndRemoveAttr(el, 'v-bind:' + name);\n  if (dynamicValue != null) {\n    return parseFilters(dynamicValue)\n  } else if (getStatic !== false) {\n    var staticValue = getAndRemoveAttr(el, name);\n    if (staticValue != null) {\n      return JSON.stringify(staticValue)\n    }\n  }\n}\n\n// note: this only removes the attr from the Array (attrsList) so that it\n// doesn't get processed by processAttrs.\n// By default it does NOT remove it from the map (attrsMap) because the map is\n// needed during codegen.\nfunction getAndRemoveAttr (\n  el,\n  name,\n  removeFromMap\n) {\n  var val;\n  if ((val = el.attrsMap[name]) != null) {\n    var list = el.attrsList;\n    for (var i = 0, l = list.length; i < l; i++) {\n      if (list[i].name === name) {\n        list.splice(i, 1);\n        break\n      }\n    }\n  }\n  if (removeFromMap) {\n    delete el.attrsMap[name];\n  }\n  return val\n}\n\nfunction getAndRemoveAttrByRegex (\n  el,\n  name\n) {\n  var list = el.attrsList;\n  for (var i = 0, l = list.length; i < l; i++) {\n    var attr = list[i];\n    if (name.test(attr.name)) {\n      list.splice(i, 1);\n      return attr\n    }\n  }\n}\n\nfunction rangeSetItem (\n  item,\n  range\n) {\n  if (range) {\n    if (range.start != null) {\n      item.start = range.start;\n    }\n    if (range.end != null) {\n      item.end = range.end;\n    }\n  }\n  return item\n}\n\n/*  */\n\n/**\n * Cross-platform code generation for component v-model\n */\nfunction genComponentModel (\n  el,\n  value,\n  modifiers\n) {\n  var ref = modifiers || {};\n  var number = ref.number;\n  var trim = ref.trim;\n\n  var baseValueExpression = '$$v';\n  var valueExpression = baseValueExpression;\n  if (trim) {\n    valueExpression =\n      \"(typeof \" + baseValueExpression + \" === 'string'\" +\n      \"? \" + baseValueExpression + \".trim()\" +\n      \": \" + baseValueExpression + \")\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n  var assignment = genAssignmentCode(value, valueExpression);\n\n  el.model = {\n    value: (\"(\" + value + \")\"),\n    expression: JSON.stringify(value),\n    callback: (\"function (\" + baseValueExpression + \") {\" + assignment + \"}\")\n  };\n}\n\n/**\n * Cross-platform codegen helper for generating v-model value assignment code.\n */\nfunction genAssignmentCode (\n  value,\n  assignment\n) {\n  var res = parseModel(value);\n  if (res.key === null) {\n    return (value + \"=\" + assignment)\n  } else {\n    return (\"$set(\" + (res.exp) + \", \" + (res.key) + \", \" + assignment + \")\")\n  }\n}\n\n/**\n * Parse a v-model expression into a base path and a final key segment.\n * Handles both dot-path and possible square brackets.\n *\n * Possible cases:\n *\n * - test\n * - test[key]\n * - test[test1[key]]\n * - test[\"a\"][key]\n * - xxx.test[a[a].test1[key]]\n * - test.xxx.a[\"asa\"][test1[key]]\n *\n */\n\nvar len, str, chr, index$1, expressionPos, expressionEndPos;\n\n\n\nfunction parseModel (val) {\n  // Fix https://github.com/vuejs/vue/pull/7730\n  // allow v-model=\"obj.val \" (trailing whitespace)\n  val = val.trim();\n  len = val.length;\n\n  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {\n    index$1 = val.lastIndexOf('.');\n    if (index$1 > -1) {\n      return {\n        exp: val.slice(0, index$1),\n        key: '\"' + val.slice(index$1 + 1) + '\"'\n      }\n    } else {\n      return {\n        exp: val,\n        key: null\n      }\n    }\n  }\n\n  str = val;\n  index$1 = expressionPos = expressionEndPos = 0;\n\n  while (!eof()) {\n    chr = next();\n    /* istanbul ignore if */\n    if (isStringStart(chr)) {\n      parseString(chr);\n    } else if (chr === 0x5B) {\n      parseBracket(chr);\n    }\n  }\n\n  return {\n    exp: val.slice(0, expressionPos),\n    key: val.slice(expressionPos + 1, expressionEndPos)\n  }\n}\n\nfunction next () {\n  return str.charCodeAt(++index$1)\n}\n\nfunction eof () {\n  return index$1 >= len\n}\n\nfunction isStringStart (chr) {\n  return chr === 0x22 || chr === 0x27\n}\n\nfunction parseBracket (chr) {\n  var inBracket = 1;\n  expressionPos = index$1;\n  while (!eof()) {\n    chr = next();\n    if (isStringStart(chr)) {\n      parseString(chr);\n      continue\n    }\n    if (chr === 0x5B) { inBracket++; }\n    if (chr === 0x5D) { inBracket--; }\n    if (inBracket === 0) {\n      expressionEndPos = index$1;\n      break\n    }\n  }\n}\n\nfunction parseString (chr) {\n  var stringQuote = chr;\n  while (!eof()) {\n    chr = next();\n    if (chr === stringQuote) {\n      break\n    }\n  }\n}\n\n/*  */\n\nvar warn$1;\n\n// in some cases, the event used has to be determined at runtime\n// so we used some reserved tokens during compile.\nvar RANGE_TOKEN = '__r';\nvar CHECKBOX_RADIO_TOKEN = '__c';\n\nfunction model (\n  el,\n  dir,\n  _warn\n) {\n  warn$1 = _warn;\n  var value = dir.value;\n  var modifiers = dir.modifiers;\n  var tag = el.tag;\n  var type = el.attrsMap.type;\n\n  if (false) {}\n\n  if (el.component) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (tag === 'select') {\n    genSelect(el, value, modifiers);\n  } else if (tag === 'input' && type === 'checkbox') {\n    genCheckboxModel(el, value, modifiers);\n  } else if (tag === 'input' && type === 'radio') {\n    genRadioModel(el, value, modifiers);\n  } else if (tag === 'input' || tag === 'textarea') {\n    genDefaultModel(el, value, modifiers);\n  } else if (!config.isReservedTag(tag)) {\n    genComponentModel(el, value, modifiers);\n    // component v-model doesn't need extra runtime\n    return false\n  } else if (false) {}\n\n  // ensure runtime directive metadata\n  return true\n}\n\nfunction genCheckboxModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';\n  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';\n  addProp(el, 'checked',\n    \"Array.isArray(\" + value + \")\" +\n    \"?_i(\" + value + \",\" + valueBinding + \")>-1\" + (\n      trueValueBinding === 'true'\n        ? (\":(\" + value + \")\")\n        : (\":_q(\" + value + \",\" + trueValueBinding + \")\")\n    )\n  );\n  addHandler(el, 'change',\n    \"var $$a=\" + value + \",\" +\n        '$$el=$event.target,' +\n        \"$$c=$$el.checked?(\" + trueValueBinding + \"):(\" + falseValueBinding + \");\" +\n    'if(Array.isArray($$a)){' +\n      \"var $$v=\" + (number ? '_n(' + valueBinding + ')' : valueBinding) + \",\" +\n          '$$i=_i($$a,$$v);' +\n      \"if($$el.checked){$$i<0&&(\" + (genAssignmentCode(value, '$$a.concat([$$v])')) + \")}\" +\n      \"else{$$i>-1&&(\" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + \")}\" +\n    \"}else{\" + (genAssignmentCode(value, '$$c')) + \"}\",\n    null, true\n  );\n}\n\nfunction genRadioModel (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var valueBinding = getBindingAttr(el, 'value') || 'null';\n  valueBinding = number ? (\"_n(\" + valueBinding + \")\") : valueBinding;\n  addProp(el, 'checked', (\"_q(\" + value + \",\" + valueBinding + \")\"));\n  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);\n}\n\nfunction genSelect (\n  el,\n  value,\n  modifiers\n) {\n  var number = modifiers && modifiers.number;\n  var selectedVal = \"Array.prototype.filter\" +\n    \".call($event.target.options,function(o){return o.selected})\" +\n    \".map(function(o){var val = \\\"_value\\\" in o ? o._value : o.value;\" +\n    \"return \" + (number ? '_n(val)' : 'val') + \"})\";\n\n  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';\n  var code = \"var $$selectedVal = \" + selectedVal + \";\";\n  code = code + \" \" + (genAssignmentCode(value, assignment));\n  addHandler(el, 'change', code, null, true);\n}\n\nfunction genDefaultModel (\n  el,\n  value,\n  modifiers\n) {\n  var type = el.attrsMap.type;\n\n  // warn if v-bind:value conflicts with v-model\n  // except for inputs with v-bind:type\n  if (false) { var binding, typeBinding, value$1; }\n\n  var ref = modifiers || {};\n  var lazy = ref.lazy;\n  var number = ref.number;\n  var trim = ref.trim;\n  var needCompositionGuard = !lazy && type !== 'range';\n  var event = lazy\n    ? 'change'\n    : type === 'range'\n      ? RANGE_TOKEN\n      : 'input';\n\n  var valueExpression = '$event.target.value';\n  if (trim) {\n    valueExpression = \"$event.target.value.trim()\";\n  }\n  if (number) {\n    valueExpression = \"_n(\" + valueExpression + \")\";\n  }\n\n  var code = genAssignmentCode(value, valueExpression);\n  if (needCompositionGuard) {\n    code = \"if($event.target.composing)return;\" + code;\n  }\n\n  addProp(el, 'value', (\"(\" + value + \")\"));\n  addHandler(el, event, code, null, true);\n  if (trim || number) {\n    addHandler(el, 'blur', '$forceUpdate()');\n  }\n}\n\n/*  */\n\n// normalize v-model event tokens that can only be determined at runtime.\n// it's important to place the event as the first in the array because\n// the whole point is ensuring the v-model callback gets called before\n// user-attached handlers.\nfunction normalizeEvents (on) {\n  /* istanbul ignore if */\n  if (isDef(on[RANGE_TOKEN])) {\n    // IE input[type=range] only supports `change` event\n    var event = isIE ? 'change' : 'input';\n    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);\n    delete on[RANGE_TOKEN];\n  }\n  // This was originally intended to fix #4521 but no longer necessary\n  // after 2.5. Keeping it for backwards compat with generated code from < 2.4\n  /* istanbul ignore if */\n  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {\n    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);\n    delete on[CHECKBOX_RADIO_TOKEN];\n  }\n}\n\nvar target$1;\n\nfunction createOnceHandler$1 (event, handler, capture) {\n  var _target = target$1; // save current target element in closure\n  return function onceHandler () {\n    var res = handler.apply(null, arguments);\n    if (res !== null) {\n      remove$2(event, onceHandler, capture, _target);\n    }\n  }\n}\n\n// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp\n// implementation and does not fire microtasks in between event propagation, so\n// safe to exclude.\nvar useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);\n\nfunction add$1 (\n  name,\n  handler,\n  capture,\n  passive\n) {\n  // async edge case #6566: inner click event triggers patch, event handler\n  // attached to outer element during patch, and triggered again. This\n  // happens because browsers fire microtask ticks between event propagation.\n  // the solution is simple: we save the timestamp when a handler is attached,\n  // and the handler would only fire if the event passed to it was fired\n  // AFTER it was attached.\n  if (useMicrotaskFix) {\n    var attachedTimestamp = currentFlushTimestamp;\n    var original = handler;\n    handler = original._wrapper = function (e) {\n      if (\n        // no bubbling, should always fire.\n        // this is just a safety net in case event.timeStamp is unreliable in\n        // certain weird environments...\n        e.target === e.currentTarget ||\n        // event is fired after handler attachment\n        e.timeStamp >= attachedTimestamp ||\n        // bail for environments that have buggy event.timeStamp implementations\n        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState\n        // #9681 QtWebEngine event.timeStamp is negative value\n        e.timeStamp <= 0 ||\n        // #9448 bail if event is fired in another document in a multi-page\n        // electron/nw.js app, since event.timeStamp will be using a different\n        // starting reference\n        e.target.ownerDocument !== document\n      ) {\n        return original.apply(this, arguments)\n      }\n    };\n  }\n  target$1.addEventListener(\n    name,\n    handler,\n    supportsPassive\n      ? { capture: capture, passive: passive }\n      : capture\n  );\n}\n\nfunction remove$2 (\n  name,\n  handler,\n  capture,\n  _target\n) {\n  (_target || target$1).removeEventListener(\n    name,\n    handler._wrapper || handler,\n    capture\n  );\n}\n\nfunction updateDOMListeners (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {\n    return\n  }\n  var on = vnode.data.on || {};\n  var oldOn = oldVnode.data.on || {};\n  target$1 = vnode.elm;\n  normalizeEvents(on);\n  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);\n  target$1 = undefined;\n}\n\nvar events = {\n  create: updateDOMListeners,\n  update: updateDOMListeners\n};\n\n/*  */\n\nvar svgContainer;\n\nfunction updateDOMProps (oldVnode, vnode) {\n  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {\n    return\n  }\n  var key, cur;\n  var elm = vnode.elm;\n  var oldProps = oldVnode.data.domProps || {};\n  var props = vnode.data.domProps || {};\n  // clone observed objects, as the user probably wants to mutate it\n  if (isDef(props.__ob__)) {\n    props = vnode.data.domProps = extend({}, props);\n  }\n\n  for (key in oldProps) {\n    if (!(key in props)) {\n      elm[key] = '';\n    }\n  }\n\n  for (key in props) {\n    cur = props[key];\n    // ignore children if the node has textContent or innerHTML,\n    // as these will throw away existing DOM nodes and cause removal errors\n    // on subsequent patches (#3360)\n    if (key === 'textContent' || key === 'innerHTML') {\n      if (vnode.children) { vnode.children.length = 0; }\n      if (cur === oldProps[key]) { continue }\n      // #6601 work around Chrome version <= 55 bug where single textNode\n      // replaced by innerHTML/textContent retains its parentNode property\n      if (elm.childNodes.length === 1) {\n        elm.removeChild(elm.childNodes[0]);\n      }\n    }\n\n    if (key === 'value' && elm.tagName !== 'PROGRESS') {\n      // store value as _value as well since\n      // non-string values will be stringified\n      elm._value = cur;\n      // avoid resetting cursor position when value is the same\n      var strCur = isUndef(cur) ? '' : String(cur);\n      if (shouldUpdateValue(elm, strCur)) {\n        elm.value = strCur;\n      }\n    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {\n      // IE doesn't support innerHTML for SVG elements\n      svgContainer = svgContainer || document.createElement('div');\n      svgContainer.innerHTML = \"<svg>\" + cur + \"</svg>\";\n      var svg = svgContainer.firstChild;\n      while (elm.firstChild) {\n        elm.removeChild(elm.firstChild);\n      }\n      while (svg.firstChild) {\n        elm.appendChild(svg.firstChild);\n      }\n    } else if (\n      // skip the update if old and new VDOM state is the same.\n      // `value` is handled separately because the DOM value may be temporarily\n      // out of sync with VDOM state due to focus, composition and modifiers.\n      // This  #4521 by skipping the unnecesarry `checked` update.\n      cur !== oldProps[key]\n    ) {\n      // some property updates can throw\n      // e.g. `value` on <progress> w/ non-finite value\n      try {\n        elm[key] = cur;\n      } catch (e) {}\n    }\n  }\n}\n\n// check platforms/web/util/attrs.js acceptValue\n\n\nfunction shouldUpdateValue (elm, checkVal) {\n  return (!elm.composing && (\n    elm.tagName === 'OPTION' ||\n    isNotInFocusAndDirty(elm, checkVal) ||\n    isDirtyWithModifiers(elm, checkVal)\n  ))\n}\n\nfunction isNotInFocusAndDirty (elm, checkVal) {\n  // return true when textbox (.number and .trim) loses focus and its value is\n  // not equal to the updated value\n  var notInFocus = true;\n  // #6157\n  // work around IE bug when accessing document.activeElement in an iframe\n  try { notInFocus = document.activeElement !== elm; } catch (e) {}\n  return notInFocus && elm.value !== checkVal\n}\n\nfunction isDirtyWithModifiers (elm, newVal) {\n  var value = elm.value;\n  var modifiers = elm._vModifiers; // injected by v-model runtime\n  if (isDef(modifiers)) {\n    if (modifiers.number) {\n      return toNumber(value) !== toNumber(newVal)\n    }\n    if (modifiers.trim) {\n      return value.trim() !== newVal.trim()\n    }\n  }\n  return value !== newVal\n}\n\nvar domProps = {\n  create: updateDOMProps,\n  update: updateDOMProps\n};\n\n/*  */\n\nvar parseStyleText = cached(function (cssText) {\n  var res = {};\n  var listDelimiter = /;(?![^(]*\\))/g;\n  var propertyDelimiter = /:(.+)/;\n  cssText.split(listDelimiter).forEach(function (item) {\n    if (item) {\n      var tmp = item.split(propertyDelimiter);\n      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return res\n});\n\n// merge static and dynamic style data on the same vnode\nfunction normalizeStyleData (data) {\n  var style = normalizeStyleBinding(data.style);\n  // static style is pre-processed into an object during compilation\n  // and is always a fresh object, so it's safe to merge into it\n  return data.staticStyle\n    ? extend(data.staticStyle, style)\n    : style\n}\n\n// normalize possible array / string values into Object\nfunction normalizeStyleBinding (bindingStyle) {\n  if (Array.isArray(bindingStyle)) {\n    return toObject(bindingStyle)\n  }\n  if (typeof bindingStyle === 'string') {\n    return parseStyleText(bindingStyle)\n  }\n  return bindingStyle\n}\n\n/**\n * parent component style should be after child's\n * so that parent component's style could override it\n */\nfunction getStyle (vnode, checkChild) {\n  var res = {};\n  var styleData;\n\n  if (checkChild) {\n    var childNode = vnode;\n    while (childNode.componentInstance) {\n      childNode = childNode.componentInstance._vnode;\n      if (\n        childNode && childNode.data &&\n        (styleData = normalizeStyleData(childNode.data))\n      ) {\n        extend(res, styleData);\n      }\n    }\n  }\n\n  if ((styleData = normalizeStyleData(vnode.data))) {\n    extend(res, styleData);\n  }\n\n  var parentNode = vnode;\n  while ((parentNode = parentNode.parent)) {\n    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {\n      extend(res, styleData);\n    }\n  }\n  return res\n}\n\n/*  */\n\nvar cssVarRE = /^--/;\nvar importantRE = /\\s*!important$/;\nvar setProp = function (el, name, val) {\n  /* istanbul ignore if */\n  if (cssVarRE.test(name)) {\n    el.style.setProperty(name, val);\n  } else if (importantRE.test(val)) {\n    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');\n  } else {\n    var normalizedName = normalize(name);\n    if (Array.isArray(val)) {\n      // Support values array created by autoprefixer, e.g.\n      // {display: [\"-webkit-box\", \"-ms-flexbox\", \"flex\"]}\n      // Set them one by one, and the browser will only set those it can recognize\n      for (var i = 0, len = val.length; i < len; i++) {\n        el.style[normalizedName] = val[i];\n      }\n    } else {\n      el.style[normalizedName] = val;\n    }\n  }\n};\n\nvar vendorNames = ['Webkit', 'Moz', 'ms'];\n\nvar emptyStyle;\nvar normalize = cached(function (prop) {\n  emptyStyle = emptyStyle || document.createElement('div').style;\n  prop = camelize(prop);\n  if (prop !== 'filter' && (prop in emptyStyle)) {\n    return prop\n  }\n  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);\n  for (var i = 0; i < vendorNames.length; i++) {\n    var name = vendorNames[i] + capName;\n    if (name in emptyStyle) {\n      return name\n    }\n  }\n});\n\nfunction updateStyle (oldVnode, vnode) {\n  var data = vnode.data;\n  var oldData = oldVnode.data;\n\n  if (isUndef(data.staticStyle) && isUndef(data.style) &&\n    isUndef(oldData.staticStyle) && isUndef(oldData.style)\n  ) {\n    return\n  }\n\n  var cur, name;\n  var el = vnode.elm;\n  var oldStaticStyle = oldData.staticStyle;\n  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};\n\n  // if static style exists, stylebinding already merged into it when doing normalizeStyleData\n  var oldStyle = oldStaticStyle || oldStyleBinding;\n\n  var style = normalizeStyleBinding(vnode.data.style) || {};\n\n  // store normalized style under a different key for next diff\n  // make sure to clone it if it's reactive, since the user likely wants\n  // to mutate it.\n  vnode.data.normalizedStyle = isDef(style.__ob__)\n    ? extend({}, style)\n    : style;\n\n  var newStyle = getStyle(vnode, true);\n\n  for (name in oldStyle) {\n    if (isUndef(newStyle[name])) {\n      setProp(el, name, '');\n    }\n  }\n  for (name in newStyle) {\n    cur = newStyle[name];\n    if (cur !== oldStyle[name]) {\n      // ie9 setting to null has no effect, must use empty string\n      setProp(el, name, cur == null ? '' : cur);\n    }\n  }\n}\n\nvar style = {\n  create: updateStyle,\n  update: updateStyle\n};\n\n/*  */\n\nvar whitespaceRE = /\\s+/;\n\n/**\n * Add class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction addClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });\n    } else {\n      el.classList.add(cls);\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      el.setAttribute('class', (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for SVG since classList is not supported on\n * SVG elements in IE\n */\nfunction removeClass (el, cls) {\n  /* istanbul ignore if */\n  if (!cls || !(cls = cls.trim())) {\n    return\n  }\n\n  /* istanbul ignore else */\n  if (el.classList) {\n    if (cls.indexOf(' ') > -1) {\n      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });\n    } else {\n      el.classList.remove(cls);\n    }\n    if (!el.classList.length) {\n      el.removeAttribute('class');\n    }\n  } else {\n    var cur = \" \" + (el.getAttribute('class') || '') + \" \";\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    cur = cur.trim();\n    if (cur) {\n      el.setAttribute('class', cur);\n    } else {\n      el.removeAttribute('class');\n    }\n  }\n}\n\n/*  */\n\nfunction resolveTransition (def$$1) {\n  if (!def$$1) {\n    return\n  }\n  /* istanbul ignore else */\n  if (typeof def$$1 === 'object') {\n    var res = {};\n    if (def$$1.css !== false) {\n      extend(res, autoCssTransition(def$$1.name || 'v'));\n    }\n    extend(res, def$$1);\n    return res\n  } else if (typeof def$$1 === 'string') {\n    return autoCssTransition(def$$1)\n  }\n}\n\nvar autoCssTransition = cached(function (name) {\n  return {\n    enterClass: (name + \"-enter\"),\n    enterToClass: (name + \"-enter-to\"),\n    enterActiveClass: (name + \"-enter-active\"),\n    leaveClass: (name + \"-leave\"),\n    leaveToClass: (name + \"-leave-to\"),\n    leaveActiveClass: (name + \"-leave-active\")\n  }\n});\n\nvar hasTransition = inBrowser && !isIE9;\nvar TRANSITION = 'transition';\nvar ANIMATION = 'animation';\n\n// Transition property/event sniffing\nvar transitionProp = 'transition';\nvar transitionEndEvent = 'transitionend';\nvar animationProp = 'animation';\nvar animationEndEvent = 'animationend';\nif (hasTransition) {\n  /* istanbul ignore if */\n  if (window.ontransitionend === undefined &&\n    window.onwebkittransitionend !== undefined\n  ) {\n    transitionProp = 'WebkitTransition';\n    transitionEndEvent = 'webkitTransitionEnd';\n  }\n  if (window.onanimationend === undefined &&\n    window.onwebkitanimationend !== undefined\n  ) {\n    animationProp = 'WebkitAnimation';\n    animationEndEvent = 'webkitAnimationEnd';\n  }\n}\n\n// binding to window is necessary to make hot reload work in IE in strict mode\nvar raf = inBrowser\n  ? window.requestAnimationFrame\n    ? window.requestAnimationFrame.bind(window)\n    : setTimeout\n  : /* istanbul ignore next */ function (fn) { return fn(); };\n\nfunction nextFrame (fn) {\n  raf(function () {\n    raf(fn);\n  });\n}\n\nfunction addTransitionClass (el, cls) {\n  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);\n  if (transitionClasses.indexOf(cls) < 0) {\n    transitionClasses.push(cls);\n    addClass(el, cls);\n  }\n}\n\nfunction removeTransitionClass (el, cls) {\n  if (el._transitionClasses) {\n    remove(el._transitionClasses, cls);\n  }\n  removeClass(el, cls);\n}\n\nfunction whenTransitionEnds (\n  el,\n  expectedType,\n  cb\n) {\n  var ref = getTransitionInfo(el, expectedType);\n  var type = ref.type;\n  var timeout = ref.timeout;\n  var propCount = ref.propCount;\n  if (!type) { return cb() }\n  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;\n  var ended = 0;\n  var end = function () {\n    el.removeEventListener(event, onEnd);\n    cb();\n  };\n  var onEnd = function (e) {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n  setTimeout(function () {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(event, onEnd);\n}\n\nvar transformRE = /\\b(transform|all)(,|$)/;\n\nfunction getTransitionInfo (el, expectedType) {\n  var styles = window.getComputedStyle(el);\n  // JSDOM may return undefined for transition properties\n  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');\n  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');\n  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');\n  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');\n  var animationTimeout = getTimeout(animationDelays, animationDurations);\n\n  var type;\n  var timeout = 0;\n  var propCount = 0;\n  /* istanbul ignore if */\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0\n      ? transitionTimeout > animationTimeout\n        ? TRANSITION\n        : ANIMATION\n      : null;\n    propCount = type\n      ? type === TRANSITION\n        ? transitionDurations.length\n        : animationDurations.length\n      : 0;\n  }\n  var hasTransform =\n    type === TRANSITION &&\n    transformRE.test(styles[transitionProp + 'Property']);\n  return {\n    type: type,\n    timeout: timeout,\n    propCount: propCount,\n    hasTransform: hasTransform\n  }\n}\n\nfunction getTimeout (delays, durations) {\n  /* istanbul ignore next */\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max.apply(null, durations.map(function (d, i) {\n    return toMs(d) + toMs(delays[i])\n  }))\n}\n\n// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers\n// in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down (i.e. acting\n// as a floor function) causing unexpected behaviors\nfunction toMs (s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000\n}\n\n/*  */\n\nfunction enter (vnode, toggleDisplay) {\n  var el = vnode.elm;\n\n  // call leave callback now\n  if (isDef(el._leaveCb)) {\n    el._leaveCb.cancelled = true;\n    el._leaveCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data)) {\n    return\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._enterCb) || el.nodeType !== 1) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var enterClass = data.enterClass;\n  var enterToClass = data.enterToClass;\n  var enterActiveClass = data.enterActiveClass;\n  var appearClass = data.appearClass;\n  var appearToClass = data.appearToClass;\n  var appearActiveClass = data.appearActiveClass;\n  var beforeEnter = data.beforeEnter;\n  var enter = data.enter;\n  var afterEnter = data.afterEnter;\n  var enterCancelled = data.enterCancelled;\n  var beforeAppear = data.beforeAppear;\n  var appear = data.appear;\n  var afterAppear = data.afterAppear;\n  var appearCancelled = data.appearCancelled;\n  var duration = data.duration;\n\n  // activeInstance will always be the <transition> component managing this\n  // transition. One edge case to check is when the <transition> is placed\n  // as the root node of a child component. In that case we need to check\n  // <transition>'s parent for appear check.\n  var context = activeInstance;\n  var transitionNode = activeInstance.$vnode;\n  while (transitionNode && transitionNode.parent) {\n    context = transitionNode.context;\n    transitionNode = transitionNode.parent;\n  }\n\n  var isAppear = !context._isMounted || !vnode.isRootInsert;\n\n  if (isAppear && !appear && appear !== '') {\n    return\n  }\n\n  var startClass = isAppear && appearClass\n    ? appearClass\n    : enterClass;\n  var activeClass = isAppear && appearActiveClass\n    ? appearActiveClass\n    : enterActiveClass;\n  var toClass = isAppear && appearToClass\n    ? appearToClass\n    : enterToClass;\n\n  var beforeEnterHook = isAppear\n    ? (beforeAppear || beforeEnter)\n    : beforeEnter;\n  var enterHook = isAppear\n    ? (typeof appear === 'function' ? appear : enter)\n    : enter;\n  var afterEnterHook = isAppear\n    ? (afterAppear || afterEnter)\n    : afterEnter;\n  var enterCancelledHook = isAppear\n    ? (appearCancelled || enterCancelled)\n    : enterCancelled;\n\n  var explicitEnterDuration = toNumber(\n    isObject(duration)\n      ? duration.enter\n      : duration\n  );\n\n  if (false) {}\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(enterHook);\n\n  var cb = el._enterCb = once(function () {\n    if (expectsCSS) {\n      removeTransitionClass(el, toClass);\n      removeTransitionClass(el, activeClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, startClass);\n      }\n      enterCancelledHook && enterCancelledHook(el);\n    } else {\n      afterEnterHook && afterEnterHook(el);\n    }\n    el._enterCb = null;\n  });\n\n  if (!vnode.data.show) {\n    // remove pending leave element on enter by injecting an insert hook\n    mergeVNodeHook(vnode, 'insert', function () {\n      var parent = el.parentNode;\n      var pendingNode = parent && parent._pending && parent._pending[vnode.key];\n      if (pendingNode &&\n        pendingNode.tag === vnode.tag &&\n        pendingNode.elm._leaveCb\n      ) {\n        pendingNode.elm._leaveCb();\n      }\n      enterHook && enterHook(el, cb);\n    });\n  }\n\n  // start enter transition\n  beforeEnterHook && beforeEnterHook(el);\n  if (expectsCSS) {\n    addTransitionClass(el, startClass);\n    addTransitionClass(el, activeClass);\n    nextFrame(function () {\n      removeTransitionClass(el, startClass);\n      if (!cb.cancelled) {\n        addTransitionClass(el, toClass);\n        if (!userWantsControl) {\n          if (isValidDuration(explicitEnterDuration)) {\n            setTimeout(cb, explicitEnterDuration);\n          } else {\n            whenTransitionEnds(el, type, cb);\n          }\n        }\n      }\n    });\n  }\n\n  if (vnode.data.show) {\n    toggleDisplay && toggleDisplay();\n    enterHook && enterHook(el, cb);\n  }\n\n  if (!expectsCSS && !userWantsControl) {\n    cb();\n  }\n}\n\nfunction leave (vnode, rm) {\n  var el = vnode.elm;\n\n  // call enter callback now\n  if (isDef(el._enterCb)) {\n    el._enterCb.cancelled = true;\n    el._enterCb();\n  }\n\n  var data = resolveTransition(vnode.data.transition);\n  if (isUndef(data) || el.nodeType !== 1) {\n    return rm()\n  }\n\n  /* istanbul ignore if */\n  if (isDef(el._leaveCb)) {\n    return\n  }\n\n  var css = data.css;\n  var type = data.type;\n  var leaveClass = data.leaveClass;\n  var leaveToClass = data.leaveToClass;\n  var leaveActiveClass = data.leaveActiveClass;\n  var beforeLeave = data.beforeLeave;\n  var leave = data.leave;\n  var afterLeave = data.afterLeave;\n  var leaveCancelled = data.leaveCancelled;\n  var delayLeave = data.delayLeave;\n  var duration = data.duration;\n\n  var expectsCSS = css !== false && !isIE9;\n  var userWantsControl = getHookArgumentsLength(leave);\n\n  var explicitLeaveDuration = toNumber(\n    isObject(duration)\n      ? duration.leave\n      : duration\n  );\n\n  if (false) {}\n\n  var cb = el._leaveCb = once(function () {\n    if (el.parentNode && el.parentNode._pending) {\n      el.parentNode._pending[vnode.key] = null;\n    }\n    if (expectsCSS) {\n      removeTransitionClass(el, leaveToClass);\n      removeTransitionClass(el, leaveActiveClass);\n    }\n    if (cb.cancelled) {\n      if (expectsCSS) {\n        removeTransitionClass(el, leaveClass);\n      }\n      leaveCancelled && leaveCancelled(el);\n    } else {\n      rm();\n      afterLeave && afterLeave(el);\n    }\n    el._leaveCb = null;\n  });\n\n  if (delayLeave) {\n    delayLeave(performLeave);\n  } else {\n    performLeave();\n  }\n\n  function performLeave () {\n    // the delayed leave may have already been cancelled\n    if (cb.cancelled) {\n      return\n    }\n    // record leaving element\n    if (!vnode.data.show && el.parentNode) {\n      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;\n    }\n    beforeLeave && beforeLeave(el);\n    if (expectsCSS) {\n      addTransitionClass(el, leaveClass);\n      addTransitionClass(el, leaveActiveClass);\n      nextFrame(function () {\n        removeTransitionClass(el, leaveClass);\n        if (!cb.cancelled) {\n          addTransitionClass(el, leaveToClass);\n          if (!userWantsControl) {\n            if (isValidDuration(explicitLeaveDuration)) {\n              setTimeout(cb, explicitLeaveDuration);\n            } else {\n              whenTransitionEnds(el, type, cb);\n            }\n          }\n        }\n      });\n    }\n    leave && leave(el, cb);\n    if (!expectsCSS && !userWantsControl) {\n      cb();\n    }\n  }\n}\n\n// only used in dev mode\nfunction checkDuration (val, name, vnode) {\n  if (typeof val !== 'number') {\n    warn(\n      \"<transition> explicit \" + name + \" duration is not a valid number - \" +\n      \"got \" + (JSON.stringify(val)) + \".\",\n      vnode.context\n    );\n  } else if (isNaN(val)) {\n    warn(\n      \"<transition> explicit \" + name + \" duration is NaN - \" +\n      'the duration expression might be incorrect.',\n      vnode.context\n    );\n  }\n}\n\nfunction isValidDuration (val) {\n  return typeof val === 'number' && !isNaN(val)\n}\n\n/**\n * Normalize a transition hook's argument length. The hook may be:\n * - a merged hook (invoker) with the original in .fns\n * - a wrapped component method (check ._length)\n * - a plain function (.length)\n */\nfunction getHookArgumentsLength (fn) {\n  if (isUndef(fn)) {\n    return false\n  }\n  var invokerFns = fn.fns;\n  if (isDef(invokerFns)) {\n    // invoker\n    return getHookArgumentsLength(\n      Array.isArray(invokerFns)\n        ? invokerFns[0]\n        : invokerFns\n    )\n  } else {\n    return (fn._length || fn.length) > 1\n  }\n}\n\nfunction _enter (_, vnode) {\n  if (vnode.data.show !== true) {\n    enter(vnode);\n  }\n}\n\nvar transition = inBrowser ? {\n  create: _enter,\n  activate: _enter,\n  remove: function remove$$1 (vnode, rm) {\n    /* istanbul ignore else */\n    if (vnode.data.show !== true) {\n      leave(vnode, rm);\n    } else {\n      rm();\n    }\n  }\n} : {};\n\nvar platformModules = [\n  attrs,\n  klass,\n  events,\n  domProps,\n  style,\n  transition\n];\n\n/*  */\n\n// the directive module should be applied last, after all\n// built-in modules have been applied.\nvar modules = platformModules.concat(baseModules);\n\nvar patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });\n\n/**\n * Not type checking this file because flow doesn't like attaching\n * properties to Elements.\n */\n\n/* istanbul ignore if */\nif (isIE9) {\n  // http://www.matts411.com/post/internet-explorer-9-oninput/\n  document.addEventListener('selectionchange', function () {\n    var el = document.activeElement;\n    if (el && el.vmodel) {\n      trigger(el, 'input');\n    }\n  });\n}\n\nvar directive = {\n  inserted: function inserted (el, binding, vnode, oldVnode) {\n    if (vnode.tag === 'select') {\n      // #6903\n      if (oldVnode.elm && !oldVnode.elm._vOptions) {\n        mergeVNodeHook(vnode, 'postpatch', function () {\n          directive.componentUpdated(el, binding, vnode);\n        });\n      } else {\n        setSelected(el, binding, vnode.context);\n      }\n      el._vOptions = [].map.call(el.options, getValue);\n    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {\n      el._vModifiers = binding.modifiers;\n      if (!binding.modifiers.lazy) {\n        el.addEventListener('compositionstart', onCompositionStart);\n        el.addEventListener('compositionend', onCompositionEnd);\n        // Safari < 10.2 & UIWebView doesn't fire compositionend when\n        // switching focus before confirming composition choice\n        // this also fixes the issue where some browsers e.g. iOS Chrome\n        // fires \"change\" instead of \"input\" on autocomplete.\n        el.addEventListener('change', onCompositionEnd);\n        /* istanbul ignore if */\n        if (isIE9) {\n          el.vmodel = true;\n        }\n      }\n    }\n  },\n\n  componentUpdated: function componentUpdated (el, binding, vnode) {\n    if (vnode.tag === 'select') {\n      setSelected(el, binding, vnode.context);\n      // in case the options rendered by v-for have changed,\n      // it's possible that the value is out-of-sync with the rendered options.\n      // detect such cases and filter out values that no longer has a matching\n      // option in the DOM.\n      var prevOptions = el._vOptions;\n      var curOptions = el._vOptions = [].map.call(el.options, getValue);\n      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {\n        // trigger change event if\n        // no matching option found for at least one value\n        var needReset = el.multiple\n          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })\n          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);\n        if (needReset) {\n          trigger(el, 'change');\n        }\n      }\n    }\n  }\n};\n\nfunction setSelected (el, binding, vm) {\n  actuallySetSelected(el, binding, vm);\n  /* istanbul ignore if */\n  if (isIE || isEdge) {\n    setTimeout(function () {\n      actuallySetSelected(el, binding, vm);\n    }, 0);\n  }\n}\n\nfunction actuallySetSelected (el, binding, vm) {\n  var value = binding.value;\n  var isMultiple = el.multiple;\n  if (isMultiple && !Array.isArray(value)) {\n     false && false;\n    return\n  }\n  var selected, option;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    option = el.options[i];\n    if (isMultiple) {\n      selected = looseIndexOf(value, getValue(option)) > -1;\n      if (option.selected !== selected) {\n        option.selected = selected;\n      }\n    } else {\n      if (looseEqual(getValue(option), value)) {\n        if (el.selectedIndex !== i) {\n          el.selectedIndex = i;\n        }\n        return\n      }\n    }\n  }\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n}\n\nfunction hasNoMatchingOption (value, options) {\n  return options.every(function (o) { return !looseEqual(o, value); })\n}\n\nfunction getValue (option) {\n  return '_value' in option\n    ? option._value\n    : option.value\n}\n\nfunction onCompositionStart (e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd (e) {\n  // prevent triggering an input event for no reason\n  if (!e.target.composing) { return }\n  e.target.composing = false;\n  trigger(e.target, 'input');\n}\n\nfunction trigger (el, type) {\n  var e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n}\n\n/*  */\n\n// recursively search for possible transition defined inside the component root\nfunction locateNode (vnode) {\n  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)\n    ? locateNode(vnode.componentInstance._vnode)\n    : vnode\n}\n\nvar show = {\n  bind: function bind (el, ref, vnode) {\n    var value = ref.value;\n\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    var originalDisplay = el.__vOriginalDisplay =\n      el.style.display === 'none' ? '' : el.style.display;\n    if (value && transition$$1) {\n      vnode.data.show = true;\n      enter(vnode, function () {\n        el.style.display = originalDisplay;\n      });\n    } else {\n      el.style.display = value ? originalDisplay : 'none';\n    }\n  },\n\n  update: function update (el, ref, vnode) {\n    var value = ref.value;\n    var oldValue = ref.oldValue;\n\n    /* istanbul ignore if */\n    if (!value === !oldValue) { return }\n    vnode = locateNode(vnode);\n    var transition$$1 = vnode.data && vnode.data.transition;\n    if (transition$$1) {\n      vnode.data.show = true;\n      if (value) {\n        enter(vnode, function () {\n          el.style.display = el.__vOriginalDisplay;\n        });\n      } else {\n        leave(vnode, function () {\n          el.style.display = 'none';\n        });\n      }\n    } else {\n      el.style.display = value ? el.__vOriginalDisplay : 'none';\n    }\n  },\n\n  unbind: function unbind (\n    el,\n    binding,\n    vnode,\n    oldVnode,\n    isDestroy\n  ) {\n    if (!isDestroy) {\n      el.style.display = el.__vOriginalDisplay;\n    }\n  }\n};\n\nvar platformDirectives = {\n  model: directive,\n  show: show\n};\n\n/*  */\n\nvar transitionProps = {\n  name: String,\n  appear: Boolean,\n  css: Boolean,\n  mode: String,\n  type: String,\n  enterClass: String,\n  leaveClass: String,\n  enterToClass: String,\n  leaveToClass: String,\n  enterActiveClass: String,\n  leaveActiveClass: String,\n  appearClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  duration: [Number, String, Object]\n};\n\n// in case the child is also an abstract component, e.g. <keep-alive>\n// we want to recursively retrieve the real component to be rendered\nfunction getRealChild (vnode) {\n  var compOptions = vnode && vnode.componentOptions;\n  if (compOptions && compOptions.Ctor.options.abstract) {\n    return getRealChild(getFirstComponentChild(compOptions.children))\n  } else {\n    return vnode\n  }\n}\n\nfunction extractTransitionData (comp) {\n  var data = {};\n  var options = comp.$options;\n  // props\n  for (var key in options.propsData) {\n    data[key] = comp[key];\n  }\n  // events.\n  // extract listeners and pass them directly to the transition methods\n  var listeners = options._parentListeners;\n  for (var key$1 in listeners) {\n    data[camelize(key$1)] = listeners[key$1];\n  }\n  return data\n}\n\nfunction placeholder (h, rawChild) {\n  if (/\\d-keep-alive$/.test(rawChild.tag)) {\n    return h('keep-alive', {\n      props: rawChild.componentOptions.propsData\n    })\n  }\n}\n\nfunction hasParentTransition (vnode) {\n  while ((vnode = vnode.parent)) {\n    if (vnode.data.transition) {\n      return true\n    }\n  }\n}\n\nfunction isSameChild (child, oldChild) {\n  return oldChild.key === child.key && oldChild.tag === child.tag\n}\n\nvar isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };\n\nvar isVShowDirective = function (d) { return d.name === 'show'; };\n\nvar Transition = {\n  name: 'transition',\n  props: transitionProps,\n  abstract: true,\n\n  render: function render (h) {\n    var this$1 = this;\n\n    var children = this.$slots.default;\n    if (!children) {\n      return\n    }\n\n    // filter out text nodes (possible whitespaces)\n    children = children.filter(isNotTextNode);\n    /* istanbul ignore if */\n    if (!children.length) {\n      return\n    }\n\n    // warn multiple elements\n    if (false) {}\n\n    var mode = this.mode;\n\n    // warn invalid mode\n    if (false\n    ) {}\n\n    var rawChild = children[0];\n\n    // if this is a component root node and the component's\n    // parent container node also has transition, skip.\n    if (hasParentTransition(this.$vnode)) {\n      return rawChild\n    }\n\n    // apply transition data to child\n    // use getRealChild() to ignore abstract components e.g. keep-alive\n    var child = getRealChild(rawChild);\n    /* istanbul ignore if */\n    if (!child) {\n      return rawChild\n    }\n\n    if (this._leaving) {\n      return placeholder(h, rawChild)\n    }\n\n    // ensure a key that is unique to the vnode type and to this transition\n    // component instance. This key will be used to remove pending leaving nodes\n    // during entering.\n    var id = \"__transition-\" + (this._uid) + \"-\";\n    child.key = child.key == null\n      ? child.isComment\n        ? id + 'comment'\n        : id + child.tag\n      : isPrimitive(child.key)\n        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)\n        : child.key;\n\n    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);\n    var oldRawChild = this._vnode;\n    var oldChild = getRealChild(oldRawChild);\n\n    // mark v-show\n    // so that the transition module can hand over the control to the directive\n    if (child.data.directives && child.data.directives.some(isVShowDirective)) {\n      child.data.show = true;\n    }\n\n    if (\n      oldChild &&\n      oldChild.data &&\n      !isSameChild(child, oldChild) &&\n      !isAsyncPlaceholder(oldChild) &&\n      // #6687 component root is a comment node\n      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)\n    ) {\n      // replace old child transition data with fresh one\n      // important for dynamic transitions!\n      var oldData = oldChild.data.transition = extend({}, data);\n      // handle transition mode\n      if (mode === 'out-in') {\n        // return placeholder node and queue update when leave finishes\n        this._leaving = true;\n        mergeVNodeHook(oldData, 'afterLeave', function () {\n          this$1._leaving = false;\n          this$1.$forceUpdate();\n        });\n        return placeholder(h, rawChild)\n      } else if (mode === 'in-out') {\n        if (isAsyncPlaceholder(child)) {\n          return oldRawChild\n        }\n        var delayedLeave;\n        var performLeave = function () { delayedLeave(); };\n        mergeVNodeHook(data, 'afterEnter', performLeave);\n        mergeVNodeHook(data, 'enterCancelled', performLeave);\n        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });\n      }\n    }\n\n    return rawChild\n  }\n};\n\n/*  */\n\nvar props = extend({\n  tag: String,\n  moveClass: String\n}, transitionProps);\n\ndelete props.mode;\n\nvar TransitionGroup = {\n  props: props,\n\n  beforeMount: function beforeMount () {\n    var this$1 = this;\n\n    var update = this._update;\n    this._update = function (vnode, hydrating) {\n      var restoreActiveInstance = setActiveInstance(this$1);\n      // force removing pass\n      this$1.__patch__(\n        this$1._vnode,\n        this$1.kept,\n        false, // hydrating\n        true // removeOnly (!important, avoids unnecessary moves)\n      );\n      this$1._vnode = this$1.kept;\n      restoreActiveInstance();\n      update.call(this$1, vnode, hydrating);\n    };\n  },\n\n  render: function render (h) {\n    var tag = this.tag || this.$vnode.data.tag || 'span';\n    var map = Object.create(null);\n    var prevChildren = this.prevChildren = this.children;\n    var rawChildren = this.$slots.default || [];\n    var children = this.children = [];\n    var transitionData = extractTransitionData(this);\n\n    for (var i = 0; i < rawChildren.length; i++) {\n      var c = rawChildren[i];\n      if (c.tag) {\n        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {\n          children.push(c);\n          map[c.key] = c\n          ;(c.data || (c.data = {})).transition = transitionData;\n        } else if (false) { var name, opts; }\n      }\n    }\n\n    if (prevChildren) {\n      var kept = [];\n      var removed = [];\n      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {\n        var c$1 = prevChildren[i$1];\n        c$1.data.transition = transitionData;\n        c$1.data.pos = c$1.elm.getBoundingClientRect();\n        if (map[c$1.key]) {\n          kept.push(c$1);\n        } else {\n          removed.push(c$1);\n        }\n      }\n      this.kept = h(tag, null, kept);\n      this.removed = removed;\n    }\n\n    return h(tag, null, children)\n  },\n\n  updated: function updated () {\n    var children = this.prevChildren;\n    var moveClass = this.moveClass || ((this.name || 'v') + '-move');\n    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {\n      return\n    }\n\n    // we divide the work into three loops to avoid mixing DOM reads and writes\n    // in each iteration - which helps prevent layout thrashing.\n    children.forEach(callPendingCbs);\n    children.forEach(recordPosition);\n    children.forEach(applyTranslation);\n\n    // force reflow to put everything in position\n    // assign to this to avoid being removed in tree-shaking\n    // $flow-disable-line\n    this._reflow = document.body.offsetHeight;\n\n    children.forEach(function (c) {\n      if (c.data.moved) {\n        var el = c.elm;\n        var s = el.style;\n        addTransitionClass(el, moveClass);\n        s.transform = s.WebkitTransform = s.transitionDuration = '';\n        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {\n          if (e && e.target !== el) {\n            return\n          }\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener(transitionEndEvent, cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        });\n      }\n    });\n  },\n\n  methods: {\n    hasMove: function hasMove (el, moveClass) {\n      /* istanbul ignore if */\n      if (!hasTransition) {\n        return false\n      }\n      /* istanbul ignore if */\n      if (this._hasMove) {\n        return this._hasMove\n      }\n      // Detect whether an element with the move class applied has\n      // CSS transitions. Since the element may be inside an entering\n      // transition at this very moment, we make a clone of it and remove\n      // all other transition classes applied to ensure only the move class\n      // is applied.\n      var clone = el.cloneNode();\n      if (el._transitionClasses) {\n        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });\n      }\n      addClass(clone, moveClass);\n      clone.style.display = 'none';\n      this.$el.appendChild(clone);\n      var info = getTransitionInfo(clone);\n      this.$el.removeChild(clone);\n      return (this._hasMove = info.hasTransform)\n    }\n  }\n};\n\nfunction callPendingCbs (c) {\n  /* istanbul ignore if */\n  if (c.elm._moveCb) {\n    c.elm._moveCb();\n  }\n  /* istanbul ignore if */\n  if (c.elm._enterCb) {\n    c.elm._enterCb();\n  }\n}\n\nfunction recordPosition (c) {\n  c.data.newPos = c.elm.getBoundingClientRect();\n}\n\nfunction applyTranslation (c) {\n  var oldPos = c.data.pos;\n  var newPos = c.data.newPos;\n  var dx = oldPos.left - newPos.left;\n  var dy = oldPos.top - newPos.top;\n  if (dx || dy) {\n    c.data.moved = true;\n    var s = c.elm.style;\n    s.transform = s.WebkitTransform = \"translate(\" + dx + \"px,\" + dy + \"px)\";\n    s.transitionDuration = '0s';\n  }\n}\n\nvar platformComponents = {\n  Transition: Transition,\n  TransitionGroup: TransitionGroup\n};\n\n/*  */\n\n// install platform specific utils\nVue.config.mustUseProp = mustUseProp;\nVue.config.isReservedTag = isReservedTag;\nVue.config.isReservedAttr = isReservedAttr;\nVue.config.getTagNamespace = getTagNamespace;\nVue.config.isUnknownElement = isUnknownElement;\n\n// install platform runtime directives & components\nextend(Vue.options.directives, platformDirectives);\nextend(Vue.options.components, platformComponents);\n\n// install platform patch function\nVue.prototype.__patch__ = inBrowser ? patch : noop;\n\n// public mount method\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && inBrowser ? query(el) : undefined;\n  return mountComponent(this, el, hydrating)\n};\n\n// devtools global hook\n/* istanbul ignore next */\nif (inBrowser) {\n  setTimeout(function () {\n    if (config.devtools) {\n      if (devtools) {\n        devtools.emit('init', Vue);\n      } else if (\n        false\n      ) {}\n    }\n    if (false\n    ) {}\n  }, 0);\n}\n\n/*  */\n\nvar defaultTagRE = /\\{\\{((?:.|\\r?\\n)+?)\\}\\}/g;\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\n\nvar buildRegex = cached(function (delimiters) {\n  var open = delimiters[0].replace(regexEscapeRE, '\\\\$&');\n  var close = delimiters[1].replace(regexEscapeRE, '\\\\$&');\n  return new RegExp(open + '((?:.|\\\\n)+?)' + close, 'g')\n});\n\n\n\nfunction parseText (\n  text,\n  delimiters\n) {\n  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;\n  if (!tagRE.test(text)) {\n    return\n  }\n  var tokens = [];\n  var rawTokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, tokenValue;\n  while ((match = tagRE.exec(text))) {\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      rawTokens.push(tokenValue = text.slice(lastIndex, index));\n      tokens.push(JSON.stringify(tokenValue));\n    }\n    // tag token\n    var exp = parseFilters(match[1].trim());\n    tokens.push((\"_s(\" + exp + \")\"));\n    rawTokens.push({ '@binding': exp });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    rawTokens.push(tokenValue = text.slice(lastIndex));\n    tokens.push(JSON.stringify(tokenValue));\n  }\n  return {\n    expression: tokens.join('+'),\n    tokens: rawTokens\n  }\n}\n\n/*  */\n\nfunction transformNode (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticClass = getAndRemoveAttr(el, 'class');\n  if (false) { var res; }\n  if (staticClass) {\n    el.staticClass = JSON.stringify(staticClass);\n  }\n  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);\n  if (classBinding) {\n    el.classBinding = classBinding;\n  }\n}\n\nfunction genData (el) {\n  var data = '';\n  if (el.staticClass) {\n    data += \"staticClass:\" + (el.staticClass) + \",\";\n  }\n  if (el.classBinding) {\n    data += \"class:\" + (el.classBinding) + \",\";\n  }\n  return data\n}\n\nvar klass$1 = {\n  staticKeys: ['staticClass'],\n  transformNode: transformNode,\n  genData: genData\n};\n\n/*  */\n\nfunction transformNode$1 (el, options) {\n  var warn = options.warn || baseWarn;\n  var staticStyle = getAndRemoveAttr(el, 'style');\n  if (staticStyle) {\n    /* istanbul ignore if */\n    if (false) { var res; }\n    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));\n  }\n\n  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);\n  if (styleBinding) {\n    el.styleBinding = styleBinding;\n  }\n}\n\nfunction genData$1 (el) {\n  var data = '';\n  if (el.staticStyle) {\n    data += \"staticStyle:\" + (el.staticStyle) + \",\";\n  }\n  if (el.styleBinding) {\n    data += \"style:(\" + (el.styleBinding) + \"),\";\n  }\n  return data\n}\n\nvar style$1 = {\n  staticKeys: ['staticStyle'],\n  transformNode: transformNode$1,\n  genData: genData$1\n};\n\n/*  */\n\nvar decoder;\n\nvar he = {\n  decode: function decode (html) {\n    decoder = decoder || document.createElement('div');\n    decoder.innerHTML = html;\n    return decoder.textContent\n  }\n};\n\n/*  */\n\nvar isUnaryTag = makeMap(\n  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +\n  'link,meta,param,source,track,wbr'\n);\n\n// Elements that you can, intentionally, leave open\n// (and which close themselves)\nvar canBeLeftOpenTag = makeMap(\n  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'\n);\n\n// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3\n// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content\nvar isNonPhrasingTag = makeMap(\n  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +\n  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +\n  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +\n  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +\n  'title,tr,track'\n);\n\n/**\n * Not type-checking this file because it's mostly vendor code.\n */\n\n// Regular Expressions for parsing tags and attributes\nvar attribute = /^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar dynamicArgAttribute = /^\\s*((?:v-[\\w-]+:|@|:|#)\\[[^=]+\\][^\\s\"'<>\\/=]*)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/;\nvar ncname = \"[a-zA-Z_][\\\\-\\\\.0-9_a-zA-Z\" + (unicodeRegExp.source) + \"]*\";\nvar qnameCapture = \"((?:\" + ncname + \"\\\\:)?\" + ncname + \")\";\nvar startTagOpen = new RegExp((\"^<\" + qnameCapture));\nvar startTagClose = /^\\s*(\\/?)>/;\nvar endTag = new RegExp((\"^<\\\\/\" + qnameCapture + \"[^>]*>\"));\nvar doctype = /^<!DOCTYPE [^>]+>/i;\n// #7298: escape - to avoid being passed as HTML comment when inlined in page\nvar comment = /^<!\\--/;\nvar conditionalComment = /^<!\\[/;\n\n// Special Elements (can contain anything)\nvar isPlainTextElement = makeMap('script,style,textarea', true);\nvar reCache = {};\n\nvar decodingMap = {\n  '&lt;': '<',\n  '&gt;': '>',\n  '&quot;': '\"',\n  '&amp;': '&',\n  '&#10;': '\\n',\n  '&#9;': '\\t',\n  '&#39;': \"'\"\n};\nvar encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;\nvar encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;\n\n// #5992\nvar isIgnoreNewlineTag = makeMap('pre,textarea', true);\nvar shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\\n'; };\n\nfunction decodeAttr (value, shouldDecodeNewlines) {\n  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;\n  return value.replace(re, function (match) { return decodingMap[match]; })\n}\n\nfunction parseHTML (html, options) {\n  var stack = [];\n  var expectHTML = options.expectHTML;\n  var isUnaryTag$$1 = options.isUnaryTag || no;\n  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;\n  var index = 0;\n  var last, lastTag;\n  while (html) {\n    last = html;\n    // Make sure we're not in a plaintext content element like script/style\n    if (!lastTag || !isPlainTextElement(lastTag)) {\n      var textEnd = html.indexOf('<');\n      if (textEnd === 0) {\n        // Comment:\n        if (comment.test(html)) {\n          var commentEnd = html.indexOf('--\x3e');\n\n          if (commentEnd >= 0) {\n            if (options.shouldKeepComment) {\n              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);\n            }\n            advance(commentEnd + 3);\n            continue\n          }\n        }\n\n        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment\n        if (conditionalComment.test(html)) {\n          var conditionalEnd = html.indexOf(']>');\n\n          if (conditionalEnd >= 0) {\n            advance(conditionalEnd + 2);\n            continue\n          }\n        }\n\n        // Doctype:\n        var doctypeMatch = html.match(doctype);\n        if (doctypeMatch) {\n          advance(doctypeMatch[0].length);\n          continue\n        }\n\n        // End tag:\n        var endTagMatch = html.match(endTag);\n        if (endTagMatch) {\n          var curIndex = index;\n          advance(endTagMatch[0].length);\n          parseEndTag(endTagMatch[1], curIndex, index);\n          continue\n        }\n\n        // Start tag:\n        var startTagMatch = parseStartTag();\n        if (startTagMatch) {\n          handleStartTag(startTagMatch);\n          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {\n            advance(1);\n          }\n          continue\n        }\n      }\n\n      var text = (void 0), rest = (void 0), next = (void 0);\n      if (textEnd >= 0) {\n        rest = html.slice(textEnd);\n        while (\n          !endTag.test(rest) &&\n          !startTagOpen.test(rest) &&\n          !comment.test(rest) &&\n          !conditionalComment.test(rest)\n        ) {\n          // < in plain text, be forgiving and treat it as text\n          next = rest.indexOf('<', 1);\n          if (next < 0) { break }\n          textEnd += next;\n          rest = html.slice(textEnd);\n        }\n        text = html.substring(0, textEnd);\n      }\n\n      if (textEnd < 0) {\n        text = html;\n      }\n\n      if (text) {\n        advance(text.length);\n      }\n\n      if (options.chars && text) {\n        options.chars(text, index - text.length, index);\n      }\n    } else {\n      var endTagLength = 0;\n      var stackedTag = lastTag.toLowerCase();\n      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\\\s\\\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));\n      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {\n        endTagLength = endTag.length;\n        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {\n          text = text\n            .replace(/<!\\--([\\s\\S]*?)--\x3e/g, '$1') // #7298\n            .replace(/<!\\[CDATA\\[([\\s\\S]*?)]]>/g, '$1');\n        }\n        if (shouldIgnoreFirstNewline(stackedTag, text)) {\n          text = text.slice(1);\n        }\n        if (options.chars) {\n          options.chars(text);\n        }\n        return ''\n      });\n      index += html.length - rest$1.length;\n      html = rest$1;\n      parseEndTag(stackedTag, index - endTagLength, index);\n    }\n\n    if (html === last) {\n      options.chars && options.chars(html);\n      if (false) {}\n      break\n    }\n  }\n\n  // Clean up any remaining tags\n  parseEndTag();\n\n  function advance (n) {\n    index += n;\n    html = html.substring(n);\n  }\n\n  function parseStartTag () {\n    var start = html.match(startTagOpen);\n    if (start) {\n      var match = {\n        tagName: start[1],\n        attrs: [],\n        start: index\n      };\n      advance(start[0].length);\n      var end, attr;\n      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {\n        attr.start = index;\n        advance(attr[0].length);\n        attr.end = index;\n        match.attrs.push(attr);\n      }\n      if (end) {\n        match.unarySlash = end[1];\n        advance(end[0].length);\n        match.end = index;\n        return match\n      }\n    }\n  }\n\n  function handleStartTag (match) {\n    var tagName = match.tagName;\n    var unarySlash = match.unarySlash;\n\n    if (expectHTML) {\n      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {\n        parseEndTag(lastTag);\n      }\n      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {\n        parseEndTag(tagName);\n      }\n    }\n\n    var unary = isUnaryTag$$1(tagName) || !!unarySlash;\n\n    var l = match.attrs.length;\n    var attrs = new Array(l);\n    for (var i = 0; i < l; i++) {\n      var args = match.attrs[i];\n      var value = args[3] || args[4] || args[5] || '';\n      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'\n        ? options.shouldDecodeNewlinesForHref\n        : options.shouldDecodeNewlines;\n      attrs[i] = {\n        name: args[1],\n        value: decodeAttr(value, shouldDecodeNewlines)\n      };\n      if (false) {}\n    }\n\n    if (!unary) {\n      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });\n      lastTag = tagName;\n    }\n\n    if (options.start) {\n      options.start(tagName, attrs, unary, match.start, match.end);\n    }\n  }\n\n  function parseEndTag (tagName, start, end) {\n    var pos, lowerCasedTagName;\n    if (start == null) { start = index; }\n    if (end == null) { end = index; }\n\n    // Find the closest opened tag of the same type\n    if (tagName) {\n      lowerCasedTagName = tagName.toLowerCase();\n      for (pos = stack.length - 1; pos >= 0; pos--) {\n        if (stack[pos].lowerCasedTag === lowerCasedTagName) {\n          break\n        }\n      }\n    } else {\n      // If no tag name is provided, clean shop\n      pos = 0;\n    }\n\n    if (pos >= 0) {\n      // Close all the open elements, up the stack\n      for (var i = stack.length - 1; i >= pos; i--) {\n        if (false\n        ) {}\n        if (options.end) {\n          options.end(stack[i].tag, start, end);\n        }\n      }\n\n      // Remove the open elements from the stack\n      stack.length = pos;\n      lastTag = pos && stack[pos - 1].tag;\n    } else if (lowerCasedTagName === 'br') {\n      if (options.start) {\n        options.start(tagName, [], true, start, end);\n      }\n    } else if (lowerCasedTagName === 'p') {\n      if (options.start) {\n        options.start(tagName, [], false, start, end);\n      }\n      if (options.end) {\n        options.end(tagName, start, end);\n      }\n    }\n  }\n}\n\n/*  */\n\nvar onRE = /^@|^v-on:/;\nvar dirRE = /^v-|^@|^:|^#/;\nvar forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\nvar forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\nvar stripParensRE = /^\\(|\\)$/g;\nvar dynamicArgRE = /^\\[.*\\]$/;\n\nvar argRE = /:(.*)$/;\nvar bindRE = /^:|^\\.|^v-bind:/;\nvar modifierRE = /\\.[^.\\]]+(?=[^\\]]*$)/g;\n\nvar slotRE = /^v-slot(:|$)|^#/;\n\nvar lineBreakRE = /[\\r\\n]/;\nvar whitespaceRE$1 = /\\s+/g;\n\nvar invalidAttributeRE = /[\\s\"'<>\\/=]/;\n\nvar decodeHTMLCached = cached(he.decode);\n\nvar emptySlotScopeToken = \"_empty_\";\n\n// configurable state\nvar warn$2;\nvar delimiters;\nvar transforms;\nvar preTransforms;\nvar postTransforms;\nvar platformIsPreTag;\nvar platformMustUseProp;\nvar platformGetTagNamespace;\nvar maybeComponent;\n\nfunction createASTElement (\n  tag,\n  attrs,\n  parent\n) {\n  return {\n    type: 1,\n    tag: tag,\n    attrsList: attrs,\n    attrsMap: makeAttrsMap(attrs),\n    rawAttrsMap: {},\n    parent: parent,\n    children: []\n  }\n}\n\n/**\n * Convert HTML string to AST.\n */\nfunction parse (\n  template,\n  options\n) {\n  warn$2 = options.warn || baseWarn;\n\n  platformIsPreTag = options.isPreTag || no;\n  platformMustUseProp = options.mustUseProp || no;\n  platformGetTagNamespace = options.getTagNamespace || no;\n  var isReservedTag = options.isReservedTag || no;\n  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n\n  transforms = pluckModuleFunction(options.modules, 'transformNode');\n  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');\n  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');\n\n  delimiters = options.delimiters;\n\n  var stack = [];\n  var preserveWhitespace = options.preserveWhitespace !== false;\n  var whitespaceOption = options.whitespace;\n  var root;\n  var currentParent;\n  var inVPre = false;\n  var inPre = false;\n  var warned = false;\n\n  function warnOnce (msg, range) {\n    if (!warned) {\n      warned = true;\n      warn$2(msg, range);\n    }\n  }\n\n  function closeElement (element) {\n    trimEndingWhitespace(element);\n    if (!inVPre && !element.processed) {\n      element = processElement(element, options);\n    }\n    // tree management\n    if (!stack.length && element !== root) {\n      // allow root elements with v-if, v-else-if and v-else\n      if (root.if && (element.elseif || element.else)) {\n        if (false) {}\n        addIfCondition(root, {\n          exp: element.elseif,\n          block: element\n        });\n      } else if (false) {}\n    }\n    if (currentParent && !element.forbidden) {\n      if (element.elseif || element.else) {\n        processIfConditions(element, currentParent);\n      } else {\n        if (element.slotScope) {\n          // scoped slot\n          // keep it in the children list so that v-else(-if) conditions can\n          // find it as the prev node.\n          var name = element.slotTarget || '\"default\"'\n          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;\n        }\n        currentParent.children.push(element);\n        element.parent = currentParent;\n      }\n    }\n\n    // final children cleanup\n    // filter out scoped slots\n    element.children = element.children.filter(function (c) { return !(c).slotScope; });\n    // remove trailing whitespace node again\n    trimEndingWhitespace(element);\n\n    // check pre state\n    if (element.pre) {\n      inVPre = false;\n    }\n    if (platformIsPreTag(element.tag)) {\n      inPre = false;\n    }\n    // apply post-transforms\n    for (var i = 0; i < postTransforms.length; i++) {\n      postTransforms[i](element, options);\n    }\n  }\n\n  function trimEndingWhitespace (el) {\n    // remove trailing whitespace node\n    if (!inPre) {\n      var lastNode;\n      while (\n        (lastNode = el.children[el.children.length - 1]) &&\n        lastNode.type === 3 &&\n        lastNode.text === ' '\n      ) {\n        el.children.pop();\n      }\n    }\n  }\n\n  function checkRootConstraints (el) {\n    if (el.tag === 'slot' || el.tag === 'template') {\n      warnOnce(\n        \"Cannot use <\" + (el.tag) + \"> as component root element because it may \" +\n        'contain multiple nodes.',\n        { start: el.start }\n      );\n    }\n    if (el.attrsMap.hasOwnProperty('v-for')) {\n      warnOnce(\n        'Cannot use v-for on stateful component root element because ' +\n        'it renders multiple elements.',\n        el.rawAttrsMap['v-for']\n      );\n    }\n  }\n\n  parseHTML(template, {\n    warn: warn$2,\n    expectHTML: options.expectHTML,\n    isUnaryTag: options.isUnaryTag,\n    canBeLeftOpenTag: options.canBeLeftOpenTag,\n    shouldDecodeNewlines: options.shouldDecodeNewlines,\n    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,\n    shouldKeepComment: options.comments,\n    outputSourceRange: options.outputSourceRange,\n    start: function start (tag, attrs, unary, start$1, end) {\n      // check namespace.\n      // inherit parent ns if there is one\n      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);\n\n      // handle IE svg bug\n      /* istanbul ignore if */\n      if (isIE && ns === 'svg') {\n        attrs = guardIESVGBug(attrs);\n      }\n\n      var element = createASTElement(tag, attrs, currentParent);\n      if (ns) {\n        element.ns = ns;\n      }\n\n      if (false) {}\n\n      if (isForbiddenTag(element) && !isServerRendering()) {\n        element.forbidden = true;\n         false && false;\n      }\n\n      // apply pre-transforms\n      for (var i = 0; i < preTransforms.length; i++) {\n        element = preTransforms[i](element, options) || element;\n      }\n\n      if (!inVPre) {\n        processPre(element);\n        if (element.pre) {\n          inVPre = true;\n        }\n      }\n      if (platformIsPreTag(element.tag)) {\n        inPre = true;\n      }\n      if (inVPre) {\n        processRawAttrs(element);\n      } else if (!element.processed) {\n        // structural directives\n        processFor(element);\n        processIf(element);\n        processOnce(element);\n      }\n\n      if (!root) {\n        root = element;\n        if (false) {}\n      }\n\n      if (!unary) {\n        currentParent = element;\n        stack.push(element);\n      } else {\n        closeElement(element);\n      }\n    },\n\n    end: function end (tag, start, end$1) {\n      var element = stack[stack.length - 1];\n      // pop stack\n      stack.length -= 1;\n      currentParent = stack[stack.length - 1];\n      if (false) {}\n      closeElement(element);\n    },\n\n    chars: function chars (text, start, end) {\n      if (!currentParent) {\n        if (false) {}\n        return\n      }\n      // IE textarea placeholder bug\n      /* istanbul ignore if */\n      if (isIE &&\n        currentParent.tag === 'textarea' &&\n        currentParent.attrsMap.placeholder === text\n      ) {\n        return\n      }\n      var children = currentParent.children;\n      if (inPre || text.trim()) {\n        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);\n      } else if (!children.length) {\n        // remove the whitespace-only node right after an opening tag\n        text = '';\n      } else if (whitespaceOption) {\n        if (whitespaceOption === 'condense') {\n          // in condense mode, remove the whitespace node if it contains\n          // line break, otherwise condense to a single space\n          text = lineBreakRE.test(text) ? '' : ' ';\n        } else {\n          text = ' ';\n        }\n      } else {\n        text = preserveWhitespace ? ' ' : '';\n      }\n      if (text) {\n        if (!inPre && whitespaceOption === 'condense') {\n          // condense consecutive whitespaces into single space\n          text = text.replace(whitespaceRE$1, ' ');\n        }\n        var res;\n        var child;\n        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {\n          child = {\n            type: 2,\n            expression: res.expression,\n            tokens: res.tokens,\n            text: text\n          };\n        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {\n          child = {\n            type: 3,\n            text: text\n          };\n        }\n        if (child) {\n          if (false) {}\n          children.push(child);\n        }\n      }\n    },\n    comment: function comment (text, start, end) {\n      // adding anyting as a sibling to the root node is forbidden\n      // comments should still be allowed, but ignored\n      if (currentParent) {\n        var child = {\n          type: 3,\n          text: text,\n          isComment: true\n        };\n        if (false) {}\n        currentParent.children.push(child);\n      }\n    }\n  });\n  return root\n}\n\nfunction processPre (el) {\n  if (getAndRemoveAttr(el, 'v-pre') != null) {\n    el.pre = true;\n  }\n}\n\nfunction processRawAttrs (el) {\n  var list = el.attrsList;\n  var len = list.length;\n  if (len) {\n    var attrs = el.attrs = new Array(len);\n    for (var i = 0; i < len; i++) {\n      attrs[i] = {\n        name: list[i].name,\n        value: JSON.stringify(list[i].value)\n      };\n      if (list[i].start != null) {\n        attrs[i].start = list[i].start;\n        attrs[i].end = list[i].end;\n      }\n    }\n  } else if (!el.pre) {\n    // non root node in pre blocks with no attributes\n    el.plain = true;\n  }\n}\n\nfunction processElement (\n  element,\n  options\n) {\n  processKey(element);\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  );\n\n  processRef(element);\n  processSlotContent(element);\n  processSlotOutlet(element);\n  processComponent(element);\n  for (var i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element;\n  }\n  processAttrs(element);\n  return element\n}\n\nfunction processKey (el) {\n  var exp = getBindingAttr(el, 'key');\n  if (exp) {\n    if (false) { var parent, iterator; }\n    el.key = exp;\n  }\n}\n\nfunction processRef (el) {\n  var ref = getBindingAttr(el, 'ref');\n  if (ref) {\n    el.ref = ref;\n    el.refInFor = checkInFor(el);\n  }\n}\n\nfunction processFor (el) {\n  var exp;\n  if ((exp = getAndRemoveAttr(el, 'v-for'))) {\n    var res = parseFor(exp);\n    if (res) {\n      extend(el, res);\n    } else if (false) {}\n  }\n}\n\n\n\nfunction parseFor (exp) {\n  var inMatch = exp.match(forAliasRE);\n  if (!inMatch) { return }\n  var res = {};\n  res.for = inMatch[2].trim();\n  var alias = inMatch[1].trim().replace(stripParensRE, '');\n  var iteratorMatch = alias.match(forIteratorRE);\n  if (iteratorMatch) {\n    res.alias = alias.replace(forIteratorRE, '').trim();\n    res.iterator1 = iteratorMatch[1].trim();\n    if (iteratorMatch[2]) {\n      res.iterator2 = iteratorMatch[2].trim();\n    }\n  } else {\n    res.alias = alias;\n  }\n  return res\n}\n\nfunction processIf (el) {\n  var exp = getAndRemoveAttr(el, 'v-if');\n  if (exp) {\n    el.if = exp;\n    addIfCondition(el, {\n      exp: exp,\n      block: el\n    });\n  } else {\n    if (getAndRemoveAttr(el, 'v-else') != null) {\n      el.else = true;\n    }\n    var elseif = getAndRemoveAttr(el, 'v-else-if');\n    if (elseif) {\n      el.elseif = elseif;\n    }\n  }\n}\n\nfunction processIfConditions (el, parent) {\n  var prev = findPrevElement(parent.children);\n  if (prev && prev.if) {\n    addIfCondition(prev, {\n      exp: el.elseif,\n      block: el\n    });\n  } else if (false) {}\n}\n\nfunction findPrevElement (children) {\n  var i = children.length;\n  while (i--) {\n    if (children[i].type === 1) {\n      return children[i]\n    } else {\n      if (false) {}\n      children.pop();\n    }\n  }\n}\n\nfunction addIfCondition (el, condition) {\n  if (!el.ifConditions) {\n    el.ifConditions = [];\n  }\n  el.ifConditions.push(condition);\n}\n\nfunction processOnce (el) {\n  var once$$1 = getAndRemoveAttr(el, 'v-once');\n  if (once$$1 != null) {\n    el.once = true;\n  }\n}\n\n// handle content being passed to a component as slot,\n// e.g. <template slot=\"xxx\">, <div slot-scope=\"xxx\">\nfunction processSlotContent (el) {\n  var slotScope;\n  if (el.tag === 'template') {\n    slotScope = getAndRemoveAttr(el, 'scope');\n    /* istanbul ignore if */\n    if (false) {}\n    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');\n  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {\n    /* istanbul ignore if */\n    if (false) {}\n    el.slotScope = slotScope;\n  }\n\n  // slot=\"xxx\"\n  var slotTarget = getBindingAttr(el, 'slot');\n  if (slotTarget) {\n    el.slotTarget = slotTarget === '\"\"' ? '\"default\"' : slotTarget;\n    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);\n    // preserve slot as an attribute for native shadow DOM compat\n    // only for non-scoped slots.\n    if (el.tag !== 'template' && !el.slotScope) {\n      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));\n    }\n  }\n\n  // 2.6 v-slot syntax\n  {\n    if (el.tag === 'template') {\n      // v-slot on <template>\n      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding) {\n        if (false) {}\n        var ref = getSlotName(slotBinding);\n        var name = ref.name;\n        var dynamic = ref.dynamic;\n        el.slotTarget = name;\n        el.slotTargetDynamic = dynamic;\n        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf\n      }\n    } else {\n      // v-slot on component, denotes default slot\n      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);\n      if (slotBinding$1) {\n        if (false) {}\n        // add the component's children to its default slot\n        var slots = el.scopedSlots || (el.scopedSlots = {});\n        var ref$1 = getSlotName(slotBinding$1);\n        var name$1 = ref$1.name;\n        var dynamic$1 = ref$1.dynamic;\n        var slotContainer = slots[name$1] = createASTElement('template', [], el);\n        slotContainer.slotTarget = name$1;\n        slotContainer.slotTargetDynamic = dynamic$1;\n        slotContainer.children = el.children.filter(function (c) {\n          if (!c.slotScope) {\n            c.parent = slotContainer;\n            return true\n          }\n        });\n        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;\n        // remove children as they are returned from scopedSlots now\n        el.children = [];\n        // mark el non-plain so data gets generated\n        el.plain = false;\n      }\n    }\n  }\n}\n\nfunction getSlotName (binding) {\n  var name = binding.name.replace(slotRE, '');\n  if (!name) {\n    if (binding.name[0] !== '#') {\n      name = 'default';\n    } else if (false) {}\n  }\n  return dynamicArgRE.test(name)\n    // dynamic [name]\n    ? { name: name.slice(1, -1), dynamic: true }\n    // static name\n    : { name: (\"\\\"\" + name + \"\\\"\"), dynamic: false }\n}\n\n// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name');\n    if (false) {}\n  }\n}\n\nfunction processComponent (el) {\n  var binding;\n  if ((binding = getBindingAttr(el, 'is'))) {\n    el.component = binding;\n  }\n  if (getAndRemoveAttr(el, 'inline-template') != null) {\n    el.inlineTemplate = true;\n  }\n}\n\nfunction processAttrs (el) {\n  var list = el.attrsList;\n  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;\n  for (i = 0, l = list.length; i < l; i++) {\n    name = rawName = list[i].name;\n    value = list[i].value;\n    if (dirRE.test(name)) {\n      // mark element as dynamic\n      el.hasBindings = true;\n      // modifiers\n      modifiers = parseModifiers(name.replace(dirRE, ''));\n      // support .foo shorthand syntax for the .prop modifier\n      if (modifiers) {\n        name = name.replace(modifierRE, '');\n      }\n      if (bindRE.test(name)) { // v-bind\n        name = name.replace(bindRE, '');\n        value = parseFilters(value);\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        if (\n          false\n        ) {}\n        if (modifiers) {\n          if (modifiers.prop && !isDynamic) {\n            name = camelize(name);\n            if (name === 'innerHtml') { name = 'innerHTML'; }\n          }\n          if (modifiers.camel && !isDynamic) {\n            name = camelize(name);\n          }\n          if (modifiers.sync) {\n            syncGen = genAssignmentCode(value, \"$event\");\n            if (!isDynamic) {\n              addHandler(\n                el,\n                (\"update:\" + (camelize(name))),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i]\n              );\n              if (hyphenate(name) !== camelize(name)) {\n                addHandler(\n                  el,\n                  (\"update:\" + (hyphenate(name))),\n                  syncGen,\n                  null,\n                  false,\n                  warn$2,\n                  list[i]\n                );\n              }\n            } else {\n              // handler w/ dynamic event name\n              addHandler(\n                el,\n                (\"\\\"update:\\\"+(\" + name + \")\"),\n                syncGen,\n                null,\n                false,\n                warn$2,\n                list[i],\n                true // dynamic\n              );\n            }\n          }\n        }\n        if ((modifiers && modifiers.prop) || (\n          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)\n        )) {\n          addProp(el, name, value, list[i], isDynamic);\n        } else {\n          addAttr(el, name, value, list[i], isDynamic);\n        }\n      } else if (onRE.test(name)) { // v-on\n        name = name.replace(onRE, '');\n        isDynamic = dynamicArgRE.test(name);\n        if (isDynamic) {\n          name = name.slice(1, -1);\n        }\n        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);\n      } else { // normal directives\n        name = name.replace(dirRE, '');\n        // parse arg\n        var argMatch = name.match(argRE);\n        var arg = argMatch && argMatch[1];\n        isDynamic = false;\n        if (arg) {\n          name = name.slice(0, -(arg.length + 1));\n          if (dynamicArgRE.test(arg)) {\n            arg = arg.slice(1, -1);\n            isDynamic = true;\n          }\n        }\n        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);\n        if (false) {}\n      }\n    } else {\n      // literal attribute\n      if (false) { var res; }\n      addAttr(el, name, JSON.stringify(value), list[i]);\n      // #6887 firefox doesn't update muted state if set via attribute\n      // even immediately after element creation\n      if (!el.component &&\n          name === 'muted' &&\n          platformMustUseProp(el.tag, el.attrsMap.type, name)) {\n        addProp(el, name, 'true', list[i]);\n      }\n    }\n  }\n}\n\nfunction checkInFor (el) {\n  var parent = el;\n  while (parent) {\n    if (parent.for !== undefined) {\n      return true\n    }\n    parent = parent.parent;\n  }\n  return false\n}\n\nfunction parseModifiers (name) {\n  var match = name.match(modifierRE);\n  if (match) {\n    var ret = {};\n    match.forEach(function (m) { ret[m.slice(1)] = true; });\n    return ret\n  }\n}\n\nfunction makeAttrsMap (attrs) {\n  var map = {};\n  for (var i = 0, l = attrs.length; i < l; i++) {\n    if (\n      false\n    ) {}\n    map[attrs[i].name] = attrs[i].value;\n  }\n  return map\n}\n\n// for script (e.g. type=\"x/template\") or style, do not decode content\nfunction isTextTag (el) {\n  return el.tag === 'script' || el.tag === 'style'\n}\n\nfunction isForbiddenTag (el) {\n  return (\n    el.tag === 'style' ||\n    (el.tag === 'script' && (\n      !el.attrsMap.type ||\n      el.attrsMap.type === 'text/javascript'\n    ))\n  )\n}\n\nvar ieNSBug = /^xmlns:NS\\d+/;\nvar ieNSPrefix = /^NS\\d+:/;\n\n/* istanbul ignore next */\nfunction guardIESVGBug (attrs) {\n  var res = [];\n  for (var i = 0; i < attrs.length; i++) {\n    var attr = attrs[i];\n    if (!ieNSBug.test(attr.name)) {\n      attr.name = attr.name.replace(ieNSPrefix, '');\n      res.push(attr);\n    }\n  }\n  return res\n}\n\nfunction checkForAliasModel (el, value) {\n  var _el = el;\n  while (_el) {\n    if (_el.for && _el.alias === value) {\n      warn$2(\n        \"<\" + (el.tag) + \" v-model=\\\"\" + value + \"\\\">: \" +\n        \"You are binding v-model directly to a v-for iteration alias. \" +\n        \"This will not be able to modify the v-for source array because \" +\n        \"writing to the alias is like modifying a function local variable. \" +\n        \"Consider using an array of objects and use v-model on an object property instead.\",\n        el.rawAttrsMap['v-model']\n      );\n    }\n    _el = _el.parent;\n  }\n}\n\n/*  */\n\nfunction preTransformNode (el, options) {\n  if (el.tag === 'input') {\n    var map = el.attrsMap;\n    if (!map['v-model']) {\n      return\n    }\n\n    var typeBinding;\n    if (map[':type'] || map['v-bind:type']) {\n      typeBinding = getBindingAttr(el, 'type');\n    }\n    if (!map.type && !typeBinding && map['v-bind']) {\n      typeBinding = \"(\" + (map['v-bind']) + \").type\";\n    }\n\n    if (typeBinding) {\n      var ifCondition = getAndRemoveAttr(el, 'v-if', true);\n      var ifConditionExtra = ifCondition ? (\"&&(\" + ifCondition + \")\") : \"\";\n      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;\n      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);\n      // 1. checkbox\n      var branch0 = cloneASTElement(el);\n      // process for on the main node\n      processFor(branch0);\n      addRawAttr(branch0, 'type', 'checkbox');\n      processElement(branch0, options);\n      branch0.processed = true; // prevent it from double-processed\n      branch0.if = \"(\" + typeBinding + \")==='checkbox'\" + ifConditionExtra;\n      addIfCondition(branch0, {\n        exp: branch0.if,\n        block: branch0\n      });\n      // 2. add radio else-if condition\n      var branch1 = cloneASTElement(el);\n      getAndRemoveAttr(branch1, 'v-for', true);\n      addRawAttr(branch1, 'type', 'radio');\n      processElement(branch1, options);\n      addIfCondition(branch0, {\n        exp: \"(\" + typeBinding + \")==='radio'\" + ifConditionExtra,\n        block: branch1\n      });\n      // 3. other\n      var branch2 = cloneASTElement(el);\n      getAndRemoveAttr(branch2, 'v-for', true);\n      addRawAttr(branch2, ':type', typeBinding);\n      processElement(branch2, options);\n      addIfCondition(branch0, {\n        exp: ifCondition,\n        block: branch2\n      });\n\n      if (hasElse) {\n        branch0.else = true;\n      } else if (elseIfCondition) {\n        branch0.elseif = elseIfCondition;\n      }\n\n      return branch0\n    }\n  }\n}\n\nfunction cloneASTElement (el) {\n  return createASTElement(el.tag, el.attrsList.slice(), el.parent)\n}\n\nvar model$1 = {\n  preTransformNode: preTransformNode\n};\n\nvar modules$1 = [\n  klass$1,\n  style$1,\n  model$1\n];\n\n/*  */\n\nfunction text (el, dir) {\n  if (dir.value) {\n    addProp(el, 'textContent', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\n/*  */\n\nfunction html (el, dir) {\n  if (dir.value) {\n    addProp(el, 'innerHTML', (\"_s(\" + (dir.value) + \")\"), dir);\n  }\n}\n\nvar directives$1 = {\n  model: model,\n  text: text,\n  html: html\n};\n\n/*  */\n\nvar baseOptions = {\n  expectHTML: true,\n  modules: modules$1,\n  directives: directives$1,\n  isPreTag: isPreTag,\n  isUnaryTag: isUnaryTag,\n  mustUseProp: mustUseProp,\n  canBeLeftOpenTag: canBeLeftOpenTag,\n  isReservedTag: isReservedTag,\n  getTagNamespace: getTagNamespace,\n  staticKeys: genStaticKeys(modules$1)\n};\n\n/*  */\n\nvar isStaticKey;\nvar isPlatformReservedTag;\n\nvar genStaticKeysCached = cached(genStaticKeys$1);\n\n/**\n * Goal of the optimizer: walk the generated template AST tree\n * and detect sub-trees that are purely static, i.e. parts of\n * the DOM that never needs to change.\n *\n * Once we detect these sub-trees, we can:\n *\n * 1. Hoist them into constants, so that we no longer need to\n *    create fresh nodes for them on each re-render;\n * 2. Completely skip them in the patching process.\n */\nfunction optimize (root, options) {\n  if (!root) { return }\n  isStaticKey = genStaticKeysCached(options.staticKeys || '');\n  isPlatformReservedTag = options.isReservedTag || no;\n  // first pass: mark all non-static nodes.\n  markStatic$1(root);\n  // second pass: mark static roots.\n  markStaticRoots(root, false);\n}\n\nfunction genStaticKeys$1 (keys) {\n  return makeMap(\n    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +\n    (keys ? ',' + keys : '')\n  )\n}\n\nfunction markStatic$1 (node) {\n  node.static = isStatic(node);\n  if (node.type === 1) {\n    // do not make component slot content static. this avoids\n    // 1. components not able to mutate slot nodes\n    // 2. static slot content fails for hot-reloading\n    if (\n      !isPlatformReservedTag(node.tag) &&\n      node.tag !== 'slot' &&\n      node.attrsMap['inline-template'] == null\n    ) {\n      return\n    }\n    for (var i = 0, l = node.children.length; i < l; i++) {\n      var child = node.children[i];\n      markStatic$1(child);\n      if (!child.static) {\n        node.static = false;\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        var block = node.ifConditions[i$1].block;\n        markStatic$1(block);\n        if (!block.static) {\n          node.static = false;\n        }\n      }\n    }\n  }\n}\n\nfunction markStaticRoots (node, isInFor) {\n  if (node.type === 1) {\n    if (node.static || node.once) {\n      node.staticInFor = isInFor;\n    }\n    // For a node to qualify as a static root, it should have children that\n    // are not just static text. Otherwise the cost of hoisting out will\n    // outweigh the benefits and it's better off to just always render it fresh.\n    if (node.static && node.children.length && !(\n      node.children.length === 1 &&\n      node.children[0].type === 3\n    )) {\n      node.staticRoot = true;\n      return\n    } else {\n      node.staticRoot = false;\n    }\n    if (node.children) {\n      for (var i = 0, l = node.children.length; i < l; i++) {\n        markStaticRoots(node.children[i], isInFor || !!node.for);\n      }\n    }\n    if (node.ifConditions) {\n      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {\n        markStaticRoots(node.ifConditions[i$1].block, isInFor);\n      }\n    }\n  }\n}\n\nfunction isStatic (node) {\n  if (node.type === 2) { // expression\n    return false\n  }\n  if (node.type === 3) { // text\n    return true\n  }\n  return !!(node.pre || (\n    !node.hasBindings && // no dynamic bindings\n    !node.if && !node.for && // not v-if or v-for or v-else\n    !isBuiltInTag(node.tag) && // not a built-in\n    isPlatformReservedTag(node.tag) && // not a component\n    !isDirectChildOfTemplateFor(node) &&\n    Object.keys(node).every(isStaticKey)\n  ))\n}\n\nfunction isDirectChildOfTemplateFor (node) {\n  while (node.parent) {\n    node = node.parent;\n    if (node.tag !== 'template') {\n      return false\n    }\n    if (node.for) {\n      return true\n    }\n  }\n  return false\n}\n\n/*  */\n\nvar fnExpRE = /^([\\w$_]+|\\([^)]*?\\))\\s*=>|^function(?:\\s+[\\w$]+)?\\s*\\(/;\nvar fnInvokeRE = /\\([^)]*?\\);*$/;\nvar simplePathRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['[^']*?']|\\[\"[^\"]*?\"]|\\[\\d+]|\\[[A-Za-z_$][\\w$]*])*$/;\n\n// KeyboardEvent.keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40,\n  'delete': [8, 46]\n};\n\n// KeyboardEvent.key aliases\nvar keyNames = {\n  // #7880: IE11 and Edge use `Esc` for Escape key name.\n  esc: ['Esc', 'Escape'],\n  tab: 'Tab',\n  enter: 'Enter',\n  // #9112: IE11 uses `Spacebar` for Space key name.\n  space: [' ', 'Spacebar'],\n  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.\n  up: ['Up', 'ArrowUp'],\n  left: ['Left', 'ArrowLeft'],\n  right: ['Right', 'ArrowRight'],\n  down: ['Down', 'ArrowDown'],\n  // #9112: IE11 uses `Del` for Delete key name.\n  'delete': ['Backspace', 'Delete', 'Del']\n};\n\n// #4868: modifiers that prevent the execution of the listener\n// need to explicitly return null so that we can determine whether to remove\n// the listener for .once\nvar genGuard = function (condition) { return (\"if(\" + condition + \")return null;\"); };\n\nvar modifierCode = {\n  stop: '$event.stopPropagation();',\n  prevent: '$event.preventDefault();',\n  self: genGuard(\"$event.target !== $event.currentTarget\"),\n  ctrl: genGuard(\"!$event.ctrlKey\"),\n  shift: genGuard(\"!$event.shiftKey\"),\n  alt: genGuard(\"!$event.altKey\"),\n  meta: genGuard(\"!$event.metaKey\"),\n  left: genGuard(\"'button' in $event && $event.button !== 0\"),\n  middle: genGuard(\"'button' in $event && $event.button !== 1\"),\n  right: genGuard(\"'button' in $event && $event.button !== 2\")\n};\n\nfunction genHandlers (\n  events,\n  isNative\n) {\n  var prefix = isNative ? 'nativeOn:' : 'on:';\n  var staticHandlers = \"\";\n  var dynamicHandlers = \"\";\n  for (var name in events) {\n    var handlerCode = genHandler(events[name]);\n    if (events[name] && events[name].dynamic) {\n      dynamicHandlers += name + \",\" + handlerCode + \",\";\n    } else {\n      staticHandlers += \"\\\"\" + name + \"\\\":\" + handlerCode + \",\";\n    }\n  }\n  staticHandlers = \"{\" + (staticHandlers.slice(0, -1)) + \"}\";\n  if (dynamicHandlers) {\n    return prefix + \"_d(\" + staticHandlers + \",[\" + (dynamicHandlers.slice(0, -1)) + \"])\"\n  } else {\n    return prefix + staticHandlers\n  }\n}\n\nfunction genHandler (handler) {\n  if (!handler) {\n    return 'function(){}'\n  }\n\n  if (Array.isArray(handler)) {\n    return (\"[\" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + \"]\")\n  }\n\n  var isMethodPath = simplePathRE.test(handler.value);\n  var isFunctionExpression = fnExpRE.test(handler.value);\n  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));\n\n  if (!handler.modifiers) {\n    if (isMethodPath || isFunctionExpression) {\n      return handler.value\n    }\n    return (\"function($event){\" + (isFunctionInvocation ? (\"return \" + (handler.value)) : handler.value) + \"}\") // inline statement\n  } else {\n    var code = '';\n    var genModifierCode = '';\n    var keys = [];\n    for (var key in handler.modifiers) {\n      if (modifierCode[key]) {\n        genModifierCode += modifierCode[key];\n        // left/right\n        if (keyCodes[key]) {\n          keys.push(key);\n        }\n      } else if (key === 'exact') {\n        var modifiers = (handler.modifiers);\n        genModifierCode += genGuard(\n          ['ctrl', 'shift', 'alt', 'meta']\n            .filter(function (keyModifier) { return !modifiers[keyModifier]; })\n            .map(function (keyModifier) { return (\"$event.\" + keyModifier + \"Key\"); })\n            .join('||')\n        );\n      } else {\n        keys.push(key);\n      }\n    }\n    if (keys.length) {\n      code += genKeyFilter(keys);\n    }\n    // Make sure modifiers like prevent and stop get executed after key filtering\n    if (genModifierCode) {\n      code += genModifierCode;\n    }\n    var handlerCode = isMethodPath\n      ? (\"return \" + (handler.value) + \"($event)\")\n      : isFunctionExpression\n        ? (\"return (\" + (handler.value) + \")($event)\")\n        : isFunctionInvocation\n          ? (\"return \" + (handler.value))\n          : handler.value;\n    return (\"function($event){\" + code + handlerCode + \"}\")\n  }\n}\n\nfunction genKeyFilter (keys) {\n  return (\n    // make sure the key filters only apply to KeyboardEvents\n    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake\n    // key events that do not have keyCode property...\n    \"if(!$event.type.indexOf('key')&&\" +\n    (keys.map(genFilterCode).join('&&')) + \")return null;\"\n  )\n}\n\nfunction genFilterCode (key) {\n  var keyVal = parseInt(key, 10);\n  if (keyVal) {\n    return (\"$event.keyCode!==\" + keyVal)\n  }\n  var keyCode = keyCodes[key];\n  var keyName = keyNames[key];\n  return (\n    \"_k($event.keyCode,\" +\n    (JSON.stringify(key)) + \",\" +\n    (JSON.stringify(keyCode)) + \",\" +\n    \"$event.key,\" +\n    \"\" + (JSON.stringify(keyName)) +\n    \")\"\n  )\n}\n\n/*  */\n\nfunction on (el, dir) {\n  if (false) {}\n  el.wrapListeners = function (code) { return (\"_g(\" + code + \",\" + (dir.value) + \")\"); };\n}\n\n/*  */\n\nfunction bind$1 (el, dir) {\n  el.wrapData = function (code) {\n    return (\"_b(\" + code + \",'\" + (el.tag) + \"',\" + (dir.value) + \",\" + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + \")\")\n  };\n}\n\n/*  */\n\nvar baseDirectives = {\n  on: on,\n  bind: bind$1,\n  cloak: noop\n};\n\n/*  */\n\n\n\n\n\nvar CodegenState = function CodegenState (options) {\n  this.options = options;\n  this.warn = options.warn || baseWarn;\n  this.transforms = pluckModuleFunction(options.modules, 'transformCode');\n  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');\n  this.directives = extend(extend({}, baseDirectives), options.directives);\n  var isReservedTag = options.isReservedTag || no;\n  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };\n  this.onceId = 0;\n  this.staticRenderFns = [];\n  this.pre = false;\n};\n\n\n\nfunction generate (\n  ast,\n  options\n) {\n  var state = new CodegenState(options);\n  var code = ast ? genElement(ast, state) : '_c(\"div\")';\n  return {\n    render: (\"with(this){return \" + code + \"}\"),\n    staticRenderFns: state.staticRenderFns\n  }\n}\n\nfunction genElement (el, state) {\n  if (el.parent) {\n    el.pre = el.pre || el.parent.pre;\n  }\n\n  if (el.staticRoot && !el.staticProcessed) {\n    return genStatic(el, state)\n  } else if (el.once && !el.onceProcessed) {\n    return genOnce(el, state)\n  } else if (el.for && !el.forProcessed) {\n    return genFor(el, state)\n  } else if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {\n    return genChildren(el, state) || 'void 0'\n  } else if (el.tag === 'slot') {\n    return genSlot(el, state)\n  } else {\n    // component or element\n    var code;\n    if (el.component) {\n      code = genComponent(el.component, el, state);\n    } else {\n      var data;\n      if (!el.plain || (el.pre && state.maybeComponent(el))) {\n        data = genData$2(el, state);\n      }\n\n      var children = el.inlineTemplate ? null : genChildren(el, state, true);\n      code = \"_c('\" + (el.tag) + \"'\" + (data ? (\",\" + data) : '') + (children ? (\",\" + children) : '') + \")\";\n    }\n    // module transforms\n    for (var i = 0; i < state.transforms.length; i++) {\n      code = state.transforms[i](el, code);\n    }\n    return code\n  }\n}\n\n// hoist static sub-trees out\nfunction genStatic (el, state) {\n  el.staticProcessed = true;\n  // Some elements (templates) need to behave differently inside of a v-pre\n  // node.  All pre nodes are static roots, so we can use this as a location to\n  // wrap a state change and reset it upon exiting the pre node.\n  var originalPreState = state.pre;\n  if (el.pre) {\n    state.pre = el.pre;\n  }\n  state.staticRenderFns.push((\"with(this){return \" + (genElement(el, state)) + \"}\"));\n  state.pre = originalPreState;\n  return (\"_m(\" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + \")\")\n}\n\n// v-once\nfunction genOnce (el, state) {\n  el.onceProcessed = true;\n  if (el.if && !el.ifProcessed) {\n    return genIf(el, state)\n  } else if (el.staticInFor) {\n    var key = '';\n    var parent = el.parent;\n    while (parent) {\n      if (parent.for) {\n        key = parent.key;\n        break\n      }\n      parent = parent.parent;\n    }\n    if (!key) {\n       false && false;\n      return genElement(el, state)\n    }\n    return (\"_o(\" + (genElement(el, state)) + \",\" + (state.onceId++) + \",\" + key + \")\")\n  } else {\n    return genStatic(el, state)\n  }\n}\n\nfunction genIf (\n  el,\n  state,\n  altGen,\n  altEmpty\n) {\n  el.ifProcessed = true; // avoid recursion\n  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)\n}\n\nfunction genIfConditions (\n  conditions,\n  state,\n  altGen,\n  altEmpty\n) {\n  if (!conditions.length) {\n    return altEmpty || '_e()'\n  }\n\n  var condition = conditions.shift();\n  if (condition.exp) {\n    return (\"(\" + (condition.exp) + \")?\" + (genTernaryExp(condition.block)) + \":\" + (genIfConditions(conditions, state, altGen, altEmpty)))\n  } else {\n    return (\"\" + (genTernaryExp(condition.block)))\n  }\n\n  // v-if with v-once should generate code like (a)?_m(0):_m(1)\n  function genTernaryExp (el) {\n    return altGen\n      ? altGen(el, state)\n      : el.once\n        ? genOnce(el, state)\n        : genElement(el, state)\n  }\n}\n\nfunction genFor (\n  el,\n  state,\n  altGen,\n  altHelper\n) {\n  var exp = el.for;\n  var alias = el.alias;\n  var iterator1 = el.iterator1 ? (\",\" + (el.iterator1)) : '';\n  var iterator2 = el.iterator2 ? (\",\" + (el.iterator2)) : '';\n\n  if (false\n  ) {}\n\n  el.forProcessed = true; // avoid recursion\n  return (altHelper || '_l') + \"((\" + exp + \"),\" +\n    \"function(\" + alias + iterator1 + iterator2 + \"){\" +\n      \"return \" + ((altGen || genElement)(el, state)) +\n    '})'\n}\n\nfunction genData$2 (el, state) {\n  var data = '{';\n\n  // directives first.\n  // directives may mutate the el's other properties before they are generated.\n  var dirs = genDirectives(el, state);\n  if (dirs) { data += dirs + ','; }\n\n  // key\n  if (el.key) {\n    data += \"key:\" + (el.key) + \",\";\n  }\n  // ref\n  if (el.ref) {\n    data += \"ref:\" + (el.ref) + \",\";\n  }\n  if (el.refInFor) {\n    data += \"refInFor:true,\";\n  }\n  // pre\n  if (el.pre) {\n    data += \"pre:true,\";\n  }\n  // record original tag name for components using \"is\" attribute\n  if (el.component) {\n    data += \"tag:\\\"\" + (el.tag) + \"\\\",\";\n  }\n  // module data generation functions\n  for (var i = 0; i < state.dataGenFns.length; i++) {\n    data += state.dataGenFns[i](el);\n  }\n  // attributes\n  if (el.attrs) {\n    data += \"attrs:\" + (genProps(el.attrs)) + \",\";\n  }\n  // DOM props\n  if (el.props) {\n    data += \"domProps:\" + (genProps(el.props)) + \",\";\n  }\n  // event handlers\n  if (el.events) {\n    data += (genHandlers(el.events, false)) + \",\";\n  }\n  if (el.nativeEvents) {\n    data += (genHandlers(el.nativeEvents, true)) + \",\";\n  }\n  // slot target\n  // only for non-scoped slots\n  if (el.slotTarget && !el.slotScope) {\n    data += \"slot:\" + (el.slotTarget) + \",\";\n  }\n  // scoped slots\n  if (el.scopedSlots) {\n    data += (genScopedSlots(el, el.scopedSlots, state)) + \",\";\n  }\n  // component v-model\n  if (el.model) {\n    data += \"model:{value:\" + (el.model.value) + \",callback:\" + (el.model.callback) + \",expression:\" + (el.model.expression) + \"},\";\n  }\n  // inline-template\n  if (el.inlineTemplate) {\n    var inlineTemplate = genInlineTemplate(el, state);\n    if (inlineTemplate) {\n      data += inlineTemplate + \",\";\n    }\n  }\n  data = data.replace(/,$/, '') + '}';\n  // v-bind dynamic argument wrap\n  // v-bind with dynamic arguments must be applied using the same v-bind object\n  // merge helper so that class/style/mustUseProp attrs are handled correctly.\n  if (el.dynamicAttrs) {\n    data = \"_b(\" + data + \",\\\"\" + (el.tag) + \"\\\",\" + (genProps(el.dynamicAttrs)) + \")\";\n  }\n  // v-bind data wrap\n  if (el.wrapData) {\n    data = el.wrapData(data);\n  }\n  // v-on data wrap\n  if (el.wrapListeners) {\n    data = el.wrapListeners(data);\n  }\n  return data\n}\n\nfunction genDirectives (el, state) {\n  var dirs = el.directives;\n  if (!dirs) { return }\n  var res = 'directives:[';\n  var hasRuntime = false;\n  var i, l, dir, needRuntime;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    dir = dirs[i];\n    needRuntime = true;\n    var gen = state.directives[dir.name];\n    if (gen) {\n      // compile-time directive that manipulates AST.\n      // returns true if it also needs a runtime counterpart.\n      needRuntime = !!gen(el, dir, state.warn);\n    }\n    if (needRuntime) {\n      hasRuntime = true;\n      res += \"{name:\\\"\" + (dir.name) + \"\\\",rawName:\\\"\" + (dir.rawName) + \"\\\"\" + (dir.value ? (\",value:(\" + (dir.value) + \"),expression:\" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (\",arg:\" + (dir.isDynamicArg ? dir.arg : (\"\\\"\" + (dir.arg) + \"\\\"\"))) : '') + (dir.modifiers ? (\",modifiers:\" + (JSON.stringify(dir.modifiers))) : '') + \"},\";\n    }\n  }\n  if (hasRuntime) {\n    return res.slice(0, -1) + ']'\n  }\n}\n\nfunction genInlineTemplate (el, state) {\n  var ast = el.children[0];\n  if (false) {}\n  if (ast && ast.type === 1) {\n    var inlineRenderFns = generate(ast, state.options);\n    return (\"inlineTemplate:{render:function(){\" + (inlineRenderFns.render) + \"},staticRenderFns:[\" + (inlineRenderFns.staticRenderFns.map(function (code) { return (\"function(){\" + code + \"}\"); }).join(',')) + \"]}\")\n  }\n}\n\nfunction genScopedSlots (\n  el,\n  slots,\n  state\n) {\n  // by default scoped slots are considered \"stable\", this allows child\n  // components with only scoped slots to skip forced updates from parent.\n  // but in some cases we have to bail-out of this optimization\n  // for example if the slot contains dynamic names, has v-if or v-for on them...\n  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {\n    var slot = slots[key];\n    return (\n      slot.slotTargetDynamic ||\n      slot.if ||\n      slot.for ||\n      containsSlotChild(slot) // is passing down slot from parent which may be dynamic\n    )\n  });\n\n  // #9534: if a component with scoped slots is inside a conditional branch,\n  // it's possible for the same component to be reused but with different\n  // compiled slot content. To avoid that, we generate a unique key based on\n  // the generated code of all the slot contents.\n  var needsKey = !!el.if;\n\n  // OR when it is inside another scoped slot or v-for (the reactivity may be\n  // disconnected due to the intermediate scope variable)\n  // #9438, #9506\n  // TODO: this can be further optimized by properly analyzing in-scope bindings\n  // and skip force updating ones that do not actually use scope variables.\n  if (!needsForceUpdate) {\n    var parent = el.parent;\n    while (parent) {\n      if (\n        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||\n        parent.for\n      ) {\n        needsForceUpdate = true;\n        break\n      }\n      if (parent.if) {\n        needsKey = true;\n      }\n      parent = parent.parent;\n    }\n  }\n\n  var generatedSlots = Object.keys(slots)\n    .map(function (key) { return genScopedSlot(slots[key], state); })\n    .join(',');\n\n  return (\"scopedSlots:_u([\" + generatedSlots + \"]\" + (needsForceUpdate ? \",null,true\" : \"\") + (!needsForceUpdate && needsKey ? (\",null,false,\" + (hash(generatedSlots))) : \"\") + \")\")\n}\n\nfunction hash(str) {\n  var hash = 5381;\n  var i = str.length;\n  while(i) {\n    hash = (hash * 33) ^ str.charCodeAt(--i);\n  }\n  return hash >>> 0\n}\n\nfunction containsSlotChild (el) {\n  if (el.type === 1) {\n    if (el.tag === 'slot') {\n      return true\n    }\n    return el.children.some(containsSlotChild)\n  }\n  return false\n}\n\nfunction genScopedSlot (\n  el,\n  state\n) {\n  var isLegacySyntax = el.attrsMap['slot-scope'];\n  if (el.if && !el.ifProcessed && !isLegacySyntax) {\n    return genIf(el, state, genScopedSlot, \"null\")\n  }\n  if (el.for && !el.forProcessed) {\n    return genFor(el, state, genScopedSlot)\n  }\n  var slotScope = el.slotScope === emptySlotScopeToken\n    ? \"\"\n    : String(el.slotScope);\n  var fn = \"function(\" + slotScope + \"){\" +\n    \"return \" + (el.tag === 'template'\n      ? el.if && isLegacySyntax\n        ? (\"(\" + (el.if) + \")?\" + (genChildren(el, state) || 'undefined') + \":undefined\")\n        : genChildren(el, state) || 'undefined'\n      : genElement(el, state)) + \"}\";\n  // reverse proxy v-slot without scope on this.$slots\n  var reverseProxy = slotScope ? \"\" : \",proxy:true\";\n  return (\"{key:\" + (el.slotTarget || \"\\\"default\\\"\") + \",fn:\" + fn + reverseProxy + \"}\")\n}\n\nfunction genChildren (\n  el,\n  state,\n  checkSkip,\n  altGenElement,\n  altGenNode\n) {\n  var children = el.children;\n  if (children.length) {\n    var el$1 = children[0];\n    // optimize single v-for\n    if (children.length === 1 &&\n      el$1.for &&\n      el$1.tag !== 'template' &&\n      el$1.tag !== 'slot'\n    ) {\n      var normalizationType = checkSkip\n        ? state.maybeComponent(el$1) ? \",1\" : \",0\"\n        : \"\";\n      return (\"\" + ((altGenElement || genElement)(el$1, state)) + normalizationType)\n    }\n    var normalizationType$1 = checkSkip\n      ? getNormalizationType(children, state.maybeComponent)\n      : 0;\n    var gen = altGenNode || genNode;\n    return (\"[\" + (children.map(function (c) { return gen(c, state); }).join(',')) + \"]\" + (normalizationType$1 ? (\",\" + normalizationType$1) : ''))\n  }\n}\n\n// determine the normalization needed for the children array.\n// 0: no normalization needed\n// 1: simple normalization needed (possible 1-level deep nested array)\n// 2: full normalization needed\nfunction getNormalizationType (\n  children,\n  maybeComponent\n) {\n  var res = 0;\n  for (var i = 0; i < children.length; i++) {\n    var el = children[i];\n    if (el.type !== 1) {\n      continue\n    }\n    if (needsNormalization(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {\n      res = 2;\n      break\n    }\n    if (maybeComponent(el) ||\n        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {\n      res = 1;\n    }\n  }\n  return res\n}\n\nfunction needsNormalization (el) {\n  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'\n}\n\nfunction genNode (node, state) {\n  if (node.type === 1) {\n    return genElement(node, state)\n  } else if (node.type === 3 && node.isComment) {\n    return genComment(node)\n  } else {\n    return genText(node)\n  }\n}\n\nfunction genText (text) {\n  return (\"_v(\" + (text.type === 2\n    ? text.expression // no need for () because already wrapped in _s()\n    : transformSpecialNewlines(JSON.stringify(text.text))) + \")\")\n}\n\nfunction genComment (comment) {\n  return (\"_e(\" + (JSON.stringify(comment.text)) + \")\")\n}\n\nfunction genSlot (el, state) {\n  var slotName = el.slotName || '\"default\"';\n  var children = genChildren(el, state);\n  var res = \"_t(\" + slotName + (children ? (\",\" + children) : '');\n  var attrs = el.attrs || el.dynamicAttrs\n    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({\n        // slot props are camelized\n        name: camelize(attr.name),\n        value: attr.value,\n        dynamic: attr.dynamic\n      }); }))\n    : null;\n  var bind$$1 = el.attrsMap['v-bind'];\n  if ((attrs || bind$$1) && !children) {\n    res += \",null\";\n  }\n  if (attrs) {\n    res += \",\" + attrs;\n  }\n  if (bind$$1) {\n    res += (attrs ? '' : ',null') + \",\" + bind$$1;\n  }\n  return res + ')'\n}\n\n// componentName is el.component, take it as argument to shun flow's pessimistic refinement\nfunction genComponent (\n  componentName,\n  el,\n  state\n) {\n  var children = el.inlineTemplate ? null : genChildren(el, state, true);\n  return (\"_c(\" + componentName + \",\" + (genData$2(el, state)) + (children ? (\",\" + children) : '') + \")\")\n}\n\nfunction genProps (props) {\n  var staticProps = \"\";\n  var dynamicProps = \"\";\n  for (var i = 0; i < props.length; i++) {\n    var prop = props[i];\n    var value = transformSpecialNewlines(prop.value);\n    if (prop.dynamic) {\n      dynamicProps += (prop.name) + \",\" + value + \",\";\n    } else {\n      staticProps += \"\\\"\" + (prop.name) + \"\\\":\" + value + \",\";\n    }\n  }\n  staticProps = \"{\" + (staticProps.slice(0, -1)) + \"}\";\n  if (dynamicProps) {\n    return (\"_d(\" + staticProps + \",[\" + (dynamicProps.slice(0, -1)) + \"])\")\n  } else {\n    return staticProps\n  }\n}\n\n// #3895, #4268\nfunction transformSpecialNewlines (text) {\n  return text\n    .replace(/\\u2028/g, '\\\\u2028')\n    .replace(/\\u2029/g, '\\\\u2029')\n}\n\n/*  */\n\n\n\n// these keywords should not appear inside expressions, but operators like\n// typeof, instanceof and in are allowed\nvar prohibitedKeywordRE = new RegExp('\\\\b' + (\n  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +\n  'super,throw,while,yield,delete,export,import,return,switch,default,' +\n  'extends,finally,continue,debugger,function,arguments'\n).split(',').join('\\\\b|\\\\b') + '\\\\b');\n\n// these unary operators should not be used as property/method names\nvar unaryOperatorsRE = new RegExp('\\\\b' + (\n  'delete,typeof,void'\n).split(',').join('\\\\s*\\\\([^\\\\)]*\\\\)|\\\\b') + '\\\\s*\\\\([^\\\\)]*\\\\)');\n\n// strip strings in expressions\nvar stripStringRE = /'(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\]|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`/g;\n\n// detect problematic expressions in a template\nfunction detectErrors (ast, warn) {\n  if (ast) {\n    checkNode(ast, warn);\n  }\n}\n\nfunction checkNode (node, warn) {\n  if (node.type === 1) {\n    for (var name in node.attrsMap) {\n      if (dirRE.test(name)) {\n        var value = node.attrsMap[name];\n        if (value) {\n          var range = node.rawAttrsMap[name];\n          if (name === 'v-for') {\n            checkFor(node, (\"v-for=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (name === 'v-slot' || name[0] === '#') {\n            checkFunctionParameterExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else if (onRE.test(name)) {\n            checkEvent(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          } else {\n            checkExpression(value, (name + \"=\\\"\" + value + \"\\\"\"), warn, range);\n          }\n        }\n      }\n    }\n    if (node.children) {\n      for (var i = 0; i < node.children.length; i++) {\n        checkNode(node.children[i], warn);\n      }\n    }\n  } else if (node.type === 2) {\n    checkExpression(node.expression, node.text, warn, node);\n  }\n}\n\nfunction checkEvent (exp, text, warn, range) {\n  var stripped = exp.replace(stripStringRE, '');\n  var keywordMatch = stripped.match(unaryOperatorsRE);\n  if (keywordMatch && stripped.charAt(keywordMatch.index - 1) !== '$') {\n    warn(\n      \"avoid using JavaScript unary operator as property name: \" +\n      \"\\\"\" + (keywordMatch[0]) + \"\\\" in expression \" + (text.trim()),\n      range\n    );\n  }\n  checkExpression(exp, text, warn, range);\n}\n\nfunction checkFor (node, text, warn, range) {\n  checkExpression(node.for || '', text, warn, range);\n  checkIdentifier(node.alias, 'v-for alias', text, warn, range);\n  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);\n  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);\n}\n\nfunction checkIdentifier (\n  ident,\n  type,\n  text,\n  warn,\n  range\n) {\n  if (typeof ident === 'string') {\n    try {\n      new Function((\"var \" + ident + \"=_\"));\n    } catch (e) {\n      warn((\"invalid \" + type + \" \\\"\" + ident + \"\\\" in expression: \" + (text.trim())), range);\n    }\n  }\n}\n\nfunction checkExpression (exp, text, warn, range) {\n  try {\n    new Function((\"return \" + exp));\n  } catch (e) {\n    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);\n    if (keywordMatch) {\n      warn(\n        \"avoid using JavaScript keyword as property name: \" +\n        \"\\\"\" + (keywordMatch[0]) + \"\\\"\\n  Raw expression: \" + (text.trim()),\n        range\n      );\n    } else {\n      warn(\n        \"invalid expression: \" + (e.message) + \" in\\n\\n\" +\n        \"    \" + exp + \"\\n\\n\" +\n        \"  Raw expression: \" + (text.trim()) + \"\\n\",\n        range\n      );\n    }\n  }\n}\n\nfunction checkFunctionParameterExpression (exp, text, warn, range) {\n  try {\n    new Function(exp, '');\n  } catch (e) {\n    warn(\n      \"invalid function parameter expression: \" + (e.message) + \" in\\n\\n\" +\n      \"    \" + exp + \"\\n\\n\" +\n      \"  Raw expression: \" + (text.trim()) + \"\\n\",\n      range\n    );\n  }\n}\n\n/*  */\n\nvar range = 2;\n\nfunction generateCodeFrame (\n  source,\n  start,\n  end\n) {\n  if ( start === void 0 ) start = 0;\n  if ( end === void 0 ) end = source.length;\n\n  var lines = source.split(/\\r?\\n/);\n  var count = 0;\n  var res = [];\n  for (var i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n    if (count >= start) {\n      for (var j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) { continue }\n        res.push((\"\" + (j + 1) + (repeat$1(\" \", 3 - String(j + 1).length)) + \"|  \" + (lines[j])));\n        var lineLength = lines[j].length;\n        if (j === i) {\n          // push underline\n          var pad = start - (count - lineLength) + 1;\n          var length = end > count ? lineLength - pad : end - start;\n          res.push(\"   |  \" + repeat$1(\" \", pad) + repeat$1(\"^\", length));\n        } else if (j > i) {\n          if (end > count) {\n            var length$1 = Math.min(end - count, lineLength);\n            res.push(\"   |  \" + repeat$1(\"^\", length$1));\n          }\n          count += lineLength + 1;\n        }\n      }\n      break\n    }\n  }\n  return res.join('\\n')\n}\n\nfunction repeat$1 (str, n) {\n  var result = '';\n  if (n > 0) {\n    while (true) { // eslint-disable-line\n      if (n & 1) { result += str; }\n      n >>>= 1;\n      if (n <= 0) { break }\n      str += str;\n    }\n  }\n  return result\n}\n\n/*  */\n\n\n\nfunction createFunction (code, errors) {\n  try {\n    return new Function(code)\n  } catch (err) {\n    errors.push({ err: err, code: code });\n    return noop\n  }\n}\n\nfunction createCompileToFunctionFn (compile) {\n  var cache = Object.create(null);\n\n  return function compileToFunctions (\n    template,\n    options,\n    vm\n  ) {\n    options = extend({}, options);\n    var warn$$1 = options.warn || warn;\n    delete options.warn;\n\n    /* istanbul ignore if */\n    if (false) {}\n\n    // check cache\n    var key = options.delimiters\n      ? String(options.delimiters) + template\n      : template;\n    if (cache[key]) {\n      return cache[key]\n    }\n\n    // compile\n    var compiled = compile(template, options);\n\n    // check compilation errors/tips\n    if (false) {}\n\n    // turn code into functions\n    var res = {};\n    var fnGenErrors = [];\n    res.render = createFunction(compiled.render, fnGenErrors);\n    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {\n      return createFunction(code, fnGenErrors)\n    });\n\n    // check function generation errors.\n    // this should only happen if there is a bug in the compiler itself.\n    // mostly for codegen development use\n    /* istanbul ignore if */\n    if (false) {}\n\n    return (cache[key] = res)\n  }\n}\n\n/*  */\n\nfunction createCompilerCreator (baseCompile) {\n  return function createCompiler (baseOptions) {\n    function compile (\n      template,\n      options\n    ) {\n      var finalOptions = Object.create(baseOptions);\n      var errors = [];\n      var tips = [];\n\n      var warn = function (msg, range, tip) {\n        (tip ? tips : errors).push(msg);\n      };\n\n      if (options) {\n        if (false) { var leadingSpaceLength; }\n        // merge custom modules\n        if (options.modules) {\n          finalOptions.modules =\n            (baseOptions.modules || []).concat(options.modules);\n        }\n        // merge custom directives\n        if (options.directives) {\n          finalOptions.directives = extend(\n            Object.create(baseOptions.directives || null),\n            options.directives\n          );\n        }\n        // copy other options\n        for (var key in options) {\n          if (key !== 'modules' && key !== 'directives') {\n            finalOptions[key] = options[key];\n          }\n        }\n      }\n\n      finalOptions.warn = warn;\n\n      var compiled = baseCompile(template.trim(), finalOptions);\n      if (false) {}\n      compiled.errors = errors;\n      compiled.tips = tips;\n      return compiled\n    }\n\n    return {\n      compile: compile,\n      compileToFunctions: createCompileToFunctionFn(compile)\n    }\n  }\n}\n\n/*  */\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nvar createCompiler = createCompilerCreator(function baseCompile (\n  template,\n  options\n) {\n  var ast = parse(template.trim(), options);\n  if (options.optimize !== false) {\n    optimize(ast, options);\n  }\n  var code = generate(ast, options);\n  return {\n    ast: ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n});\n\n/*  */\n\nvar ref$1 = createCompiler(baseOptions);\nvar compile = ref$1.compile;\nvar compileToFunctions = ref$1.compileToFunctions;\n\n/*  */\n\n// check whether current browser encodes a char inside attribute values\nvar div;\nfunction getShouldDecode (href) {\n  div = div || document.createElement('div');\n  div.innerHTML = href ? \"<a href=\\\"\\n\\\"/>\" : \"<div a=\\\"\\n\\\"/>\";\n  return div.innerHTML.indexOf('&#10;') > 0\n}\n\n// #3663: IE encodes newlines inside attribute values while other browsers don't\nvar shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;\n// #6828: chrome encodes content in a[href]\nvar shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;\n\n/*  */\n\nvar idToTemplate = cached(function (id) {\n  var el = query(id);\n  return el && el.innerHTML\n});\n\nvar mount = Vue.prototype.$mount;\nVue.prototype.$mount = function (\n  el,\n  hydrating\n) {\n  el = el && query(el);\n\n  /* istanbul ignore if */\n  if (el === document.body || el === document.documentElement) {\n     false && false;\n    return this\n  }\n\n  var options = this.$options;\n  // resolve template/el and convert to render function\n  if (!options.render) {\n    var template = options.template;\n    if (template) {\n      if (typeof template === 'string') {\n        if (template.charAt(0) === '#') {\n          template = idToTemplate(template);\n          /* istanbul ignore if */\n          if (false) {}\n        }\n      } else if (template.nodeType) {\n        template = template.innerHTML;\n      } else {\n        if (false) {}\n        return this\n      }\n    } else if (el) {\n      template = getOuterHTML(el);\n    }\n    if (template) {\n      /* istanbul ignore if */\n      if (false) {}\n\n      var ref = compileToFunctions(template, {\n        outputSourceRange: \"production\" !== 'production',\n        shouldDecodeNewlines: shouldDecodeNewlines,\n        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,\n        delimiters: options.delimiters,\n        comments: options.comments\n      }, this);\n      var render = ref.render;\n      var staticRenderFns = ref.staticRenderFns;\n      options.render = render;\n      options.staticRenderFns = staticRenderFns;\n\n      /* istanbul ignore if */\n      if (false) {}\n    }\n  }\n  return mount.call(this, el, hydrating)\n};\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n */\nfunction getOuterHTML (el) {\n  if (el.outerHTML) {\n    return el.outerHTML\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML\n  }\n}\n\nVue.compile = compileToFunctions;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Vue);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(2).setImmediate))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n")},function(module,exports){eval("/**\n * MathQuill v0.10.1               http://mathquill.com\n * by Han, Jeanine, and Mary  maintainers@mathquill.com\n *\n * This Source Code Form is subject to the terms of the\n * Mozilla Public License, v. 2.0. If a copy of the MPL\n * was not distributed with this file, You can obtain\n * one at http://mozilla.org/MPL/2.0/.\n */\n\n(function() {\n\nvar jQuery = window.jQuery,\n  undefined,\n  mqCmdId = 'mathquill-command-id',\n  mqBlockId = 'mathquill-block-id',\n  min = Math.min,\n  max = Math.max;\n\nfunction noop() {}\n\n/**\n * A utility higher-order function that makes defining variadic\n * functions more convenient by letting you essentially define functions\n * with the last argument as a splat, i.e. the last argument \"gathers up\"\n * remaining arguments to the function:\n *   var doStuff = variadic(function(first, rest) { return rest; });\n *   doStuff(1, 2, 3); // => [2, 3]\n */\nvar __slice = [].slice;\nfunction variadic(fn) {\n  var numFixedArgs = fn.length - 1;\n  return function() {\n    var args = __slice.call(arguments, 0, numFixedArgs);\n    var varArg = __slice.call(arguments, numFixedArgs);\n    return fn.apply(this, args.concat([ varArg ]));\n  };\n}\n\n/**\n * A utility higher-order function that makes combining object-oriented\n * programming and functional programming techniques more convenient:\n * given a method name and any number of arguments to be bound, returns\n * a function that calls it's first argument's method of that name (if\n * it exists) with the bound arguments and any additional arguments that\n * are passed:\n *   var sendMethod = send('method', 1, 2);\n *   var obj = { method: function() { return Array.apply(this, arguments); } };\n *   sendMethod(obj, 3, 4); // => [1, 2, 3, 4]\n *   // or more specifically,\n *   var obj2 = { method: function(one, two, three) { return one*two + three; } };\n *   sendMethod(obj2, 3); // => 5\n *   sendMethod(obj2, 4); // => 6\n */\nvar send = variadic(function(method, args) {\n  return variadic(function(obj, moreArgs) {\n    if (method in obj) return obj[method].apply(obj, args.concat(moreArgs));\n  });\n});\n\n/**\n * A utility higher-order function that creates \"implicit iterators\"\n * from \"generators\": given a function that takes in a sole argument,\n * a \"yield_\" function, that calls \"yield_\" repeatedly with an object as\n * a sole argument (presumably objects being iterated over), returns\n * a function that calls it's first argument on each of those objects\n * (if the first argument is a function, it is called repeatedly with\n * each object as the first argument, otherwise it is stringified and\n * the method of that name is called on each object (if such a method\n * exists)), passing along all additional arguments:\n *   var a = [\n *     { method: function(list) { list.push(1); } },\n *     { method: function(list) { list.push(2); } },\n *     { method: function(list) { list.push(3); } }\n *   ];\n *   a.each = iterator(function(yield_) {\n *     for (var i in this) yield_(this[i]);\n *   });\n *   var list = [];\n *   a.each('method', list);\n *   list; // => [1, 2, 3]\n *   // Note that the for-in loop will yield 'each', but 'each' maps to\n *   // the function object created by iterator() which does not have a\n *   // .method() method, so that just fails silently.\n */\nfunction iterator(generator) {\n  return variadic(function(fn, args) {\n    if (typeof fn !== 'function') fn = send(fn);\n    var yield_ = function(obj) { return fn.apply(obj, [ obj ].concat(args)); };\n    return generator.call(this, yield_);\n  });\n}\n\n/**\n * sugar to make defining lots of commands easier.\n * TODO: rethink this.\n */\nfunction bind(cons /*, args... */) {\n  var args = __slice.call(arguments, 1);\n  return function() {\n    return cons.apply(this, args);\n  };\n}\n\n/**\n * a development-only debug method.  This definition and all\n * calls to `pray` will be stripped from the minified\n * build of mathquill.\n *\n * This function must be called by name to be removed\n * at compile time.  Do not define another function\n * with the same name, and only call this function by\n * name.\n */\nfunction pray(message, cond) {\n  if (!cond) throw new Error('prayer failed: '+message);\n}\nvar P = (function(prototype, ownProperty, undefined) {\n  // helper functions that also help minification\n  function isObject(o) { return typeof o === 'object'; }\n  function isFunction(f) { return typeof f === 'function'; }\n\n  // used to extend the prototypes of superclasses (which might not\n  // have `.Bare`s)\n  function SuperclassBare() {}\n\n  return function P(_superclass /* = Object */, definition) {\n    // handle the case where no superclass is given\n    if (definition === undefined) {\n      definition = _superclass;\n      _superclass = Object;\n    }\n\n    // C is the class to be returned.\n    //\n    // It delegates to instantiating an instance of `Bare`, so that it\n    // will always return a new instance regardless of the calling\n    // context.\n    //\n    //  TODO: the Chrome inspector shows all created objects as `C`\n    //        rather than `Object`.  Setting the .name property seems to\n    //        have no effect.  Is there a way to override this behavior?\n    function C() {\n      var self = new Bare;\n      if (isFunction(self.init)) self.init.apply(self, arguments);\n      return self;\n    }\n\n    // C.Bare is a class with a noop constructor.  Its prototype is the\n    // same as C, so that instances of C.Bare are also instances of C.\n    // New objects can be allocated without initialization by calling\n    // `new MyClass.Bare`.\n    function Bare() {}\n    C.Bare = Bare;\n\n    // Set up the prototype of the new class.\n    var _super = SuperclassBare[prototype] = _superclass[prototype];\n    var proto = Bare[prototype] = C[prototype] = C.p = new SuperclassBare;\n\n    // other variables, as a minifier optimization\n    var extensions;\n\n\n    // set the constructor property on the prototype, for convenience\n    proto.constructor = C;\n\n    C.extend = function(def) { return P(C, def); }\n\n    return (C.open = function(def) {\n      extensions = {};\n\n      if (isFunction(def)) {\n        // call the defining function with all the arguments you need\n        // extensions captures the return value.\n        extensions = def.call(C, proto, _super, C, _superclass);\n      }\n      else if (isObject(def)) {\n        // if you passed an object instead, we'll take it\n        extensions = def;\n      }\n\n      // ...and extend it\n      if (isObject(extensions)) {\n        for (var ext in extensions) {\n          if (ownProperty.call(extensions, ext)) {\n            proto[ext] = extensions[ext];\n          }\n        }\n      }\n\n      // if there's no init, we assume we're inheriting a non-pjs class, so\n      // we default to applying the superclass's constructor.\n      if (!isFunction(proto.init)) {\n        proto.init = _superclass;\n      }\n\n      return C;\n    })(definition);\n  }\n\n  // as a minifier optimization, we've closured in a few helper functions\n  // and the string 'prototype' (C[p] is much shorter than C.prototype)\n})('prototype', ({}).hasOwnProperty);\n/*************************************************\n * Base classes of edit tree-related objects\n *\n * Only doing tree node manipulation via these\n * adopt/ disown methods guarantees well-formedness\n * of the tree.\n ************************************************/\n\n// L = 'left'\n// R = 'right'\n//\n// the contract is that they can be used as object properties\n// and (-L) === R, and (-R) === L.\nvar L = -1;\nvar R = 1;\n\nfunction prayDirection(dir) {\n  pray('a direction was passed', dir === L || dir === R);\n}\n\n/**\n * Tiny extension of jQuery adding directionalized DOM manipulation methods.\n *\n * Funny how Pjs v3 almost just works with `jQuery.fn.init`.\n *\n * jQuery features that don't work on $:\n *   - jQuery.*, like jQuery.ajax, obviously (Pjs doesn't and shouldn't\n *                                            copy constructor properties)\n *\n *   - jQuery(function), the shortcut for `jQuery(document).ready(function)`,\n *     because `jQuery.fn.init` is idiosyncratic and Pjs doing, essentially,\n *     `jQuery.fn.init.apply(this, arguments)` isn't quite right, you need:\n *\n *       _.init = function(s, c) { jQuery.fn.init.call(this, s, c, $(document)); };\n *\n *     if you actually give a shit (really, don't bother),\n *     see https://github.com/jquery/jquery/blob/1.7.2/src/core.js#L889\n *\n *   - jQuery(selector), because jQuery translates that to\n *     `jQuery(document).find(selector)`, but Pjs doesn't (should it?) let\n *     you override the result of a constructor call\n *       + note that because of the jQuery(document) shortcut-ness, there's also\n *         the 3rd-argument-needs-to-be-`$(document)` thing above, but the fix\n *         for that (as can be seen above) is really easy. This problem requires\n *         a way more intrusive fix\n *\n * And that's it! Everything else just magically works because jQuery internally\n * uses `this.constructor()` everywhere (hence calling `$`), but never ever does\n * `this.constructor.find` or anything like that, always doing `jQuery.find`.\n */\nvar $ = P(jQuery, function(_) {\n  _.insDirOf = function(dir, el) {\n    return dir === L ?\n      this.insertBefore(el.first()) : this.insertAfter(el.last());\n  };\n  _.insAtDirEnd = function(dir, el) {\n    return dir === L ? this.prependTo(el) : this.appendTo(el);\n  };\n});\n\nvar Point = P(function(_) {\n  _.parent = 0;\n  _[L] = 0;\n  _[R] = 0;\n\n  _.init = function(parent, leftward, rightward) {\n    this.parent = parent;\n    this[L] = leftward;\n    this[R] = rightward;\n  };\n\n  this.copy = function(pt) {\n    return Point(pt.parent, pt[L], pt[R]);\n  };\n});\n\n/**\n * MathQuill virtual-DOM tree-node abstract base class\n */\nvar Node = P(function(_) {\n  _[L] = 0;\n  _[R] = 0\n  _.parent = 0;\n\n  var id = 0;\n  function uniqueNodeId() { return id += 1; }\n  this.byId = {};\n\n  _.init = function() {\n    this.id = uniqueNodeId();\n    Node.byId[this.id] = this;\n\n    this.ends = {};\n    this.ends[L] = 0;\n    this.ends[R] = 0;\n  };\n\n  _.dispose = function() { delete Node.byId[this.id]; };\n\n  _.toString = function() { return '{{ MathQuill Node #'+this.id+' }}'; };\n\n  _.jQ = $();\n  _.jQadd = function(jQ) { return this.jQ = this.jQ.add(jQ); };\n  _.jQize = function(jQ) {\n    // jQuery-ifies this.html() and links up the .jQ of all corresponding Nodes\n    var jQ = $(jQ || this.html());\n\n    function jQadd(el) {\n      if (el.getAttribute) {\n        var cmdId = el.getAttribute('mathquill-command-id');\n        var blockId = el.getAttribute('mathquill-block-id');\n        if (cmdId) Node.byId[cmdId].jQadd(el);\n        if (blockId) Node.byId[blockId].jQadd(el);\n      }\n      for (el = el.firstChild; el; el = el.nextSibling) {\n        jQadd(el);\n      }\n    }\n\n    for (var i = 0; i < jQ.length; i += 1) jQadd(jQ[i]);\n    return jQ;\n  };\n\n  _.createDir = function(dir, cursor) {\n    prayDirection(dir);\n    var node = this;\n    node.jQize();\n    node.jQ.insDirOf(dir, cursor.jQ);\n    cursor[dir] = node.adopt(cursor.parent, cursor[L], cursor[R]);\n    return node;\n  };\n  _.createLeftOf = function(el) { return this.createDir(L, el); };\n\n  _.selectChildren = function(leftEnd, rightEnd) {\n    return Selection(leftEnd, rightEnd);\n  };\n\n  _.bubble = iterator(function(yield_) {\n    for (var ancestor = this; ancestor; ancestor = ancestor.parent) {\n      var result = yield_(ancestor);\n      if (result === false) break;\n    }\n\n    return this;\n  });\n\n  _.postOrder = iterator(function(yield_) {\n    (function recurse(descendant) {\n      descendant.eachChild(recurse);\n      yield_(descendant);\n    })(this);\n\n    return this;\n  });\n\n  _.isEmpty = function() {\n    return this.ends[L] === 0 && this.ends[R] === 0;\n  };\n\n  _.children = function() {\n    return Fragment(this.ends[L], this.ends[R]);\n  };\n\n  _.eachChild = function() {\n    var children = this.children();\n    children.each.apply(children, arguments);\n    return this;\n  };\n\n  _.foldChildren = function(fold, fn) {\n    return this.children().fold(fold, fn);\n  };\n\n  _.withDirAdopt = function(dir, parent, withDir, oppDir) {\n    Fragment(this, this).withDirAdopt(dir, parent, withDir, oppDir);\n    return this;\n  };\n\n  _.adopt = function(parent, leftward, rightward) {\n    Fragment(this, this).adopt(parent, leftward, rightward);\n    return this;\n  };\n\n  _.disown = function() {\n    Fragment(this, this).disown();\n    return this;\n  };\n\n  _.remove = function() {\n    this.jQ.remove();\n    this.postOrder('dispose');\n    return this.disown();\n  };\n});\n\nfunction prayWellFormed(parent, leftward, rightward) {\n  pray('a parent is always present', parent);\n  pray('leftward is properly set up', (function() {\n    // either it's empty and `rightward` is the left end child (possibly empty)\n    if (!leftward) return parent.ends[L] === rightward;\n\n    // or it's there and its [R] and .parent are properly set up\n    return leftward[R] === rightward && leftward.parent === parent;\n  })());\n\n  pray('rightward is properly set up', (function() {\n    // either it's empty and `leftward` is the right end child (possibly empty)\n    if (!rightward) return parent.ends[R] === leftward;\n\n    // or it's there and its [L] and .parent are properly set up\n    return rightward[L] === leftward && rightward.parent === parent;\n  })());\n}\n\n\n/**\n * An entity outside the virtual tree with one-way pointers (so it's only a\n * \"view\" of part of the tree, not an actual node/entity in the tree) that\n * delimits a doubly-linked list of sibling nodes.\n * It's like a fanfic love-child between HTML DOM DocumentFragment and the Range\n * classes: like DocumentFragment, its contents must be sibling nodes\n * (unlike Range, whose contents are arbitrary contiguous pieces of subtrees),\n * but like Range, it has only one-way pointers to its contents, its contents\n * have no reference to it and in fact may still be in the visible tree (unlike\n * DocumentFragment, whose contents must be detached from the visible tree\n * and have their 'parent' pointers set to the DocumentFragment).\n */\nvar Fragment = P(function(_) {\n  _.init = function(withDir, oppDir, dir) {\n    if (dir === undefined) dir = L;\n    prayDirection(dir);\n\n    pray('no half-empty fragments', !withDir === !oppDir);\n\n    this.ends = {};\n\n    if (!withDir) return;\n\n    pray('withDir is passed to Fragment', withDir instanceof Node);\n    pray('oppDir is passed to Fragment', oppDir instanceof Node);\n    pray('withDir and oppDir have the same parent',\n         withDir.parent === oppDir.parent);\n\n    this.ends[dir] = withDir;\n    this.ends[-dir] = oppDir;\n\n    // To build the jquery collection for a fragment, accumulate elements\n    // into an array and then call jQ.add once on the result. jQ.add sorts the\n    // collection according to document order each time it is called, so\n    // building a collection by folding jQ.add directly takes more than\n    // quadratic time in the number of elements.\n    //\n    // https://github.com/jquery/jquery/blob/2.1.4/src/traversing.js#L112\n    var accum = this.fold([], function (accum, el) {\n      accum.push.apply(accum, el.jQ.get());\n      return accum;\n    });\n\n    this.jQ = this.jQ.add(accum);\n  };\n  _.jQ = $();\n\n  // like Cursor::withDirInsertAt(dir, parent, withDir, oppDir)\n  _.withDirAdopt = function(dir, parent, withDir, oppDir) {\n    return (dir === L ? this.adopt(parent, withDir, oppDir)\n                      : this.adopt(parent, oppDir, withDir));\n  };\n  _.adopt = function(parent, leftward, rightward) {\n    prayWellFormed(parent, leftward, rightward);\n\n    var self = this;\n    self.disowned = false;\n\n    var leftEnd = self.ends[L];\n    if (!leftEnd) return this;\n\n    var rightEnd = self.ends[R];\n\n    if (leftward) {\n      // NB: this is handled in the ::each() block\n      // leftward[R] = leftEnd\n    } else {\n      parent.ends[L] = leftEnd;\n    }\n\n    if (rightward) {\n      rightward[L] = rightEnd;\n    } else {\n      parent.ends[R] = rightEnd;\n    }\n\n    self.ends[R][R] = rightward;\n\n    self.each(function(el) {\n      el[L] = leftward;\n      el.parent = parent;\n      if (leftward) leftward[R] = el;\n\n      leftward = el;\n    });\n\n    return self;\n  };\n\n  _.disown = function() {\n    var self = this;\n    var leftEnd = self.ends[L];\n\n    // guard for empty and already-disowned fragments\n    if (!leftEnd || self.disowned) return self;\n\n    self.disowned = true;\n\n    var rightEnd = self.ends[R]\n    var parent = leftEnd.parent;\n\n    prayWellFormed(parent, leftEnd[L], leftEnd);\n    prayWellFormed(parent, rightEnd, rightEnd[R]);\n\n    if (leftEnd[L]) {\n      leftEnd[L][R] = rightEnd[R];\n    } else {\n      parent.ends[L] = rightEnd[R];\n    }\n\n    if (rightEnd[R]) {\n      rightEnd[R][L] = leftEnd[L];\n    } else {\n      parent.ends[R] = leftEnd[L];\n    }\n\n    return self;\n  };\n\n  _.remove = function() {\n    this.jQ.remove();\n    this.each('postOrder', 'dispose');\n    return this.disown();\n  };\n\n  _.each = iterator(function(yield_) {\n    var self = this;\n    var el = self.ends[L];\n    if (!el) return self;\n\n    for (; el !== self.ends[R][R]; el = el[R]) {\n      var result = yield_(el);\n      if (result === false) break;\n    }\n\n    return self;\n  });\n\n  _.fold = function(fold, fn) {\n    this.each(function(el) {\n      fold = fn.call(this, fold, el);\n    });\n\n    return fold;\n  };\n});\n\n\n/**\n * Registry of LaTeX commands and commands created when typing\n * a single character.\n *\n * (Commands are all subclasses of Node.)\n */\nvar LatexCmds = {}, CharCmds = {};\n/********************************************\n * Cursor and Selection \"singleton\" classes\n *******************************************/\n\n/* The main thing that manipulates the Math DOM. Makes sure to manipulate the\nHTML DOM to match. */\n\n/* Sort of singletons, since there should only be one per editable math\ntextbox, but any one HTML document can contain many such textboxes, so any one\nJS environment could actually contain many instances. */\n\n//A fake cursor in the fake textbox that the math is rendered in.\nvar Cursor = P(Point, function(_) {\n  _.init = function(initParent, options) {\n    this.parent = initParent;\n    this.options = options;\n\n    var jQ = this.jQ = this._jQ = $('<span class=\"mq-cursor\">&#8203;</span>');\n    //closured for setInterval\n    this.blink = function(){ jQ.toggleClass('mq-blink'); };\n\n    this.upDownCache = {};\n  };\n\n  _.show = function() {\n    this.jQ = this._jQ.removeClass('mq-blink');\n    if ('intervalId' in this) //already was shown, just restart interval\n      clearInterval(this.intervalId);\n    else { //was hidden and detached, insert this.jQ back into HTML DOM\n      if (this[R]) {\n        if (this.selection && this.selection.ends[L][L] === this[L])\n          this.jQ.insertBefore(this.selection.jQ);\n        else\n          this.jQ.insertBefore(this[R].jQ.first());\n      }\n      else\n        this.jQ.appendTo(this.parent.jQ);\n      this.parent.focus();\n    }\n    this.intervalId = setInterval(this.blink, 500);\n    return this;\n  };\n  _.hide = function() {\n    if ('intervalId' in this)\n      clearInterval(this.intervalId);\n    delete this.intervalId;\n    this.jQ.detach();\n    this.jQ = $();\n    return this;\n  };\n\n  _.withDirInsertAt = function(dir, parent, withDir, oppDir) {\n    var oldParent = this.parent;\n    this.parent = parent;\n    this[dir] = withDir;\n    this[-dir] = oppDir;\n    // by contract, .blur() is called after all has been said and done\n    // and the cursor has actually been moved\n    // FIXME pass cursor to .blur() so text can fix cursor pointers when removing itself\n    if (oldParent !== parent && oldParent.blur) oldParent.blur(this);\n  };\n  _.insDirOf = function(dir, el) {\n    prayDirection(dir);\n    this.jQ.insDirOf(dir, el.jQ);\n    this.withDirInsertAt(dir, el.parent, el[dir], el);\n    this.parent.jQ.addClass('mq-hasCursor');\n    return this;\n  };\n  _.insLeftOf = function(el) { return this.insDirOf(L, el); };\n  _.insRightOf = function(el) { return this.insDirOf(R, el); };\n\n  _.insAtDirEnd = function(dir, el) {\n    prayDirection(dir);\n    this.jQ.insAtDirEnd(dir, el.jQ);\n    this.withDirInsertAt(dir, el, 0, el.ends[dir]);\n    el.focus();\n    return this;\n  };\n  _.insAtLeftEnd = function(el) { return this.insAtDirEnd(L, el); };\n  _.insAtRightEnd = function(el) { return this.insAtDirEnd(R, el); };\n\n  /**\n   * jump up or down from one block Node to another:\n   * - cache the current Point in the node we're jumping from\n   * - check if there's a Point in it cached for the node we're jumping to\n   *   + if so put the cursor there,\n   *   + if not seek a position in the node that is horizontally closest to\n   *     the cursor's current position\n   */\n  _.jumpUpDown = function(from, to) {\n    var self = this;\n    self.upDownCache[from.id] = Point.copy(self);\n    var cached = self.upDownCache[to.id];\n    if (cached) {\n      cached[R] ? self.insLeftOf(cached[R]) : self.insAtRightEnd(cached.parent);\n    }\n    else {\n      var pageX = self.offset().left;\n      to.seek(pageX, self);\n    }\n  };\n  _.offset = function() {\n    //in Opera 11.62, .getBoundingClientRect() and hence jQuery::offset()\n    //returns all 0's on inline elements with negative margin-right (like\n    //the cursor) at the end of their parent, so temporarily remove the\n    //negative margin-right when calling jQuery::offset()\n    //Opera bug DSK-360043\n    //http://bugs.jquery.com/ticket/11523\n    //https://github.com/jquery/jquery/pull/717\n    var self = this, offset = self.jQ.removeClass('mq-cursor').offset();\n    self.jQ.addClass('mq-cursor');\n    return offset;\n  }\n  _.unwrapGramp = function() {\n    var gramp = this.parent.parent;\n    var greatgramp = gramp.parent;\n    var rightward = gramp[R];\n    var cursor = this;\n\n    var leftward = gramp[L];\n    gramp.disown().eachChild(function(uncle) {\n      if (uncle.isEmpty()) return;\n\n      uncle.children()\n        .adopt(greatgramp, leftward, rightward)\n        .each(function(cousin) {\n          cousin.jQ.insertBefore(gramp.jQ.first());\n        })\n      ;\n\n      leftward = uncle.ends[R];\n    });\n\n    if (!this[R]) { //then find something to be rightward to insLeftOf\n      if (this[L])\n        this[R] = this[L][R];\n      else {\n        while (!this[R]) {\n          this.parent = this.parent[R];\n          if (this.parent)\n            this[R] = this.parent.ends[L];\n          else {\n            this[R] = gramp[R];\n            this.parent = greatgramp;\n            break;\n          }\n        }\n      }\n    }\n    if (this[R])\n      this.insLeftOf(this[R]);\n    else\n      this.insAtRightEnd(greatgramp);\n\n    gramp.jQ.remove();\n\n    if (gramp[L].siblingDeleted) gramp[L].siblingDeleted(cursor.options, R);\n    if (gramp[R].siblingDeleted) gramp[R].siblingDeleted(cursor.options, L);\n  };\n  _.startSelection = function() {\n    var anticursor = this.anticursor = Point.copy(this);\n    var ancestors = anticursor.ancestors = {}; // a map from each ancestor of\n      // the anticursor, to its child that is also an ancestor; in other words,\n      // the anticursor's ancestor chain in reverse order\n    for (var ancestor = anticursor; ancestor.parent; ancestor = ancestor.parent) {\n      ancestors[ancestor.parent.id] = ancestor;\n    }\n  };\n  _.endSelection = function() {\n    delete this.anticursor;\n  };\n  _.select = function() {\n    var anticursor = this.anticursor;\n    if (this[L] === anticursor[L] && this.parent === anticursor.parent) return false;\n\n    // Find the lowest common ancestor (`lca`), and the ancestor of the cursor\n    // whose parent is the LCA (which'll be an end of the selection fragment).\n    for (var ancestor = this; ancestor.parent; ancestor = ancestor.parent) {\n      if (ancestor.parent.id in anticursor.ancestors) {\n        var lca = ancestor.parent;\n        break;\n      }\n    }\n    pray('cursor and anticursor in the same tree', lca);\n    // The cursor and the anticursor should be in the same tree, because the\n    // mousemove handler attached to the document, unlike the one attached to\n    // the root HTML DOM element, doesn't try to get the math tree node of the\n    // mousemove target, and Cursor::seek() based solely on coordinates stays\n    // within the tree of `this` cursor's root.\n\n    // The other end of the selection fragment, the ancestor of the anticursor\n    // whose parent is the LCA.\n    var antiAncestor = anticursor.ancestors[lca.id];\n\n    // Now we have two either Nodes or Points, guaranteed to have a common\n    // parent and guaranteed that if both are Points, they are not the same,\n    // and we have to figure out which is the left end and which the right end\n    // of the selection.\n    var leftEnd, rightEnd, dir = R;\n\n    // This is an extremely subtle algorithm.\n    // As a special case, `ancestor` could be a Point and `antiAncestor` a Node\n    // immediately to `ancestor`'s left.\n    // In all other cases,\n    // - both Nodes\n    // - `ancestor` a Point and `antiAncestor` a Node\n    // - `ancestor` a Node and `antiAncestor` a Point\n    // `antiAncestor[R] === rightward[R]` for some `rightward` that is\n    // `ancestor` or to its right, if and only if `antiAncestor` is to\n    // the right of `ancestor`.\n    if (ancestor[L] !== antiAncestor) {\n      for (var rightward = ancestor; rightward; rightward = rightward[R]) {\n        if (rightward[R] === antiAncestor[R]) {\n          dir = L;\n          leftEnd = ancestor;\n          rightEnd = antiAncestor;\n          break;\n        }\n      }\n    }\n    if (dir === R) {\n      leftEnd = antiAncestor;\n      rightEnd = ancestor;\n    }\n\n    // only want to select Nodes up to Points, can't select Points themselves\n    if (leftEnd instanceof Point) leftEnd = leftEnd[R];\n    if (rightEnd instanceof Point) rightEnd = rightEnd[L];\n\n    this.hide().selection = lca.selectChildren(leftEnd, rightEnd);\n    this.insDirOf(dir, this.selection.ends[dir]);\n    this.selectionChanged();\n    return true;\n  };\n\n  _.clearSelection = function() {\n    if (this.selection) {\n      this.selection.clear();\n      delete this.selection;\n      this.selectionChanged();\n    }\n    return this;\n  };\n  _.deleteSelection = function() {\n    if (!this.selection) return;\n\n    this[L] = this.selection.ends[L][L];\n    this[R] = this.selection.ends[R][R];\n    this.selection.remove();\n    this.selectionChanged();\n    delete this.selection;\n  };\n  _.replaceSelection = function() {\n    var seln = this.selection;\n    if (seln) {\n      this[L] = seln.ends[L][L];\n      this[R] = seln.ends[R][R];\n      delete this.selection;\n    }\n    return seln;\n  };\n});\n\nvar Selection = P(Fragment, function(_, super_) {\n  _.init = function() {\n    super_.init.apply(this, arguments);\n    this.jQ = this.jQ.wrapAll('<span class=\"mq-selection\"></span>').parent();\n      //can't do wrapAll(this.jQ = $(...)) because wrapAll will clone it\n  };\n  _.adopt = function() {\n    this.jQ.replaceWith(this.jQ = this.jQ.children());\n    return super_.adopt.apply(this, arguments);\n  };\n  _.clear = function() {\n    // using the browser's native .childNodes property so that we\n    // don't discard text nodes.\n    this.jQ.replaceWith(this.jQ[0].childNodes);\n    return this;\n  };\n  _.join = function(methodName) {\n    return this.fold('', function(fold, child) {\n      return fold + child[methodName]();\n    });\n  };\n});\n/*********************************************\n * Controller for a MathQuill instance,\n * on which services are registered with\n *\n *   Controller.open(function(_) { ... });\n *\n ********************************************/\n\nvar Controller = P(function(_) {\n  _.init = function(root, container, options) {\n    this.id = root.id;\n    this.data = {};\n\n    this.root = root;\n    this.container = container;\n    this.options = options;\n\n    root.controller = this;\n\n    this.cursor = root.cursor = Cursor(root, options);\n    // TODO: stop depending on root.cursor, and rm it\n  };\n\n  _.handle = function(name, dir) {\n    var handlers = this.options.handlers;\n    if (handlers && handlers.fns[name]) {\n      var mq = handlers.APIClasses[this.KIND_OF_MQ](this);\n      if (dir === L || dir === R) handlers.fns[name](dir, mq);\n      else handlers.fns[name](mq);\n    }\n  };\n\n  var notifyees = [];\n  this.onNotify = function(f) { notifyees.push(f); };\n  _.notify = function() {\n    for (var i = 0; i < notifyees.length; i += 1) {\n      notifyees[i].apply(this.cursor, arguments);\n    }\n    return this;\n  };\n});\n/*********************************************************\n * The publicly exposed MathQuill API.\n ********************************************************/\n\nvar API = {}, Options = P(), optionProcessors = {}, Progenote = P(), EMBEDS = {};\n\n/**\n * Interface Versioning (#459, #495) to allow us to virtually guarantee\n * backcompat. v0.10.x introduces it, so for now, don't completely break the\n * API for people who don't know about it, just complain with console.warn().\n *\n * The methods are shimmed in outro.js so that MQ.MathField.prototype etc can\n * be accessed.\n */\nfunction insistOnInterVer() {\n  if (window.console) console.warn(\n    'You are using the MathQuill API without specifying an interface version, ' +\n    'which will fail in v1.0.0. Easiest fix is to do the following before ' +\n    'doing anything else:\\n' +\n    '\\n' +\n    '    MathQuill = MathQuill.getInterface(1);\\n' +\n    '    // now MathQuill.MathField() works like it used to\\n' +\n    '\\n' +\n    'See also the \"`dev` branch (2014\\u20132015) \\u2192 v0.10.0 Migration Guide\" at\\n' +\n    '  https://github.com/mathquill/mathquill/wiki/%60dev%60-branch-(2014%E2%80%932015)-%E2%86%92-v0.10.0-Migration-Guide'\n  );\n}\n// globally exported API object\nfunction MathQuill(el) {\n  insistOnInterVer();\n  return MQ1(el);\n};\nMathQuill.prototype = Progenote.p;\nMathQuill.interfaceVersion = function(v) {\n  // shim for #459-era interface versioning (ended with #495)\n  if (v !== 1) throw 'Only interface version 1 supported. You specified: ' + v;\n  insistOnInterVer = function() {\n    if (window.console) console.warn(\n      'You called MathQuill.interfaceVersion(1); to specify the interface ' +\n      'version, which will fail in v1.0.0. You can fix this easily by doing ' +\n      'this before doing anything else:\\n' +\n      '\\n' +\n      '    MathQuill = MathQuill.getInterface(1);\\n' +\n      '    // now MathQuill.MathField() works like it used to\\n' +\n      '\\n' +\n      'See also the \"`dev` branch (2014\\u20132015) \\u2192 v0.10.0 Migration Guide\" at\\n' +\n      '  https://github.com/mathquill/mathquill/wiki/%60dev%60-branch-(2014%E2%80%932015)-%E2%86%92-v0.10.0-Migration-Guide'\n    );\n  };\n  insistOnInterVer();\n  return MathQuill;\n};\nMathQuill.getInterface = getInterface;\n\nvar MIN = getInterface.MIN = 1, MAX = getInterface.MAX = 2;\nfunction getInterface(v) {\n  if (!(MIN <= v && v <= MAX)) throw 'Only interface versions between ' +\n    MIN + ' and ' + MAX + ' supported. You specified: ' + v;\n\n  /**\n   * Function that takes an HTML element and, if it's the root HTML element of a\n   * static math or math or text field, returns an API object for it (else, null).\n   *\n   *   var mathfield = MQ.MathField(mathFieldSpan);\n   *   assert(MQ(mathFieldSpan).id === mathfield.id);\n   *   assert(MQ(mathFieldSpan).id === MQ(mathFieldSpan).id);\n   *\n   */\n  function MQ(el) {\n    if (!el || !el.nodeType) return null; // check that `el` is a HTML element, using the\n      // same technique as jQuery: https://github.com/jquery/jquery/blob/679536ee4b7a92ae64a5f58d90e9cc38c001e807/src/core/init.js#L92\n    var blockId = $(el).children('.mq-root-block').attr(mqBlockId);\n    var ctrlr = blockId && Node.byId[blockId].controller;\n    return ctrlr ? APIClasses[ctrlr.KIND_OF_MQ](ctrlr) : null;\n  };\n  var APIClasses = {};\n\n  MQ.L = L;\n  MQ.R = R;\n\n  function config(currentOptions, newOptions) {\n    if (newOptions && newOptions.handlers) {\n      newOptions.handlers = { fns: newOptions.handlers, APIClasses: APIClasses };\n    }\n    for (var name in newOptions) if (newOptions.hasOwnProperty(name)) {\n      var value = newOptions[name], processor = optionProcessors[name];\n      currentOptions[name] = (processor ? processor(value) : value);\n    }\n  }\n  MQ.config = function(opts) { config(Options.p, opts); return this; };\n  MQ.registerEmbed = function(name, options) {\n    if (!/^[a-z][a-z0-9]*$/i.test(name)) {\n      throw 'Embed name must start with letter and be only letters and digits';\n    }\n    EMBEDS[name] = options;\n  };\n\n  var AbstractMathQuill = APIClasses.AbstractMathQuill = P(Progenote, function(_) {\n    _.init = function(ctrlr) {\n      this.__controller = ctrlr;\n      this.__options = ctrlr.options;\n      this.id = ctrlr.id;\n      this.data = ctrlr.data;\n    };\n    _.__mathquillify = function(classNames) {\n      var ctrlr = this.__controller, root = ctrlr.root, el = ctrlr.container;\n      ctrlr.createTextarea();\n\n      var contents = el.addClass(classNames).contents().detach();\n      root.jQ =\n        $('<span class=\"mq-root-block\"/>').attr(mqBlockId, root.id).appendTo(el);\n      this.latex(contents.text());\n\n      this.revert = function() {\n        return el.empty().unbind('.mathquill')\n        .removeClass('mq-editable-field mq-math-mode mq-text-mode')\n        .append(contents);\n      };\n    };\n    _.config = function(opts) { config(this.__options, opts); return this; };\n    _.el = function() { return this.__controller.container[0]; };\n    _.text = function() { return this.__controller.exportText(); };\n    _.latex = function(latex) {\n      if (arguments.length > 0) {\n        this.__controller.renderLatexMath(latex);\n        if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n        return this;\n      }\n      return this.__controller.exportLatex();\n    };\n    _.html = function() {\n      return this.__controller.root.jQ.html()\n        .replace(/ mathquill-(?:command|block)-id=\"?\\d+\"?/g, '')\n        .replace(/<span class=\"?mq-cursor( mq-blink)?\"?>.?<\\/span>/i, '')\n        .replace(/ mq-hasCursor|mq-hasCursor ?/, '')\n        .replace(/ class=(\"\"|(?= |>))/g, '');\n    };\n    _.reflow = function() {\n      this.__controller.root.postOrder('reflow');\n      return this;\n    };\n  });\n  MQ.prototype = AbstractMathQuill.prototype;\n\n  APIClasses.EditableField = P(AbstractMathQuill, function(_, super_) {\n    _.__mathquillify = function() {\n      super_.__mathquillify.apply(this, arguments);\n      this.__controller.editable = true;\n      this.__controller.delegateMouseEvents();\n      this.__controller.editablesTextareaEvents();\n      return this;\n    };\n    _.focus = function() { this.__controller.textarea.focus(); return this; };\n    _.blur = function() { this.__controller.textarea.blur(); return this; };\n    _.write = function(latex) {\n      this.__controller.writeLatex(latex);\n      this.__controller.scrollHoriz();\n      if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n      return this;\n    };\n    _.cmd = function(cmd) {\n      var ctrlr = this.__controller.notify(), cursor = ctrlr.cursor;\n      if (/^\\\\[a-z]+$/i.test(cmd)) {\n        cmd = cmd.slice(1);\n        var klass = LatexCmds[cmd];\n        if (klass) {\n          cmd = klass(cmd);\n          if (cursor.selection) cmd.replaces(cursor.replaceSelection());\n          cmd.createLeftOf(cursor.show());\n          this.__controller.scrollHoriz();\n        }\n        else /* TODO: API needs better error reporting */;\n      }\n      else cursor.parent.write(cursor, cmd);\n      if (ctrlr.blurred) cursor.hide().parent.blur();\n      return this;\n    };\n    _.select = function() {\n      var ctrlr = this.__controller;\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      while (ctrlr.cursor[L]) ctrlr.selectLeft();\n      return this;\n    };\n    _.clearSelection = function() {\n      this.__controller.cursor.clearSelection();\n      return this;\n    };\n\n    _.moveToDirEnd = function(dir) {\n      this.__controller.notify('move').cursor.insAtDirEnd(dir, this.__controller.root);\n      return this;\n    };\n    _.moveToLeftEnd = function() { return this.moveToDirEnd(L); };\n    _.moveToRightEnd = function() { return this.moveToDirEnd(R); };\n\n    _.keystroke = function(keys) {\n      var keys = keys.replace(/^\\s+|\\s+$/g, '').split(/\\s+/);\n      for (var i = 0; i < keys.length; i += 1) {\n        this.__controller.keystroke(keys[i], { preventDefault: noop });\n      }\n      return this;\n    };\n    _.typedText = function(text) {\n      for (var i = 0; i < text.length; i += 1) this.__controller.typedText(text.charAt(i));\n      return this;\n    };\n    _.dropEmbedded = function(pageX, pageY, options) {\n      var clientX = pageX - $(window).scrollLeft();\n      var clientY = pageY - $(window).scrollTop();\n\n      var el = document.elementFromPoint(clientX, clientY);\n      this.__controller.seek($(el), pageX, pageY);\n      var cmd = Embed().setOptions(options);\n      cmd.createLeftOf(this.__controller.cursor);\n    };\n    _.clickAt = function(clientX, clientY, target) {\n      target = target || document.elementFromPoint(clientX, clientY);\n\n      var ctrlr = this.__controller, root = ctrlr.root;\n      if (!jQuery.contains(root.jQ[0], target)) target = root.jQ[0];\n      ctrlr.seek($(target), clientX + pageXOffset, clientY + pageYOffset);\n      if (ctrlr.blurred) this.focus();\n      return this;\n    };\n    _.ignoreNextMousedown = function(fn) {\n      this.__controller.cursor.options.ignoreNextMousedown = fn;\n      return this;\n    };\n  });\n  MQ.EditableField = function() { throw \"wtf don't call me, I'm 'abstract'\"; };\n  MQ.EditableField.prototype = APIClasses.EditableField.prototype;\n\n  /**\n   * Export the API functions that MathQuill-ify an HTML element into API objects\n   * of each class. If the element had already been MathQuill-ified but into a\n   * different kind (or it's not an HTML element), return null.\n   */\n  for (var kind in API) (function(kind, defAPIClass) {\n    var APIClass = APIClasses[kind] = defAPIClass(APIClasses);\n    MQ[kind] = function(el, opts) {\n      var mq = MQ(el);\n      if (mq instanceof APIClass || !el || !el.nodeType) return mq;\n      var ctrlr = Controller(APIClass.RootBlock(), $(el), Options());\n      ctrlr.KIND_OF_MQ = kind;\n      return APIClass(ctrlr).__mathquillify(opts, v);\n    };\n    MQ[kind].prototype = APIClass.prototype;\n  }(kind, API[kind]));\n\n  return MQ;\n}\n\nMathQuill.noConflict = function() {\n  window.MathQuill = origMathQuill;\n  return MathQuill;\n};\nvar origMathQuill = window.MathQuill;\nwindow.MathQuill = MathQuill;\n\nfunction RootBlockMixin(_) {\n  var names = 'moveOutOf deleteOutOf selectOutOf upOutOf downOutOf'.split(' ');\n  for (var i = 0; i < names.length; i += 1) (function(name) {\n    _[name] = function(dir) { this.controller.handle(name, dir); };\n  }(names[i]));\n  _.reflow = function() {\n    this.controller.handle('reflow');\n    this.controller.handle('edited');\n    this.controller.handle('edit');\n  };\n}\nvar Parser = P(function(_, super_, Parser) {\n  // The Parser object is a wrapper for a parser function.\n  // Externally, you use one to parse a string by calling\n  //   var result = SomeParser.parse('Me Me Me! Parse Me!');\n  // You should never call the constructor, rather you should\n  // construct your Parser from the base parsers and the\n  // parser combinator methods.\n\n  function parseError(stream, message) {\n    if (stream) {\n      stream = \"'\"+stream+\"'\";\n    }\n    else {\n      stream = 'EOF';\n    }\n\n    throw 'Parse Error: '+message+' at '+stream;\n  }\n\n  _.init = function(body) { this._ = body; };\n\n  _.parse = function(stream) {\n    return this.skip(eof)._(''+stream, success, parseError);\n\n    function success(stream, result) { return result; }\n  };\n\n  // -*- primitive combinators -*- //\n  _.or = function(alternative) {\n    pray('or is passed a parser', alternative instanceof Parser);\n\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      return self._(stream, onSuccess, failure);\n\n      function failure(newStream) {\n        return alternative._(stream, onSuccess, onFailure);\n      }\n    });\n  };\n\n  _.then = function(next) {\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      return self._(stream, success, onFailure);\n\n      function success(newStream, result) {\n        var nextParser = (next instanceof Parser ? next : next(result));\n        pray('a parser is returned', nextParser instanceof Parser);\n        return nextParser._(newStream, onSuccess, onFailure);\n      }\n    });\n  };\n\n  // -*- optimized iterative combinators -*- //\n  _.many = function() {\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var xs = [];\n      while (self._(stream, success, failure));\n      return onSuccess(stream, xs);\n\n      function success(newStream, x) {\n        stream = newStream;\n        xs.push(x);\n        return true;\n      }\n\n      function failure() {\n        return false;\n      }\n    });\n  };\n\n  _.times = function(min, max) {\n    if (arguments.length < 2) max = min;\n    var self = this;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var xs = [];\n      var result = true;\n      var failure;\n\n      for (var i = 0; i < min; i += 1) {\n        result = self._(stream, success, firstFailure);\n        if (!result) return onFailure(stream, failure);\n      }\n\n      for (; i < max && result; i += 1) {\n        result = self._(stream, success, secondFailure);\n      }\n\n      return onSuccess(stream, xs);\n\n      function success(newStream, x) {\n        xs.push(x);\n        stream = newStream;\n        return true;\n      }\n\n      function firstFailure(newStream, msg) {\n        failure = msg;\n        stream = newStream;\n        return false;\n      }\n\n      function secondFailure(newStream, msg) {\n        return false;\n      }\n    });\n  };\n\n  // -*- higher-level combinators -*- //\n  _.result = function(res) { return this.then(succeed(res)); };\n  _.atMost = function(n) { return this.times(0, n); };\n  _.atLeast = function(n) {\n    var self = this;\n    return self.times(n).then(function(start) {\n      return self.many().map(function(end) {\n        return start.concat(end);\n      });\n    });\n  };\n\n  _.map = function(fn) {\n    return this.then(function(result) { return succeed(fn(result)); });\n  };\n\n  _.skip = function(two) {\n    return this.then(function(result) { return two.result(result); });\n  };\n\n  // -*- primitive parsers -*- //\n  var string = this.string = function(str) {\n    var len = str.length;\n    var expected = \"expected '\"+str+\"'\";\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var head = stream.slice(0, len);\n\n      if (head === str) {\n        return onSuccess(stream.slice(len), head);\n      }\n      else {\n        return onFailure(stream, expected);\n      }\n    });\n  };\n\n  var regex = this.regex = function(re) {\n    pray('regexp parser is anchored', re.toString().charAt(1) === '^');\n\n    var expected = 'expected '+re;\n\n    return Parser(function(stream, onSuccess, onFailure) {\n      var match = re.exec(stream);\n\n      if (match) {\n        var result = match[0];\n        return onSuccess(stream.slice(result.length), result);\n      }\n      else {\n        return onFailure(stream, expected);\n      }\n    });\n  };\n\n  var succeed = Parser.succeed = function(result) {\n    return Parser(function(stream, onSuccess) {\n      return onSuccess(stream, result);\n    });\n  };\n\n  var fail = Parser.fail = function(msg) {\n    return Parser(function(stream, _, onFailure) {\n      return onFailure(stream, msg);\n    });\n  };\n\n  var letter = Parser.letter = regex(/^[a-z]/i);\n  var letters = Parser.letters = regex(/^[a-z]*/i);\n  var digit = Parser.digit = regex(/^[0-9]/);\n  var digits = Parser.digits = regex(/^[0-9]*/);\n  var whitespace = Parser.whitespace = regex(/^\\s+/);\n  var optWhitespace = Parser.optWhitespace = regex(/^\\s*/);\n\n  var any = Parser.any = Parser(function(stream, onSuccess, onFailure) {\n    if (!stream) return onFailure(stream, 'expected any character');\n\n    return onSuccess(stream.slice(1), stream.charAt(0));\n  });\n\n  var all = Parser.all = Parser(function(stream, onSuccess, onFailure) {\n    return onSuccess('', stream);\n  });\n\n  var eof = Parser.eof = Parser(function(stream, onSuccess, onFailure) {\n    if (stream) return onFailure(stream, 'expected EOF');\n\n    return onSuccess(stream, stream);\n  });\n});\n/*************************************************\n * Sane Keyboard Events Shim\n *\n * An abstraction layer wrapping the textarea in\n * an object with methods to manipulate and listen\n * to events on, that hides all the nasty cross-\n * browser incompatibilities behind a uniform API.\n *\n * Design goal: This is a *HARD* internal\n * abstraction barrier. Cross-browser\n * inconsistencies are not allowed to leak through\n * and be dealt with by event handlers. All future\n * cross-browser issues that arise must be dealt\n * with here, and if necessary, the API updated.\n *\n * Organization:\n * - key values map and stringify()\n * - saneKeyboardEvents()\n *    + defer() and flush()\n *    + event handler logic\n *    + attach event handlers and export methods\n ************************************************/\n\nvar saneKeyboardEvents = (function() {\n  // The following [key values][1] map was compiled from the\n  // [DOM3 Events appendix section on key codes][2] and\n  // [a widely cited report on cross-browser tests of key codes][3],\n  // except for 10: 'Enter', which I've empirically observed in Safari on iOS\n  // and doesn't appear to conflict with any other known key codes.\n  //\n  // [1]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#keys-keyvalues\n  // [2]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes\n  // [3]: http://unixpapa.com/js/key.html\n  var KEY_VALUES = {\n    8: 'Backspace',\n    9: 'Tab',\n\n    10: 'Enter', // for Safari on iOS\n\n    13: 'Enter',\n\n    16: 'Shift',\n    17: 'Control',\n    18: 'Alt',\n    20: 'CapsLock',\n\n    27: 'Esc',\n\n    32: 'Spacebar',\n\n    33: 'PageUp',\n    34: 'PageDown',\n    35: 'End',\n    36: 'Home',\n\n    37: 'Left',\n    38: 'Up',\n    39: 'Right',\n    40: 'Down',\n\n    45: 'Insert',\n\n    46: 'Del',\n\n    144: 'NumLock'\n  };\n\n  // To the extent possible, create a normalized string representation\n  // of the key combo (i.e., key code and modifier keys).\n  function stringify(evt) {\n    var which = evt.which || evt.keyCode;\n    var keyVal = KEY_VALUES[which];\n    var key;\n    var modifiers = [];\n\n    if (evt.ctrlKey) modifiers.push('Ctrl');\n    if (evt.originalEvent && evt.originalEvent.metaKey) modifiers.push('Meta');\n    if (evt.altKey) modifiers.push('Alt');\n    if (evt.shiftKey) modifiers.push('Shift');\n\n    key = keyVal || String.fromCharCode(which);\n\n    if (!modifiers.length && !keyVal) return key;\n\n    modifiers.push(key);\n    return modifiers.join('-');\n  }\n\n  // create a keyboard events shim that calls callbacks at useful times\n  // and exports useful public methods\n  return function saneKeyboardEvents(el, handlers) {\n    var keydown = null;\n    var keypress = null;\n\n    var textarea = jQuery(el);\n    var target = jQuery(handlers.container || textarea);\n\n    // checkTextareaFor() is called after keypress or paste events to\n    // say \"Hey, I think something was just typed\" or \"pasted\" (resp.),\n    // so that at all subsequent opportune times (next event or timeout),\n    // will check for expected typed or pasted text.\n    // Need to check repeatedly because #135: in Safari 5.1 (at least),\n    // after selecting something and then typing, the textarea is\n    // incorrectly reported as selected during the input event (but not\n    // subsequently).\n    var checkTextarea = noop, timeoutId;\n    function checkTextareaFor(checker) {\n      checkTextarea = checker;\n      clearTimeout(timeoutId);\n      timeoutId = setTimeout(checker);\n    }\n    target.bind('keydown keypress input keyup focusout paste', function(e) { checkTextarea(e); });\n\n\n    // -*- public methods -*- //\n    function select(text) {\n      // check textarea at least once/one last time before munging (so\n      // no race condition if selection happens after keypress/paste but\n      // before checkTextarea), then never again ('cos it's been munged)\n      checkTextarea();\n      checkTextarea = noop;\n      clearTimeout(timeoutId);\n\n      textarea.val(text);\n      if (text && textarea[0].select) textarea[0].select();\n      shouldBeSelected = !!text;\n    }\n    var shouldBeSelected = false;\n\n    // -*- helper subroutines -*- //\n\n    // Determine whether there's a selection in the textarea.\n    // This will always return false in IE < 9, which don't support\n    // HTMLTextareaElement::selection{Start,End}.\n    function hasSelection() {\n      var dom = textarea[0];\n\n      if (!('selectionStart' in dom)) return false;\n      return dom.selectionStart !== dom.selectionEnd;\n    }\n\n    function handleKey() {\n      handlers.keystroke(stringify(keydown), keydown);\n    }\n\n    // -*- event handlers -*- //\n    function onKeydown(e) {\n      keydown = e;\n      keypress = null;\n\n      if (shouldBeSelected) checkTextareaFor(function(e) {\n        if (!(e && e.type === 'focusout') && textarea[0].select) {\n          textarea[0].select(); // re-select textarea in case it's an unrecognized\n        }\n        checkTextarea = noop; // key that clears the selection, then never\n        clearTimeout(timeoutId); // again, 'cos next thing might be blur\n      });\n\n      handleKey();\n    }\n\n    function onKeypress(e) {\n      // call the key handler for repeated keypresses.\n      // This excludes keypresses that happen directly\n      // after keydown.  In that case, there will be\n      // no previous keypress, so we skip it here\n      if (keydown && keypress) handleKey();\n\n      keypress = e;\n\n      checkTextareaFor(typedText);\n    }\n    function typedText() {\n      // If there is a selection, the contents of the textarea couldn't\n      // possibly have just been typed in.\n      // This happens in browsers like Firefox and Opera that fire\n      // keypress for keystrokes that are not text entry and leave the\n      // selection in the textarea alone, such as Ctrl-C.\n      // Note: we assume that browsers that don't support hasSelection()\n      // also never fire keypress on keystrokes that are not text entry.\n      // This seems reasonably safe because:\n      // - all modern browsers including IE 9+ support hasSelection(),\n      //   making it extremely unlikely any browser besides IE < 9 won't\n      // - as far as we know IE < 9 never fires keypress on keystrokes\n      //   that aren't text entry, which is only as reliable as our\n      //   tests are comprehensive, but the IE < 9 way to do\n      //   hasSelection() is poorly documented and is also only as\n      //   reliable as our tests are comprehensive\n      // If anything like #40 or #71 is reported in IE < 9, see\n      // b1318e5349160b665003e36d4eedd64101ceacd8\n      if (hasSelection()) return;\n\n      var text = textarea.val();\n      if (text.length === 1) {\n        textarea.val('');\n        handlers.typedText(text);\n      } // in Firefox, keys that don't type text, just clear seln, fire keypress\n      // https://github.com/mathquill/mathquill/issues/293#issuecomment-40997668\n      else if (text && textarea[0].select) textarea[0].select(); // re-select if that's why we're here\n    }\n\n    function onBlur() { keydown = keypress = null; }\n\n    function onPaste(e) {\n      // browsers are dumb.\n      //\n      // In Linux, middle-click pasting causes onPaste to be called,\n      // when the textarea is not necessarily focused.  We focus it\n      // here to ensure that the pasted text actually ends up in the\n      // textarea.\n      //\n      // It's pretty nifty that by changing focus in this handler,\n      // we can change the target of the default action.  (This works\n      // on keydown too, FWIW).\n      //\n      // And by nifty, we mean dumb (but useful sometimes).\n      textarea.focus();\n\n      checkTextareaFor(pastedText);\n    }\n    function pastedText() {\n      var text = textarea.val();\n      textarea.val('');\n      if (text) handlers.paste(text);\n    }\n\n    // -*- attach event handlers -*- //\n    target.bind({\n      keydown: onKeydown,\n      keypress: onKeypress,\n      focusout: onBlur,\n      paste: onPaste\n    });\n\n    // -*- export public methods -*- //\n    return {\n      select: select\n    };\n  };\n}());\n/***********************************************\n * Export math in a human-readable text format\n * As you can see, only half-baked so far.\n **********************************************/\n\nController.open(function(_, super_) {\n  _.exportText = function() {\n    return this.root.foldChildren('', function(text, child) {\n      return text + child.text();\n    });\n  };\n});\nController.open(function(_) {\n  _.focusBlurEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor;\n    var blurTimeout;\n    ctrlr.textarea.focus(function() {\n      ctrlr.blurred = false;\n      clearTimeout(blurTimeout);\n      ctrlr.container.addClass('mq-focused');\n      if (!cursor.parent)\n        cursor.insAtRightEnd(root);\n      if (cursor.selection) {\n        cursor.selection.jQ.removeClass('mq-blur');\n        ctrlr.selectionChanged(); //re-select textarea contents after tabbing away and back\n      }\n      else\n        cursor.show();\n    }).blur(function() {\n      ctrlr.blurred = true;\n      blurTimeout = setTimeout(function() { // wait for blur on window; if\n        root.postOrder('intentionalBlur'); // none, intentional blur: #264\n        cursor.clearSelection().endSelection();\n        blur();\n      });\n      $(window).on('blur', windowBlur);\n    });\n    function windowBlur() { // blur event also fired on window, just switching\n      clearTimeout(blurTimeout); // tabs/windows, not intentional blur\n      if (cursor.selection) cursor.selection.jQ.addClass('mq-blur');\n      blur();\n    }\n    function blur() { // not directly in the textarea blur handler so as to be\n      cursor.hide().parent.blur(); // synchronous with/in the same frame as\n      ctrlr.container.removeClass('mq-focused'); // clearing/blurring selection\n      $(window).off('blur', windowBlur);\n    }\n    ctrlr.blurred = true;\n    cursor.hide().parent.blur();\n  };\n});\n\n/**\n * TODO: I wanted to move MathBlock::focus and blur here, it would clean\n * up lots of stuff like, TextBlock::focus is set to MathBlock::focus\n * and TextBlock::blur calls MathBlock::blur, when instead they could\n * use inheritance and super_.\n *\n * Problem is, there's lots of calls to .focus()/.blur() on nodes\n * outside Controller::focusBlurEvents(), such as .postOrder('blur') on\n * insertion, which if MathBlock::blur becomes Node::blur, would add the\n * 'blur' CSS class to all Symbol's (because .isEmpty() is true for all\n * of them).\n *\n * I'm not even sure there aren't other troublesome calls to .focus() or\n * .blur(), so this is TODO for now.\n */\n/*****************************************\n * Deals with the browser DOM events from\n * interaction with the typist.\n ****************************************/\n\nController.open(function(_) {\n  _.keystroke = function(key, evt) {\n    this.cursor.parent.keystroke(key, evt, this);\n  };\n});\n\nNode.open(function(_) {\n  _.keystroke = function(key, e, ctrlr) {\n    var cursor = ctrlr.cursor;\n\n    switch (key) {\n    case 'Ctrl-Shift-Backspace':\n    case 'Ctrl-Backspace':\n      ctrlr.ctrlDeleteDir(L);\n      break;\n\n    case 'Shift-Backspace':\n    case 'Backspace':\n      ctrlr.backspace();\n      break;\n\n    // Tab or Esc -> go one block right if it exists, else escape right.\n    case 'Esc':\n    case 'Tab':\n      ctrlr.escapeDir(R, key, e);\n      return;\n\n    // Shift-Tab -> go one block left if it exists, else escape left.\n    case 'Shift-Tab':\n    case 'Shift-Esc':\n      ctrlr.escapeDir(L, key, e);\n      return;\n\n    // End -> move to the end of the current block.\n    case 'End':\n      ctrlr.notify('move').cursor.insAtRightEnd(cursor.parent);\n      break;\n\n    // Ctrl-End -> move all the way to the end of the root block.\n    case 'Ctrl-End':\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      break;\n\n    // Shift-End -> select to the end of the current block.\n    case 'Shift-End':\n      while (cursor[R]) {\n        ctrlr.selectRight();\n      }\n      break;\n\n    // Ctrl-Shift-End -> select to the end of the root block.\n    case 'Ctrl-Shift-End':\n      while (cursor[R] || cursor.parent !== ctrlr.root) {\n        ctrlr.selectRight();\n      }\n      break;\n\n    // Home -> move to the start of the root block or the current block.\n    case 'Home':\n      ctrlr.notify('move').cursor.insAtLeftEnd(cursor.parent);\n      break;\n\n    // Ctrl-Home -> move to the start of the current block.\n    case 'Ctrl-Home':\n      ctrlr.notify('move').cursor.insAtLeftEnd(ctrlr.root);\n      break;\n\n    // Shift-Home -> select to the start of the current block.\n    case 'Shift-Home':\n      while (cursor[L]) {\n        ctrlr.selectLeft();\n      }\n      break;\n\n    // Ctrl-Shift-Home -> move to the start of the root block.\n    case 'Ctrl-Shift-Home':\n      while (cursor[L] || cursor.parent !== ctrlr.root) {\n        ctrlr.selectLeft();\n      }\n      break;\n\n    case 'Left': ctrlr.moveLeft(); break;\n    case 'Shift-Left': ctrlr.selectLeft(); break;\n    case 'Ctrl-Left': break;\n\n    case 'Right': ctrlr.moveRight(); break;\n    case 'Shift-Right': ctrlr.selectRight(); break;\n    case 'Ctrl-Right': break;\n\n    case 'Up': ctrlr.moveUp(); break;\n    case 'Down': ctrlr.moveDown(); break;\n\n    case 'Shift-Up':\n      if (cursor[L]) {\n        while (cursor[L]) ctrlr.selectLeft();\n      } else {\n        ctrlr.selectLeft();\n      }\n\n    case 'Shift-Down':\n      if (cursor[R]) {\n        while (cursor[R]) ctrlr.selectRight();\n      }\n      else {\n        ctrlr.selectRight();\n      }\n\n    case 'Ctrl-Up': break;\n    case 'Ctrl-Down': break;\n\n    case 'Ctrl-Shift-Del':\n    case 'Ctrl-Del':\n      ctrlr.ctrlDeleteDir(R);\n      break;\n\n    case 'Shift-Del':\n    case 'Del':\n      ctrlr.deleteForward();\n      break;\n\n    case 'Meta-A':\n    case 'Ctrl-A':\n      ctrlr.notify('move').cursor.insAtRightEnd(ctrlr.root);\n      while (cursor[L]) ctrlr.selectLeft();\n      break;\n\n    default:\n      return;\n    }\n    e.preventDefault();\n    ctrlr.scrollHoriz();\n  };\n\n  _.moveOutOf = // called by Controller::escapeDir, moveDir\n  _.moveTowards = // called by Controller::moveDir\n  _.deleteOutOf = // called by Controller::deleteDir\n  _.deleteTowards = // called by Controller::deleteDir\n  _.unselectInto = // called by Controller::selectDir\n  _.selectOutOf = // called by Controller::selectDir\n  _.selectTowards = // called by Controller::selectDir\n    function() { pray('overridden or never called on this node'); };\n});\n\nController.open(function(_) {\n  this.onNotify(function(e) {\n    if (e === 'move' || e === 'upDown') this.show().clearSelection();\n  });\n  _.escapeDir = function(dir, key, e) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n\n    // only prevent default of Tab if not in the root editable\n    if (cursor.parent !== this.root) e.preventDefault();\n\n    // want to be a noop if in the root editable (in fact, Tab has an unrelated\n    // default browser action if so)\n    if (cursor.parent === this.root) return;\n\n    cursor.parent.moveOutOf(dir, cursor);\n    return this.notify('move');\n  };\n\n  optionProcessors.leftRightIntoCmdGoes = function(updown) {\n    if (updown && updown !== 'up' && updown !== 'down') {\n      throw '\"up\" or \"down\" required for leftRightIntoCmdGoes option, '\n            + 'got \"'+updown+'\"';\n    }\n    return updown;\n  };\n  _.moveDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor, updown = cursor.options.leftRightIntoCmdGoes;\n\n    if (cursor.selection) {\n      cursor.insDirOf(dir, cursor.selection.ends[dir]);\n    }\n    else if (cursor[dir]) cursor[dir].moveTowards(dir, cursor, updown);\n    else cursor.parent.moveOutOf(dir, cursor, updown);\n\n    return this.notify('move');\n  };\n  _.moveLeft = function() { return this.moveDir(L); };\n  _.moveRight = function() { return this.moveDir(R); };\n\n  /**\n   * moveUp and moveDown have almost identical algorithms:\n   * - first check left and right, if so insAtLeft/RightEnd of them\n   * - else check the parent's 'upOutOf'/'downOutOf' property:\n   *   + if it's a function, call it with the cursor as the sole argument and\n   *     use the return value as if it were the value of the property\n   *   + if it's a Node, jump up or down into it:\n   *     - if there is a cached Point in the block, insert there\n   *     - else, seekHoriz within the block to the current x-coordinate (to be\n   *       as close to directly above/below the current position as possible)\n   *   + unless it's exactly `true`, stop bubbling\n   */\n  _.moveUp = function() { return moveUpDown(this, 'up'); };\n  _.moveDown = function() { return moveUpDown(this, 'down'); };\n  function moveUpDown(self, dir) {\n    var cursor = self.notify('upDown').cursor;\n    var dirInto = dir+'Into', dirOutOf = dir+'OutOf';\n    if (cursor[R][dirInto]) cursor.insAtLeftEnd(cursor[R][dirInto]);\n    else if (cursor[L][dirInto]) cursor.insAtRightEnd(cursor[L][dirInto]);\n    else {\n      cursor.parent.bubble(function(ancestor) {\n        var prop = ancestor[dirOutOf];\n        if (prop) {\n          if (typeof prop === 'function') prop = ancestor[dirOutOf](cursor);\n          if (prop instanceof Node) cursor.jumpUpDown(ancestor, prop);\n          if (prop !== true) return false;\n        }\n      });\n    }\n    return self;\n  }\n  this.onNotify(function(e) { if (e !== 'upDown') this.upDownCache = {}; });\n\n  this.onNotify(function(e) { if (e === 'edit') this.show().deleteSelection(); });\n  _.deleteDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n\n    var hadSelection = cursor.selection;\n    this.notify('edit'); // deletes selection if present\n    if (!hadSelection) {\n      if (cursor[dir]) cursor[dir].deleteTowards(dir, cursor);\n      else cursor.parent.deleteOutOf(dir, cursor);\n    }\n\n    if (cursor[L].siblingDeleted) cursor[L].siblingDeleted(cursor.options, R);\n    if (cursor[R].siblingDeleted) cursor[R].siblingDeleted(cursor.options, L);\n    cursor.parent.bubble('reflow');\n\n    return this;\n  };\n  _.ctrlDeleteDir = function(dir) {\n    prayDirection(dir);\n    var cursor = this.cursor;\n    if (!cursor[L] || cursor.selection) return ctrlr.deleteDir();\n\n    this.notify('edit');\n    Fragment(cursor.parent.ends[L], cursor[L]).remove();\n    cursor.insAtDirEnd(L, cursor.parent);\n\n    if (cursor[L].siblingDeleted) cursor[L].siblingDeleted(cursor.options, R);\n    if (cursor[R].siblingDeleted) cursor[R].siblingDeleted(cursor.options, L);\n    cursor.parent.bubble('reflow');\n\n    return this;\n  };\n  _.backspace = function() { return this.deleteDir(L); };\n  _.deleteForward = function() { return this.deleteDir(R); };\n\n  this.onNotify(function(e) { if (e !== 'select') this.endSelection(); });\n  _.selectDir = function(dir) {\n    var cursor = this.notify('select').cursor, seln = cursor.selection;\n    prayDirection(dir);\n\n    if (!cursor.anticursor) cursor.startSelection();\n\n    var node = cursor[dir];\n    if (node) {\n      // \"if node we're selecting towards is inside selection (hence retracting)\n      // and is on the *far side* of the selection (hence is only node selected)\n      // and the anticursor is *inside* that node, not just on the other side\"\n      if (seln && seln.ends[dir] === node && cursor.anticursor[-dir] !== node) {\n        node.unselectInto(dir, cursor);\n      }\n      else node.selectTowards(dir, cursor);\n    }\n    else cursor.parent.selectOutOf(dir, cursor);\n\n    cursor.clearSelection();\n    cursor.select() || cursor.show();\n  };\n  _.selectLeft = function() { return this.selectDir(L); };\n  _.selectRight = function() { return this.selectDir(R); };\n});\n// Parser MathBlock\nvar latexMathParser = (function() {\n  function commandToBlock(cmd) { // can also take in a Fragment\n    var block = MathBlock();\n    cmd.adopt(block, 0, 0);\n    return block;\n  }\n  function joinBlocks(blocks) {\n    var firstBlock = blocks[0] || MathBlock();\n\n    for (var i = 1; i < blocks.length; i += 1) {\n      blocks[i].children().adopt(firstBlock, firstBlock.ends[R], 0);\n    }\n\n    return firstBlock;\n  }\n\n  var string = Parser.string;\n  var regex = Parser.regex;\n  var letter = Parser.letter;\n  var any = Parser.any;\n  var optWhitespace = Parser.optWhitespace;\n  var succeed = Parser.succeed;\n  var fail = Parser.fail;\n\n  // Parsers yielding either MathCommands, or Fragments of MathCommands\n  //   (either way, something that can be adopted by a MathBlock)\n  var variable = letter.map(function(c) { return Letter(c); });\n  var symbol = regex(/^[^${}\\\\_^]/).map(function(c) { return VanillaSymbol(c); });\n\n  var controlSequence =\n    regex(/^[^\\\\a-eg-zA-Z]/) // hotfix #164; match MathBlock::write\n    .or(string('\\\\').then(\n      regex(/^[a-z]+/i)\n      .or(regex(/^\\s+/).result(' '))\n      .or(any)\n    )).then(function(ctrlSeq) {\n      var cmdKlass = LatexCmds[ctrlSeq];\n\n      if (cmdKlass) {\n        return cmdKlass(ctrlSeq).parser();\n      }\n      else {\n        return fail('unknown command: \\\\'+ctrlSeq);\n      }\n    })\n  ;\n\n  var command =\n    controlSequence\n    .or(variable)\n    .or(symbol)\n  ;\n\n  // Parsers yielding MathBlocks\n  var mathGroup = string('{').then(function() { return mathSequence; }).skip(string('}'));\n  var mathBlock = optWhitespace.then(mathGroup.or(command.map(commandToBlock)));\n  var mathSequence = mathBlock.many().map(joinBlocks).skip(optWhitespace);\n\n  var optMathBlock =\n    string('[').then(\n      mathBlock.then(function(block) {\n        return block.join('latex') !== ']' ? succeed(block) : fail();\n      })\n      .many().map(joinBlocks).skip(optWhitespace)\n    ).skip(string(']'))\n  ;\n\n  var latexMath = mathSequence;\n\n  latexMath.block = mathBlock;\n  latexMath.optBlock = optMathBlock;\n  return latexMath;\n})();\n\nController.open(function(_, super_) {\n  _.exportLatex = function() {\n    return this.root.latex().replace(/(\\\\[a-z]+) (?![a-z])/ig,'$1');\n  };\n  _.writeLatex = function(latex) {\n    var cursor = this.notify('edit').cursor;\n\n    var all = Parser.all;\n    var eof = Parser.eof;\n\n    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);\n\n    if (block && !block.isEmpty()) {\n      block.children().adopt(cursor.parent, cursor[L], cursor[R]);\n      var jQ = block.jQize();\n      jQ.insertBefore(cursor.jQ);\n      cursor[L] = block.ends[R];\n      block.finalizeInsert(cursor.options, cursor);\n      if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);\n      if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);\n      cursor.parent.bubble('reflow');\n    }\n\n    return this;\n  };\n  _.renderLatexMath = function(latex) {\n    var root = this.root, cursor = this.cursor;\n\n    var all = Parser.all;\n    var eof = Parser.eof;\n\n    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);\n\n    root.eachChild('postOrder', 'dispose');\n    root.ends[L] = root.ends[R] = 0;\n\n    if (block) {\n      block.children().adopt(root, 0, 0);\n    }\n\n    var jQ = root.jQ;\n\n    if (block) {\n      var html = block.join('html');\n      jQ.html(html);\n      root.jQize(jQ.children());\n      root.finalizeInsert(cursor.options);\n    }\n    else {\n      jQ.empty();\n    }\n\n    delete cursor.selection;\n    cursor.insAtRightEnd(root);\n  };\n  _.renderLatexText = function(latex) {\n    var root = this.root, cursor = this.cursor;\n\n    root.jQ.children().slice(1).remove();\n    root.eachChild('postOrder', 'dispose');\n    root.ends[L] = root.ends[R] = 0;\n    delete cursor.selection;\n    cursor.show().insAtRightEnd(root);\n\n    var regex = Parser.regex;\n    var string = Parser.string;\n    var eof = Parser.eof;\n    var all = Parser.all;\n\n    // Parser RootMathCommand\n    var mathMode = string('$').then(latexMathParser)\n      // because TeX is insane, math mode doesn't necessarily\n      // have to end.  So we allow for the case that math mode\n      // continues to the end of the stream.\n      .skip(string('$').or(eof))\n      .map(function(block) {\n        // HACK FIXME: this shouldn't have to have access to cursor\n        var rootMathCommand = RootMathCommand(cursor);\n\n        rootMathCommand.createBlocks();\n        var rootMathBlock = rootMathCommand.ends[L];\n        block.children().adopt(rootMathBlock, 0, 0);\n\n        return rootMathCommand;\n      })\n    ;\n\n    var escapedDollar = string('\\\\$').result('$');\n    var textChar = escapedDollar.or(regex(/^[^$]/)).map(VanillaSymbol);\n    var latexText = mathMode.or(textChar).many();\n    var commands = latexText.skip(eof).or(all.result(false)).parse(latex);\n\n    if (commands) {\n      for (var i = 0; i < commands.length; i += 1) {\n        commands[i].adopt(root, root.ends[R], 0);\n      }\n\n      root.jQize().appendTo(root.jQ);\n\n      root.finalizeInsert(cursor.options);\n    }\n  };\n});\n/********************************************************\n * Deals with mouse events for clicking, drag-to-select\n *******************************************************/\n\nController.open(function(_) {\n  Options.p.ignoreNextMousedown = noop;\n  _.delegateMouseEvents = function() {\n    var ultimateRootjQ = this.root.jQ;\n    //drag-to-select event handling\n    this.container.bind('mousedown.mathquill', function(e) {\n      var rootjQ = $(e.target).closest('.mq-root-block');\n      var root = Node.byId[rootjQ.attr(mqBlockId) || ultimateRootjQ.attr(mqBlockId)];\n      var ctrlr = root.controller, cursor = ctrlr.cursor, blink = cursor.blink;\n      var textareaSpan = ctrlr.textareaSpan, textarea = ctrlr.textarea;\n\n      e.preventDefault(); // doesn't work in IE\\u22648, but it's a one-line fix:\n      e.target.unselectable = true; // http://jsbin.com/yagekiji/1\n\n      if (cursor.options.ignoreNextMousedown(e)) return;\n      else cursor.options.ignoreNextMousedown = noop;\n\n      var target;\n      function mousemove(e) { target = $(e.target); }\n      function docmousemove(e) {\n        if (!cursor.anticursor) cursor.startSelection();\n        ctrlr.seek(target, e.pageX, e.pageY).cursor.select();\n        target = undefined;\n      }\n      // outside rootjQ, the MathQuill node corresponding to the target (if any)\n      // won't be inside this root, so don't mislead Controller::seek with it\n\n      function mouseup(e) {\n        cursor.blink = blink;\n        if (!cursor.selection) {\n          if (ctrlr.editable) {\n            cursor.show();\n          }\n          else {\n            textareaSpan.detach();\n          }\n        }\n\n        // delete the mouse handlers now that we're not dragging anymore\n        rootjQ.unbind('mousemove', mousemove);\n        $(e.target.ownerDocument).unbind('mousemove', docmousemove).unbind('mouseup', mouseup);\n      }\n\n      if (ctrlr.blurred) {\n        if (!ctrlr.editable) rootjQ.prepend(textareaSpan);\n        textarea.focus();\n      }\n\n      cursor.blink = noop;\n      ctrlr.seek($(e.target), e.pageX, e.pageY).cursor.startSelection();\n\n      rootjQ.mousemove(mousemove);\n      $(e.target.ownerDocument).mousemove(docmousemove).mouseup(mouseup);\n      // listen on document not just body to not only hear about mousemove and\n      // mouseup on page outside field, but even outside page, except iframes: https://github.com/mathquill/mathquill/commit/8c50028afcffcace655d8ae2049f6e02482346c5#commitcomment-6175800\n    });\n  }\n});\n\nController.open(function(_) {\n  _.seek = function(target, pageX, pageY) {\n    var cursor = this.notify('select').cursor;\n\n    if (target) {\n      var nodeId = target.attr(mqBlockId) || target.attr(mqCmdId);\n      if (!nodeId) {\n        var targetParent = target.parent();\n        nodeId = targetParent.attr(mqBlockId) || targetParent.attr(mqCmdId);\n      }\n    }\n    var node = nodeId ? Node.byId[nodeId] : this.root;\n    pray('nodeId is the id of some Node that exists', node);\n\n    // don't clear selection until after getting node from target, in case\n    // target was selection span, otherwise target will have no parent and will\n    // seek from root, which is less accurate (e.g. fraction)\n    cursor.clearSelection().show();\n\n    node.seek(pageX, cursor);\n    this.scrollHoriz(); // before .selectFrom when mouse-selecting, so\n                        // always hits no-selection case in scrollHoriz and scrolls slower\n    return this;\n  };\n});\n/***********************************************\n * Horizontal panning for editable fields that\n * overflow their width\n **********************************************/\n\nController.open(function(_) {\n  _.scrollHoriz = function() {\n    var cursor = this.cursor, seln = cursor.selection;\n    var rootRect = this.root.jQ[0].getBoundingClientRect();\n    if (!seln) {\n      var x = cursor.jQ[0].getBoundingClientRect().left;\n      if (x > rootRect.right - 20) var scrollBy = x - (rootRect.right - 20);\n      else if (x < rootRect.left + 20) var scrollBy = x - (rootRect.left + 20);\n      else return;\n    }\n    else {\n      var rect = seln.jQ[0].getBoundingClientRect();\n      var overLeft = rect.left - (rootRect.left + 20);\n      var overRight = rect.right - (rootRect.right - 20);\n      if (seln.ends[L] === cursor[R]) {\n        if (overLeft < 0) var scrollBy = overLeft;\n        else if (overRight > 0) {\n          if (rect.left - overRight < rootRect.left + 20) var scrollBy = overLeft;\n          else var scrollBy = overRight;\n        }\n        else return;\n      }\n      else {\n        if (overRight > 0) var scrollBy = overRight;\n        else if (overLeft < 0) {\n          if (rect.right - overLeft > rootRect.right - 20) var scrollBy = overRight;\n          else var scrollBy = overLeft;\n        }\n        else return;\n      }\n    }\n    this.root.jQ.stop().animate({ scrollLeft: '+=' + scrollBy}, 100);\n  };\n});\n/*********************************************\n * Manage the MathQuill instance's textarea\n * (as owned by the Controller)\n ********************************************/\n\nController.open(function(_) {\n  Options.p.substituteTextarea = function() {\n    return $('<textarea autocapitalize=off autocomplete=off autocorrect=off ' +\n               'spellcheck=false x-palm-disable-ste-all=true />')[0];\n  };\n  _.createTextarea = function() {\n    var textareaSpan = this.textareaSpan = $('<span class=\"mq-textarea\"></span>'),\n      textarea = this.options.substituteTextarea();\n    if (!textarea.nodeType) {\n      throw 'substituteTextarea() must return a DOM element, got ' + textarea;\n    }\n    textarea = this.textarea = $(textarea).appendTo(textareaSpan);\n\n    var ctrlr = this;\n    ctrlr.cursor.selectionChanged = function() { ctrlr.selectionChanged(); };\n    ctrlr.container.bind('copy', function() { ctrlr.setTextareaSelection(); });\n  };\n  _.selectionChanged = function() {\n    var ctrlr = this;\n    forceIERedraw(ctrlr.container[0]);\n\n    // throttle calls to setTextareaSelection(), because setting textarea.value\n    // and/or calling textarea.select() can have anomalously bad performance:\n    // https://github.com/mathquill/mathquill/issues/43#issuecomment-1399080\n    if (ctrlr.textareaSelectionTimeout === undefined) {\n      ctrlr.textareaSelectionTimeout = setTimeout(function() {\n        ctrlr.setTextareaSelection();\n      });\n    }\n  };\n  _.setTextareaSelection = function() {\n    this.textareaSelectionTimeout = undefined;\n    var latex = '';\n    if (this.cursor.selection) {\n      latex = this.cursor.selection.join('latex');\n      if (this.options.statelessClipboard) {\n        // FIXME: like paste, only this works for math fields; should ask parent\n        latex = '$' + latex + '$';\n      }\n    }\n    this.selectFn(latex);\n  };\n  _.staticMathTextareaEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,\n      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;\n\n    this.container.prepend('<span class=\"mq-selectable\">$'+ctrlr.exportLatex()+'$</span>');\n    ctrlr.blurred = true;\n    textarea.bind('cut paste', false)\n    .focus(function() { ctrlr.blurred = false; }).blur(function() {\n      if (cursor.selection) cursor.selection.clear();\n      setTimeout(detach); //detaching during blur explodes in WebKit\n    });\n    function detach() {\n      textareaSpan.detach();\n      ctrlr.blurred = true;\n    }\n\n    ctrlr.selectFn = function(text) {\n      textarea.val(text);\n      if (text) textarea.select();\n    };\n  };\n  _.editablesTextareaEvents = function() {\n    var ctrlr = this, root = ctrlr.root, cursor = ctrlr.cursor,\n      textarea = ctrlr.textarea, textareaSpan = ctrlr.textareaSpan;\n\n    var keyboardEventsShim = saneKeyboardEvents(textarea, this);\n    this.selectFn = function(text) { keyboardEventsShim.select(text); };\n\n    this.container.prepend(textareaSpan)\n    .on('cut', function(e) {\n      if (cursor.selection) {\n        setTimeout(function() {\n          ctrlr.notify('edit'); // deletes selection if present\n          cursor.parent.bubble('reflow');\n        });\n      }\n    });\n\n    this.focusBlurEvents();\n  };\n  _.typedText = function(ch) {\n    if (ch === '\\n') return this.handle('enter');\n    var cursor = this.notify().cursor;\n    cursor.parent.write(cursor, ch);\n    this.scrollHoriz();\n  };\n  _.paste = function(text) {\n    // TODO: document `statelessClipboard` config option in README, after\n    // making it work like it should, that is, in both text and math mode\n    // (currently only works in math fields, so worse than pointless, it\n    //  only gets in the way by \\text{}-ifying pasted stuff and $-ifying\n    //  cut/copied LaTeX)\n    if (this.options.statelessClipboard) {\n      if (text.slice(0,1) === '$' && text.slice(-1) === '$') {\n        text = text.slice(1, -1);\n      }\n      else {\n        text = '\\\\text{'+text+'}';\n      }\n    }\n    // FIXME: this always inserts math or a TextBlock, even in a RootTextBlock\n    this.writeLatex(text).cursor.show();\n  };\n});\n/*************************************************\n * Abstract classes of math blocks and commands.\n ************************************************/\n\n/**\n * Math tree node base class.\n * Some math-tree-specific extensions to Node.\n * Both MathBlock's and MathCommand's descend from it.\n */\nvar MathElement = P(Node, function(_, super_) {\n  _.finalizeInsert = function(options, cursor) { // `cursor` param is only for\n      // SupSub::contactWeld, and is deliberately only passed in by writeLatex,\n      // see ea7307eb4fac77c149a11ffdf9a831df85247693\n    var self = this;\n    self.postOrder('finalizeTree', options);\n    self.postOrder('contactWeld', cursor);\n\n    // note: this order is important.\n    // empty elements need the empty box provided by blur to\n    // be present in order for their dimensions to be measured\n    // correctly by 'reflow' handlers.\n    self.postOrder('blur');\n\n    self.postOrder('reflow');\n    if (self[R].siblingCreated) self[R].siblingCreated(options, L);\n    if (self[L].siblingCreated) self[L].siblingCreated(options, R);\n    self.bubble('reflow');\n  };\n});\n\n/**\n * Commands and operators, like subscripts, exponents, or fractions.\n * Descendant commands are organized into blocks.\n */\nvar MathCommand = P(MathElement, function(_, super_) {\n  _.init = function(ctrlSeq, htmlTemplate, textTemplate) {\n    var cmd = this;\n    super_.init.call(cmd);\n\n    if (!cmd.ctrlSeq) cmd.ctrlSeq = ctrlSeq;\n    if (htmlTemplate) cmd.htmlTemplate = htmlTemplate;\n    if (textTemplate) cmd.textTemplate = textTemplate;\n  };\n\n  // obvious methods\n  _.replaces = function(replacedFragment) {\n    replacedFragment.disown();\n    this.replacedFragment = replacedFragment;\n  };\n  _.isEmpty = function() {\n    return this.foldChildren(true, function(isEmpty, child) {\n      return isEmpty && child.isEmpty();\n    });\n  };\n\n  _.parser = function() {\n    var block = latexMathParser.block;\n    var self = this;\n\n    return block.times(self.numBlocks()).map(function(blocks) {\n      self.blocks = blocks;\n\n      for (var i = 0; i < blocks.length; i += 1) {\n        blocks[i].adopt(self, self.ends[R], 0);\n      }\n\n      return self;\n    });\n  };\n\n  // createLeftOf(cursor) and the methods it calls\n  _.createLeftOf = function(cursor) {\n    var cmd = this;\n    var replacedFragment = cmd.replacedFragment;\n\n    cmd.createBlocks();\n    super_.createLeftOf.call(cmd, cursor);\n    if (replacedFragment) {\n      replacedFragment.adopt(cmd.ends[L], 0, 0);\n      replacedFragment.jQ.appendTo(cmd.ends[L].jQ);\n    }\n    cmd.finalizeInsert(cursor.options);\n    cmd.placeCursor(cursor);\n  };\n  _.createBlocks = function() {\n    var cmd = this,\n      numBlocks = cmd.numBlocks(),\n      blocks = cmd.blocks = Array(numBlocks);\n\n    for (var i = 0; i < numBlocks; i += 1) {\n      var newBlock = blocks[i] = MathBlock();\n      newBlock.adopt(cmd, cmd.ends[R], 0);\n    }\n  };\n  _.placeCursor = function(cursor) {\n    //insert the cursor at the right end of the first empty child, searching\n    //left-to-right, or if none empty, the right end child\n    cursor.insAtRightEnd(this.foldChildren(this.ends[L], function(leftward, child) {\n      return leftward.isEmpty() ? leftward : child;\n    }));\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveTowards = function(dir, cursor, updown) {\n    var updownInto = updown && this[updown+'Into'];\n    cursor.insAtDirEnd(-dir, updownInto || this.ends[-dir]);\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (this.isEmpty()) cursor[dir] = this.remove()[dir];\n    else this.moveTowards(dir, cursor, null);\n  };\n  _.selectTowards = function(dir, cursor) {\n    cursor[-dir] = this;\n    cursor[dir] = this[dir];\n  };\n  _.selectChildren = function() {\n    return Selection(this, this);\n  };\n  _.unselectInto = function(dir, cursor) {\n    cursor.insAtDirEnd(-dir, cursor.anticursor.ancestors[this.id]);\n  };\n  _.seek = function(pageX, cursor) {\n    function getBounds(node) {\n      var bounds = {}\n      bounds[L] = node.jQ.offset().left;\n      bounds[R] = bounds[L] + node.jQ.outerWidth();\n      return bounds;\n    }\n\n    var cmd = this;\n    var cmdBounds = getBounds(cmd);\n\n    if (pageX < cmdBounds[L]) return cursor.insLeftOf(cmd);\n    if (pageX > cmdBounds[R]) return cursor.insRightOf(cmd);\n\n    var leftLeftBound = cmdBounds[L];\n    cmd.eachChild(function(block) {\n      var blockBounds = getBounds(block);\n      if (pageX < blockBounds[L]) {\n        // closer to this block's left bound, or the bound left of that?\n        if (pageX - leftLeftBound < blockBounds[L] - pageX) {\n          if (block[L]) cursor.insAtRightEnd(block[L]);\n          else cursor.insLeftOf(cmd);\n        }\n        else cursor.insAtLeftEnd(block);\n        return false;\n      }\n      else if (pageX > blockBounds[R]) {\n        if (block[R]) leftLeftBound = blockBounds[R]; // continue to next block\n        else { // last (rightmost) block\n          // closer to this block's right bound, or the cmd's right bound?\n          if (cmdBounds[R] - pageX < pageX - blockBounds[R]) {\n            cursor.insRightOf(cmd);\n          }\n          else cursor.insAtRightEnd(block);\n        }\n      }\n      else {\n        block.seek(pageX, cursor);\n        return false;\n      }\n    });\n  }\n\n  // methods involved in creating and cross-linking with HTML DOM nodes\n  /*\n    They all expect an .htmlTemplate like\n      '<span>&0</span>'\n    or\n      '<span><span>&0</span><span>&1</span></span>'\n\n    See html.test.js for more examples.\n\n    Requirements:\n    - For each block of the command, there must be exactly one \"block content\n      marker\" of the form '&<number>' where <number> is the 0-based index of the\n      block. (Like the LaTeX \\newcommand syntax, but with a 0-based rather than\n      1-based index, because JavaScript because C because Dijkstra.)\n    - The block content marker must be the sole contents of the containing\n      element, there can't even be surrounding whitespace, or else we can't\n      guarantee sticking to within the bounds of the block content marker when\n      mucking with the HTML DOM.\n    - The HTML not only must be well-formed HTML (of course), but also must\n      conform to the XHTML requirements on tags, specifically all tags must\n      either be self-closing (like '<br/>') or come in matching pairs.\n      Close tags are never optional.\n\n    Note that &<number> isn't well-formed HTML; if you wanted a literal '&123',\n    your HTML template would have to have '&amp;123'.\n  */\n  _.numBlocks = function() {\n    var matches = this.htmlTemplate.match(/&\\d+/g);\n    return matches ? matches.length : 0;\n  };\n  _.html = function() {\n    // Render the entire math subtree rooted at this command, as HTML.\n    // Expects .createBlocks() to have been called already, since it uses the\n    // .blocks array of child blocks.\n    //\n    // See html.test.js for example templates and intended outputs.\n    //\n    // Given an .htmlTemplate as described above,\n    // - insert the mathquill-command-id attribute into all top-level tags,\n    //   which will be used to set this.jQ in .jQize().\n    //   This is straightforward:\n    //     * tokenize into tags and non-tags\n    //     * loop through top-level tokens:\n    //         * add #cmdId attribute macro to top-level self-closing tags\n    //         * else add #cmdId attribute macro to top-level open tags\n    //             * skip the matching top-level close tag and all tag pairs\n    //               in between\n    // - for each block content marker,\n    //     + replace it with the contents of the corresponding block,\n    //       rendered as HTML\n    //     + insert the mathquill-block-id attribute into the containing tag\n    //   This is even easier, a quick regex replace, since block tags cannot\n    //   contain anything besides the block content marker.\n    //\n    // Two notes:\n    // - The outermost loop through top-level tokens should never encounter any\n    //   top-level close tags, because we should have first encountered a\n    //   matching top-level open tag, all inner tags should have appeared in\n    //   matching pairs and been skipped, and then we should have skipped the\n    //   close tag in question.\n    // - All open tags should have matching close tags, which means our inner\n    //   loop should always encounter a close tag and drop nesting to 0. If\n    //   a close tag is missing, the loop will continue until i >= tokens.length\n    //   and token becomes undefined. This will not infinite loop, even in\n    //   production without pray(), because it will then TypeError on .slice().\n\n    var cmd = this;\n    var blocks = cmd.blocks;\n    var cmdId = ' mathquill-command-id=' + cmd.id;\n    var tokens = cmd.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);\n\n    pray('no unmatched angle brackets', tokens.join('') === this.htmlTemplate);\n\n    // add cmdId to all top-level tags\n    for (var i = 0, token = tokens[0]; token; i += 1, token = tokens[i]) {\n      // top-level self-closing tags\n      if (token.slice(-2) === '/>') {\n        tokens[i] = token.slice(0,-2) + cmdId + '/>';\n      }\n      // top-level open tags\n      else if (token.charAt(0) === '<') {\n        pray('not an unmatched top-level close tag', token.charAt(1) !== '/');\n\n        tokens[i] = token.slice(0,-1) + cmdId + '>';\n\n        // skip matching top-level close tag and all tag pairs in between\n        var nesting = 1;\n        do {\n          i += 1, token = tokens[i];\n          pray('no missing close tags', token);\n          // close tags\n          if (token.slice(0,2) === '</') {\n            nesting -= 1;\n          }\n          // non-self-closing open tags\n          else if (token.charAt(0) === '<' && token.slice(-2) !== '/>') {\n            nesting += 1;\n          }\n        } while (nesting > 0);\n      }\n    }\n    return tokens.join('').replace(/>&(\\d+)/g, function($0, $1) {\n      return ' mathquill-block-id=' + blocks[$1].id + '>' + blocks[$1].join('html');\n    });\n  };\n\n  // methods to export a string representation of the math tree\n  _.latex = function() {\n    return this.foldChildren(this.ctrlSeq, function(latex, child) {\n      return latex + '{' + (child.latex() || ' ') + '}';\n    });\n  };\n  _.textTemplate = [''];\n  _.text = function() {\n    var cmd = this, i = 0;\n    return cmd.foldChildren(cmd.textTemplate[i], function(text, child) {\n      i += 1;\n      var child_text = child.text();\n      if (text && cmd.textTemplate[i] === '('\n          && child_text[0] === '(' && child_text.slice(-1) === ')')\n        return text + child_text.slice(1, -1) + cmd.textTemplate[i];\n      return text + child.text() + (cmd.textTemplate[i] || '');\n    });\n  };\n});\n\n/**\n * Lightweight command without blocks or children.\n */\nvar Symbol = P(MathCommand, function(_, super_) {\n  _.init = function(ctrlSeq, html, text) {\n    if (!text) text = ctrlSeq && ctrlSeq.length > 1 ? ctrlSeq.slice(1) : ctrlSeq;\n\n    super_.init.call(this, ctrlSeq, html, [ text ]);\n  };\n\n  _.parser = function() { return Parser.succeed(this); };\n  _.numBlocks = function() { return 0; };\n\n  _.replaces = function(replacedFragment) {\n    replacedFragment.remove();\n  };\n  _.createBlocks = noop;\n\n  _.moveTowards = function(dir, cursor) {\n    cursor.jQ.insDirOf(dir, this.jQ);\n    cursor[-dir] = this;\n    cursor[dir] = this[dir];\n  };\n  _.deleteTowards = function(dir, cursor) {\n    cursor[dir] = this.remove()[dir];\n  };\n  _.seek = function(pageX, cursor) {\n    // insert at whichever side the click was closer to\n    if (pageX - this.jQ.offset().left < this.jQ.outerWidth()/2)\n      cursor.insLeftOf(this);\n    else\n      cursor.insRightOf(this);\n  };\n\n  _.latex = function(){ return this.ctrlSeq; };\n  _.text = function(){ return this.textTemplate; };\n  _.placeCursor = noop;\n  _.isEmpty = function(){ return true; };\n});\nvar VanillaSymbol = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<span>'+(html || ch)+'</span>');\n  };\n});\nvar BinaryOperator = P(Symbol, function(_, super_) {\n  _.init = function(ctrlSeq, html, text) {\n    super_.init.call(this,\n      ctrlSeq, '<span class=\"mq-binary-operator\">'+html+'</span>', text\n    );\n  };\n});\n\n/**\n * Children and parent of MathCommand's. Basically partitions all the\n * symbols and operators that descend (in the Math DOM tree) from\n * ancestor operators.\n */\nvar MathBlock = P(MathElement, function(_, super_) {\n  _.join = function(methodName) {\n    return this.foldChildren('', function(fold, child) {\n      return fold + child[methodName]();\n    });\n  };\n  _.html = function() { return this.join('html'); };\n  _.latex = function() { return this.join('latex'); };\n  _.text = function() {\n    return (this.ends[L] === this.ends[R] && this.ends[L] !== 0) ?\n      this.ends[L].text() :\n      this.join('text')\n    ;\n  };\n\n  _.keystroke = function(key, e, ctrlr) {\n    if (ctrlr.options.spaceBehavesLikeTab\n        && (key === 'Spacebar' || key === 'Shift-Spacebar')) {\n      e.preventDefault();\n      ctrlr.escapeDir(key === 'Shift-Spacebar' ? L : R, key, e);\n      return;\n    }\n    return super_.keystroke.apply(this, arguments);\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveOutOf = function(dir, cursor, updown) {\n    var updownInto = updown && this.parent[updown+'Into'];\n    if (!updownInto && this[dir]) cursor.insAtDirEnd(-dir, this[dir]);\n    else cursor.insDirOf(dir, this.parent);\n  };\n  _.selectOutOf = function(dir, cursor) {\n    cursor.insDirOf(dir, this.parent);\n  };\n  _.deleteOutOf = function(dir, cursor) {\n    cursor.unwrapGramp();\n  };\n  _.seek = function(pageX, cursor) {\n    var node = this.ends[R];\n    if (!node || node.jQ.offset().left + node.jQ.outerWidth() < pageX) {\n      return cursor.insAtRightEnd(this);\n    }\n    if (pageX < this.ends[L].jQ.offset().left) return cursor.insAtLeftEnd(this);\n    while (pageX < node.jQ.offset().left) node = node[L];\n    return node.seek(pageX, cursor);\n  };\n  _.chToCmd = function(ch) {\n    var cons;\n    // exclude f because it gets a dedicated command with more spacing\n    if (ch.match(/^[a-eg-zA-Z]$/))\n      return Letter(ch);\n    else if (/^\\d$/.test(ch))\n      return Digit(ch);\n    else if (cons = CharCmds[ch] || LatexCmds[ch])\n      return cons(ch);\n    else\n      return VanillaSymbol(ch);\n  };\n  _.write = function(cursor, ch) {\n    var cmd = this.chToCmd(ch);\n    if (cursor.selection) cmd.replaces(cursor.replaceSelection());\n    cmd.createLeftOf(cursor.show());\n  };\n\n  _.focus = function() {\n    this.jQ.addClass('mq-hasCursor');\n    this.jQ.removeClass('mq-empty');\n\n    return this;\n  };\n  _.blur = function() {\n    this.jQ.removeClass('mq-hasCursor');\n    if (this.isEmpty())\n      this.jQ.addClass('mq-empty');\n\n    return this;\n  };\n});\n\nAPI.StaticMath = function(APIClasses) {\n  return P(APIClasses.AbstractMathQuill, function(_, super_) {\n    this.RootBlock = MathBlock;\n    _.__mathquillify = function() {\n      super_.__mathquillify.call(this, 'mq-math-mode');\n      this.__controller.delegateMouseEvents();\n      this.__controller.staticMathTextareaEvents();\n      return this;\n    };\n    _.init = function() {\n      super_.init.apply(this, arguments);\n      this.__controller.root.postOrder(\n        'registerInnerField', this.innerFields = [], APIClasses.MathField);\n    };\n    _.latex = function() {\n      var returned = super_.latex.apply(this, arguments);\n      if (arguments.length > 0) {\n        this.__controller.root.postOrder(\n          'registerInnerField', this.innerFields = [], APIClasses.MathField);\n      }\n      return returned;\n    };\n  });\n};\n\nvar RootMathBlock = P(MathBlock, RootBlockMixin);\nAPI.MathField = function(APIClasses) {\n  return P(APIClasses.EditableField, function(_, super_) {\n    this.RootBlock = RootMathBlock;\n    _.__mathquillify = function(opts, interfaceVersion) {\n      this.config(opts);\n      if (interfaceVersion > 1) this.__controller.root.reflow = noop;\n      super_.__mathquillify.call(this, 'mq-editable-field mq-math-mode');\n      delete this.__controller.root.reflow;\n      return this;\n    };\n  });\n};\n/*************************************************\n * Abstract classes of text blocks\n ************************************************/\n\n/**\n * Blocks of plain text, with one or two TextPiece's as children.\n * Represents flat strings of typically serif-font Roman characters, as\n * opposed to hierchical, nested, tree-structured math.\n * Wraps a single HTMLSpanElement.\n */\nvar TextBlock = P(Node, function(_, super_) {\n  _.ctrlSeq = '\\\\text';\n\n  _.replaces = function(replacedText) {\n    if (replacedText instanceof Fragment)\n      this.replacedText = replacedText.remove().jQ.text();\n    else if (typeof replacedText === 'string')\n      this.replacedText = replacedText;\n  };\n\n  _.jQadd = function(jQ) {\n    super_.jQadd.call(this, jQ);\n    if (this.ends[L]) this.ends[L].jQadd(this.jQ[0].firstChild);\n  };\n\n  _.createLeftOf = function(cursor) {\n    var textBlock = this;\n    super_.createLeftOf.call(this, cursor);\n\n    if (textBlock[R].siblingCreated) textBlock[R].siblingCreated(cursor.options, L);\n    if (textBlock[L].siblingCreated) textBlock[L].siblingCreated(cursor.options, R);\n    textBlock.bubble('reflow');\n\n    cursor.insAtRightEnd(textBlock);\n\n    if (textBlock.replacedText)\n      for (var i = 0; i < textBlock.replacedText.length; i += 1)\n        textBlock.write(cursor, textBlock.replacedText.charAt(i));\n  };\n\n  _.parser = function() {\n    var textBlock = this;\n\n    // TODO: correctly parse text mode\n    var string = Parser.string;\n    var regex = Parser.regex;\n    var optWhitespace = Parser.optWhitespace;\n    return optWhitespace\n      .then(string('{')).then(regex(/^[^}]*/)).skip(string('}'))\n      .map(function(text) {\n        if (text.length === 0) return Fragment();\n\n        TextPiece(text).adopt(textBlock, 0, 0);\n        return textBlock;\n      })\n    ;\n  };\n\n  _.textContents = function() {\n    return this.foldChildren('', function(text, child) {\n      return text + child.text;\n    });\n  };\n  _.text = function() { return '\"' + this.textContents() + '\"'; };\n  _.latex = function() {\n    var contents = this.textContents();\n    if (contents.length === 0) return '';\n    return '\\\\text{' + contents + '}';\n  };\n  _.html = function() {\n    return (\n        '<span class=\"mq-text-mode\" mathquill-command-id='+this.id+'>'\n      +   this.textContents()\n      + '</span>'\n    );\n  };\n\n  // editability methods: called by the cursor for editing, cursor movements,\n  // and selection of the MathQuill tree, these all take in a direction and\n  // the cursor\n  _.moveTowards = function(dir, cursor) { cursor.insAtDirEnd(-dir, this); };\n  _.moveOutOf = function(dir, cursor) { cursor.insDirOf(dir, this); };\n  _.unselectInto = _.moveTowards;\n\n  // TODO: make these methods part of a shared mixin or something.\n  _.selectTowards = MathCommand.prototype.selectTowards;\n  _.deleteTowards = MathCommand.prototype.deleteTowards;\n\n  _.selectOutOf = function(dir, cursor) {\n    cursor.insDirOf(dir, this);\n  };\n  _.deleteOutOf = function(dir, cursor) {\n    // backspace and delete at ends of block don't unwrap\n    if (this.isEmpty()) cursor.insRightOf(this);\n  };\n  _.write = function(cursor, ch) {\n    cursor.show().deleteSelection();\n\n    if (ch !== '$') {\n      if (!cursor[L]) TextPiece(ch).createLeftOf(cursor);\n      else cursor[L].appendText(ch);\n    }\n    else if (this.isEmpty()) {\n      cursor.insRightOf(this);\n      VanillaSymbol('\\\\$','$').createLeftOf(cursor);\n    }\n    else if (!cursor[R]) cursor.insRightOf(this);\n    else if (!cursor[L]) cursor.insLeftOf(this);\n    else { // split apart\n      var leftBlock = TextBlock();\n      var leftPc = this.ends[L];\n      leftPc.disown().jQ.detach();\n      leftPc.adopt(leftBlock, 0, 0);\n\n      cursor.insLeftOf(this);\n      super_.createLeftOf.call(leftBlock, cursor);\n    }\n  };\n\n  _.seek = function(pageX, cursor) {\n    cursor.hide();\n    var textPc = fuseChildren(this);\n\n    // insert cursor at approx position in DOMTextNode\n    var avgChWidth = this.jQ.width()/this.text.length;\n    var approxPosition = Math.round((pageX - this.jQ.offset().left)/avgChWidth);\n    if (approxPosition <= 0) cursor.insAtLeftEnd(this);\n    else if (approxPosition >= textPc.text.length) cursor.insAtRightEnd(this);\n    else cursor.insLeftOf(textPc.splitRight(approxPosition));\n\n    // move towards mousedown (pageX)\n    var displ = pageX - cursor.show().offset().left; // displacement\n    var dir = displ && displ < 0 ? L : R;\n    var prevDispl = dir;\n    // displ * prevDispl > 0 iff displacement direction === previous direction\n    while (cursor[dir] && displ * prevDispl > 0) {\n      cursor[dir].moveTowards(dir, cursor);\n      prevDispl = displ;\n      displ = pageX - cursor.offset().left;\n    }\n    if (dir*displ < -dir*prevDispl) cursor[-dir].moveTowards(-dir, cursor);\n\n    if (!cursor.anticursor) {\n      // about to start mouse-selecting, the anticursor is gonna get put here\n      this.anticursorPosition = cursor[L] && cursor[L].text.length;\n      // ^ get it? 'cos if there's no cursor[L], it's 0... I'm a terrible person.\n    }\n    else if (cursor.anticursor.parent === this) {\n      // mouse-selecting within this TextBlock, re-insert the anticursor\n      var cursorPosition = cursor[L] && cursor[L].text.length;;\n      if (this.anticursorPosition === cursorPosition) {\n        cursor.anticursor = Point.copy(cursor);\n      }\n      else {\n        if (this.anticursorPosition < cursorPosition) {\n          var newTextPc = cursor[L].splitRight(this.anticursorPosition);\n          cursor[L] = newTextPc;\n        }\n        else {\n          var newTextPc = cursor[R].splitRight(this.anticursorPosition - cursorPosition);\n        }\n        cursor.anticursor = Point(this, newTextPc[L], newTextPc);\n      }\n    }\n  };\n\n  _.blur = function(cursor) {\n    MathBlock.prototype.blur.call(this);\n    if (!cursor) return;\n    if (this.textContents() === '') {\n      this.remove();\n      if (cursor[L] === this) cursor[L] = this[L];\n      else if (cursor[R] === this) cursor[R] = this[R];\n    }\n    else fuseChildren(this);\n  };\n\n  function fuseChildren(self) {\n    self.jQ[0].normalize();\n\n    var textPcDom = self.jQ[0].firstChild;\n    if (!textPcDom) return;\n    pray('only node in TextBlock span is Text node', textPcDom.nodeType === 3);\n    // nodeType === 3 has meant a Text node since ancient times:\n    //   http://reference.sitepoint.com/javascript/Node/nodeType\n\n    var textPc = TextPiece(textPcDom.data);\n    textPc.jQadd(textPcDom);\n\n    self.children().disown();\n    return textPc.adopt(self, 0, 0);\n  }\n\n  _.focus = MathBlock.prototype.focus;\n});\n\n/**\n * Piece of plain text, with a TextBlock as a parent and no children.\n * Wraps a single DOMTextNode.\n * For convenience, has a .text property that's just a JavaScript string\n * mirroring the text contents of the DOMTextNode.\n * Text contents must always be nonempty.\n */\nvar TextPiece = P(Node, function(_, super_) {\n  _.init = function(text) {\n    super_.init.call(this);\n    this.text = text;\n  };\n  _.jQadd = function(dom) { this.dom = dom; this.jQ = $(dom); };\n  _.jQize = function() {\n    return this.jQadd(document.createTextNode(this.text));\n  };\n  _.appendText = function(text) {\n    this.text += text;\n    this.dom.appendData(text);\n  };\n  _.prependText = function(text) {\n    this.text = text + this.text;\n    this.dom.insertData(0, text);\n  };\n  _.insTextAtDirEnd = function(text, dir) {\n    prayDirection(dir);\n    if (dir === R) this.appendText(text);\n    else this.prependText(text);\n  };\n  _.splitRight = function(i) {\n    var newPc = TextPiece(this.text.slice(i)).adopt(this.parent, this, this[R]);\n    newPc.jQadd(this.dom.splitText(i));\n    this.text = this.text.slice(0, i);\n    return newPc;\n  };\n\n  function endChar(dir, text) {\n    return text.charAt(dir === L ? 0 : -1 + text.length);\n  }\n\n  _.moveTowards = function(dir, cursor) {\n    prayDirection(dir);\n\n    var ch = endChar(-dir, this.text)\n\n    var from = this[-dir];\n    if (from) from.insTextAtDirEnd(ch, dir);\n    else TextPiece(ch).createDir(-dir, cursor);\n\n    return this.deleteTowards(dir, cursor);\n  };\n\n  _.latex = function() { return this.text; };\n\n  _.deleteTowards = function(dir, cursor) {\n    if (this.text.length > 1) {\n      if (dir === R) {\n        this.dom.deleteData(0, 1);\n        this.text = this.text.slice(1);\n      }\n      else {\n        // note that the order of these 2 lines is annoyingly important\n        // (the second line mutates this.text.length)\n        this.dom.deleteData(-1 + this.text.length, 1);\n        this.text = this.text.slice(0, -1);\n      }\n    }\n    else {\n      this.remove();\n      this.jQ.remove();\n      cursor[dir] = this[dir];\n    }\n  };\n\n  _.selectTowards = function(dir, cursor) {\n    prayDirection(dir);\n    var anticursor = cursor.anticursor;\n\n    var ch = endChar(-dir, this.text)\n\n    if (anticursor[dir] === this) {\n      var newPc = TextPiece(ch).createDir(dir, cursor);\n      anticursor[dir] = newPc;\n      cursor.insDirOf(dir, newPc);\n    }\n    else {\n      var from = this[-dir];\n      if (from) from.insTextAtDirEnd(ch, dir);\n      else {\n        var newPc = TextPiece(ch).createDir(-dir, cursor);\n        newPc.jQ.insDirOf(-dir, cursor.selection.jQ);\n      }\n\n      if (this.text.length === 1 && anticursor[-dir] === this) {\n        anticursor[-dir] = this[-dir]; // `this` will be removed in deleteTowards\n      }\n    }\n\n    return this.deleteTowards(dir, cursor);\n  };\n});\n\nCharCmds.$ =\nLatexCmds.text =\nLatexCmds.textnormal =\nLatexCmds.textrm =\nLatexCmds.textup =\nLatexCmds.textmd = TextBlock;\n\nfunction makeTextBlock(latex, tagName, attrs) {\n  return P(TextBlock, {\n    ctrlSeq: latex,\n    htmlTemplate: '<'+tagName+' '+attrs+'>&0</'+tagName+'>'\n  });\n}\n\nLatexCmds.em = LatexCmds.italic = LatexCmds.italics =\nLatexCmds.emph = LatexCmds.textit = LatexCmds.textsl =\n  makeTextBlock('\\\\textit', 'i', 'class=\"mq-text-mode\"');\nLatexCmds.strong = LatexCmds.bold = LatexCmds.textbf =\n  makeTextBlock('\\\\textbf', 'b', 'class=\"mq-text-mode\"');\nLatexCmds.sf = LatexCmds.textsf =\n  makeTextBlock('\\\\textsf', 'span', 'class=\"mq-sans-serif mq-text-mode\"');\nLatexCmds.tt = LatexCmds.texttt =\n  makeTextBlock('\\\\texttt', 'span', 'class=\"mq-monospace mq-text-mode\"');\nLatexCmds.textsc =\n  makeTextBlock('\\\\textsc', 'span', 'style=\"font-variant:small-caps\" class=\"mq-text-mode\"');\nLatexCmds.uppercase =\n  makeTextBlock('\\\\uppercase', 'span', 'style=\"text-transform:uppercase\" class=\"mq-text-mode\"');\nLatexCmds.lowercase =\n  makeTextBlock('\\\\lowercase', 'span', 'style=\"text-transform:lowercase\" class=\"mq-text-mode\"');\n\n\nvar RootMathCommand = P(MathCommand, function(_, super_) {\n  _.init = function(cursor) {\n    super_.init.call(this, '$');\n    this.cursor = cursor;\n  };\n  _.htmlTemplate = '<span class=\"mq-math-mode\">&0</span>';\n  _.createBlocks = function() {\n    super_.createBlocks.call(this);\n\n    this.ends[L].cursor = this.cursor;\n    this.ends[L].write = function(cursor, ch) {\n      if (ch !== '$')\n        MathBlock.prototype.write.call(this, cursor, ch);\n      else if (this.isEmpty()) {\n        cursor.insRightOf(this.parent);\n        this.parent.deleteTowards(dir, cursor);\n        VanillaSymbol('\\\\$','$').createLeftOf(cursor.show());\n      }\n      else if (!cursor[R])\n        cursor.insRightOf(this.parent);\n      else if (!cursor[L])\n        cursor.insLeftOf(this.parent);\n      else\n        MathBlock.prototype.write.call(this, cursor, ch);\n    };\n  };\n  _.latex = function() {\n    return '$' + this.ends[L].latex() + '$';\n  };\n});\n\nvar RootTextBlock = P(RootMathBlock, function(_, super_) {\n  _.keystroke = function(key) {\n    if (key === 'Spacebar' || key === 'Shift-Spacebar') return;\n    return super_.keystroke.apply(this, arguments);\n  };\n  _.write = function(cursor, ch) {\n    cursor.show().deleteSelection();\n    if (ch === '$')\n      RootMathCommand(cursor).createLeftOf(cursor);\n    else {\n      var html;\n      if (ch === '<') html = '&lt;';\n      else if (ch === '>') html = '&gt;';\n      VanillaSymbol(ch, html).createLeftOf(cursor);\n    }\n  };\n});\nAPI.TextField = function(APIClasses) {\n  return P(APIClasses.EditableField, function(_, super_) {\n    this.RootBlock = RootTextBlock;\n    _.__mathquillify = function() {\n      return super_.__mathquillify.call(this, 'mq-editable-field mq-text-mode');\n    };\n    _.latex = function(latex) {\n      if (arguments.length > 0) {\n        this.__controller.renderLatexText(latex);\n        if (this.__controller.blurred) this.__controller.cursor.hide().parent.blur();\n        return this;\n      }\n      return this.__controller.exportLatex();\n    };\n  });\n};\n/************************************\n * Symbols for Advanced Mathematics\n ***********************************/\n\nLatexCmds.notin =\nLatexCmds.cong =\nLatexCmds.equiv =\nLatexCmds.oplus =\nLatexCmds.otimes = P(BinaryOperator, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this, '\\\\'+latex+' ', '&'+latex+';');\n  };\n});\n\nLatexCmds['\\u2260'] = LatexCmds.ne = LatexCmds.neq = bind(BinaryOperator,'\\\\ne ','&ne;');\n\nLatexCmds.ast = LatexCmds.star = LatexCmds.loast = LatexCmds.lowast =\n  bind(BinaryOperator,'\\\\ast ','&lowast;');\n  //case 'there4 = // a special exception for this one, perhaps?\nLatexCmds.therefor = LatexCmds.therefore =\n  bind(BinaryOperator,'\\\\therefore ','&there4;');\n\nLatexCmds.cuz = // l33t\nLatexCmds.because = bind(BinaryOperator,'\\\\because ','&#8757;');\n\nLatexCmds.prop = LatexCmds.propto = bind(BinaryOperator,'\\\\propto ','&prop;');\n\nLatexCmds['\\u2248'] = LatexCmds.asymp = LatexCmds.approx = bind(BinaryOperator,'\\\\approx ','&asymp;');\n\nLatexCmds.isin = LatexCmds['in'] = bind(BinaryOperator,'\\\\in ','&isin;');\n\nLatexCmds.ni = LatexCmds.contains = bind(BinaryOperator,'\\\\ni ','&ni;');\n\nLatexCmds.notni = LatexCmds.niton = LatexCmds.notcontains = LatexCmds.doesnotcontain =\n  bind(BinaryOperator,'\\\\not\\\\ni ','&#8716;');\n\nLatexCmds.sub = LatexCmds.subset = bind(BinaryOperator,'\\\\subset ','&sub;');\n\nLatexCmds.sup = LatexCmds.supset = LatexCmds.superset =\n  bind(BinaryOperator,'\\\\supset ','&sup;');\n\nLatexCmds.nsub = LatexCmds.notsub =\nLatexCmds.nsubset = LatexCmds.notsubset =\n  bind(BinaryOperator,'\\\\not\\\\subset ','&#8836;');\n\nLatexCmds.nsup = LatexCmds.notsup =\nLatexCmds.nsupset = LatexCmds.notsupset =\nLatexCmds.nsuperset = LatexCmds.notsuperset =\n  bind(BinaryOperator,'\\\\not\\\\supset ','&#8837;');\n\nLatexCmds.sube = LatexCmds.subeq = LatexCmds.subsete = LatexCmds.subseteq =\n  bind(BinaryOperator,'\\\\subseteq ','&sube;');\n\nLatexCmds.supe = LatexCmds.supeq =\nLatexCmds.supsete = LatexCmds.supseteq =\nLatexCmds.supersete = LatexCmds.superseteq =\n  bind(BinaryOperator,'\\\\supseteq ','&supe;');\n\nLatexCmds.nsube = LatexCmds.nsubeq =\nLatexCmds.notsube = LatexCmds.notsubeq =\nLatexCmds.nsubsete = LatexCmds.nsubseteq =\nLatexCmds.notsubsete = LatexCmds.notsubseteq =\n  bind(BinaryOperator,'\\\\not\\\\subseteq ','&#8840;');\n\nLatexCmds.nsupe = LatexCmds.nsupeq =\nLatexCmds.notsupe = LatexCmds.notsupeq =\nLatexCmds.nsupsete = LatexCmds.nsupseteq =\nLatexCmds.notsupsete = LatexCmds.notsupseteq =\nLatexCmds.nsupersete = LatexCmds.nsuperseteq =\nLatexCmds.notsupersete = LatexCmds.notsuperseteq =\n  bind(BinaryOperator,'\\\\not\\\\supseteq ','&#8841;');\n\n\n//the canonical sets of numbers\nLatexCmds.N = LatexCmds.naturals = LatexCmds.Naturals =\n  bind(VanillaSymbol,'\\\\mathbb{N}','&#8469;');\n\nLatexCmds.P =\nLatexCmds.primes = LatexCmds.Primes =\nLatexCmds.projective = LatexCmds.Projective =\nLatexCmds.probability = LatexCmds.Probability =\n  bind(VanillaSymbol,'\\\\mathbb{P}','&#8473;');\n\nLatexCmds.Z = LatexCmds.integers = LatexCmds.Integers =\n  bind(VanillaSymbol,'\\\\mathbb{Z}','&#8484;');\n\nLatexCmds.Q = LatexCmds.rationals = LatexCmds.Rationals =\n  bind(VanillaSymbol,'\\\\mathbb{Q}','&#8474;');\n\nLatexCmds.R = LatexCmds.reals = LatexCmds.Reals =\n  bind(VanillaSymbol,'\\\\mathbb{R}','&#8477;');\n\nLatexCmds.C =\nLatexCmds.complex = LatexCmds.Complex =\nLatexCmds.complexes = LatexCmds.Complexes =\nLatexCmds.complexplane = LatexCmds.Complexplane = LatexCmds.ComplexPlane =\n  bind(VanillaSymbol,'\\\\mathbb{C}','&#8450;');\n\nLatexCmds.H = LatexCmds.Hamiltonian = LatexCmds.quaternions = LatexCmds.Quaternions =\n  bind(VanillaSymbol,'\\\\mathbb{H}','&#8461;');\n\n//spacing\nLatexCmds.quad = LatexCmds.emsp = bind(VanillaSymbol,'\\\\quad ','    ');\nLatexCmds.qquad = bind(VanillaSymbol,'\\\\qquad ','        ');\n/* spacing special characters, gonna have to implement this in LatexCommandInput::onText somehow\ncase ',':\n  return VanillaSymbol('\\\\, ',' ');\ncase ':':\n  return VanillaSymbol('\\\\: ','  ');\ncase ';':\n  return VanillaSymbol('\\\\; ','   ');\ncase '!':\n  return Symbol('\\\\! ','<span style=\"margin-right:-.2em\"></span>');\n*/\n\n//binary operators\nLatexCmds.diamond = bind(VanillaSymbol, '\\\\diamond ', '&#9671;');\nLatexCmds.bigtriangleup = bind(VanillaSymbol, '\\\\bigtriangleup ', '&#9651;');\nLatexCmds.ominus = bind(VanillaSymbol, '\\\\ominus ', '&#8854;');\nLatexCmds.uplus = bind(VanillaSymbol, '\\\\uplus ', '&#8846;');\nLatexCmds.bigtriangledown = bind(VanillaSymbol, '\\\\bigtriangledown ', '&#9661;');\nLatexCmds.sqcap = bind(VanillaSymbol, '\\\\sqcap ', '&#8851;');\nLatexCmds.triangleleft = bind(VanillaSymbol, '\\\\triangleleft ', '&#8882;');\nLatexCmds.sqcup = bind(VanillaSymbol, '\\\\sqcup ', '&#8852;');\nLatexCmds.triangleright = bind(VanillaSymbol, '\\\\triangleright ', '&#8883;');\n//circledot is not a not real LaTex command see https://github.com/mathquill/mathquill/pull/552 for more details\nLatexCmds.odot = LatexCmds.circledot = bind(VanillaSymbol, '\\\\odot ', '&#8857;');\nLatexCmds.bigcirc = bind(VanillaSymbol, '\\\\bigcirc ', '&#9711;');\nLatexCmds.dagger = bind(VanillaSymbol, '\\\\dagger ', '&#0134;');\nLatexCmds.ddagger = bind(VanillaSymbol, '\\\\ddagger ', '&#135;');\nLatexCmds.wr = bind(VanillaSymbol, '\\\\wr ', '&#8768;');\nLatexCmds.amalg = bind(VanillaSymbol, '\\\\amalg ', '&#8720;');\n\n//relationship symbols\nLatexCmds.models = bind(VanillaSymbol, '\\\\models ', '&#8872;');\nLatexCmds.prec = bind(VanillaSymbol, '\\\\prec ', '&#8826;');\nLatexCmds.succ = bind(VanillaSymbol, '\\\\succ ', '&#8827;');\nLatexCmds.preceq = bind(VanillaSymbol, '\\\\preceq ', '&#8828;');\nLatexCmds.succeq = bind(VanillaSymbol, '\\\\succeq ', '&#8829;');\nLatexCmds.simeq = bind(VanillaSymbol, '\\\\simeq ', '&#8771;');\nLatexCmds.mid = bind(VanillaSymbol, '\\\\mid ', '&#8739;');\nLatexCmds.ll = bind(VanillaSymbol, '\\\\ll ', '&#8810;');\nLatexCmds.gg = bind(VanillaSymbol, '\\\\gg ', '&#8811;');\nLatexCmds.parallel = bind(VanillaSymbol, '\\\\parallel ', '&#8741;');\nLatexCmds.nparallel = bind(VanillaSymbol, '\\\\nparallel ', '&#8742;');\nLatexCmds.bowtie = bind(VanillaSymbol, '\\\\bowtie ', '&#8904;');\nLatexCmds.sqsubset = bind(VanillaSymbol, '\\\\sqsubset ', '&#8847;');\nLatexCmds.sqsupset = bind(VanillaSymbol, '\\\\sqsupset ', '&#8848;');\nLatexCmds.smile = bind(VanillaSymbol, '\\\\smile ', '&#8995;');\nLatexCmds.sqsubseteq = bind(VanillaSymbol, '\\\\sqsubseteq ', '&#8849;');\nLatexCmds.sqsupseteq = bind(VanillaSymbol, '\\\\sqsupseteq ', '&#8850;');\nLatexCmds.doteq = bind(VanillaSymbol, '\\\\doteq ', '&#8784;');\nLatexCmds.frown = bind(VanillaSymbol, '\\\\frown ', '&#8994;');\nLatexCmds.vdash = bind(VanillaSymbol, '\\\\vdash ', '&#8870;');\nLatexCmds.dashv = bind(VanillaSymbol, '\\\\dashv ', '&#8867;');\nLatexCmds.nless = bind(VanillaSymbol, '\\\\nless ', '&#8814;');\nLatexCmds.ngtr = bind(VanillaSymbol, '\\\\ngtr ', '&#8815;');\n\n//arrows\nLatexCmds.longleftarrow = bind(VanillaSymbol, '\\\\longleftarrow ', '&#8592;');\nLatexCmds.longrightarrow = bind(VanillaSymbol, '\\\\longrightarrow ', '&#8594;');\nLatexCmds.Longleftarrow = bind(VanillaSymbol, '\\\\Longleftarrow ', '&#8656;');\nLatexCmds.Longrightarrow = bind(VanillaSymbol, '\\\\Longrightarrow ', '&#8658;');\nLatexCmds.longleftrightarrow = bind(VanillaSymbol, '\\\\longleftrightarrow ', '&#8596;');\nLatexCmds.updownarrow = bind(VanillaSymbol, '\\\\updownarrow ', '&#8597;');\nLatexCmds.Longleftrightarrow = bind(VanillaSymbol, '\\\\Longleftrightarrow ', '&#8660;');\nLatexCmds.Updownarrow = bind(VanillaSymbol, '\\\\Updownarrow ', '&#8661;');\nLatexCmds.mapsto = bind(VanillaSymbol, '\\\\mapsto ', '&#8614;');\nLatexCmds.nearrow = bind(VanillaSymbol, '\\\\nearrow ', '&#8599;');\nLatexCmds.hookleftarrow = bind(VanillaSymbol, '\\\\hookleftarrow ', '&#8617;');\nLatexCmds.hookrightarrow = bind(VanillaSymbol, '\\\\hookrightarrow ', '&#8618;');\nLatexCmds.searrow = bind(VanillaSymbol, '\\\\searrow ', '&#8600;');\nLatexCmds.leftharpoonup = bind(VanillaSymbol, '\\\\leftharpoonup ', '&#8636;');\nLatexCmds.rightharpoonup = bind(VanillaSymbol, '\\\\rightharpoonup ', '&#8640;');\nLatexCmds.swarrow = bind(VanillaSymbol, '\\\\swarrow ', '&#8601;');\nLatexCmds.leftharpoondown = bind(VanillaSymbol, '\\\\leftharpoondown ', '&#8637;');\nLatexCmds.rightharpoondown = bind(VanillaSymbol, '\\\\rightharpoondown ', '&#8641;');\nLatexCmds.nwarrow = bind(VanillaSymbol, '\\\\nwarrow ', '&#8598;');\n\n//Misc\nLatexCmds.ldots = bind(VanillaSymbol, '\\\\ldots ', '&#8230;');\nLatexCmds.cdots = bind(VanillaSymbol, '\\\\cdots ', '&#8943;');\nLatexCmds.vdots = bind(VanillaSymbol, '\\\\vdots ', '&#8942;');\nLatexCmds.ddots = bind(VanillaSymbol, '\\\\ddots ', '&#8945;');\nLatexCmds.surd = bind(VanillaSymbol, '\\\\surd ', '&#8730;');\nLatexCmds.triangle = bind(VanillaSymbol, '\\\\triangle ', '&#9651;');\nLatexCmds.ell = bind(VanillaSymbol, '\\\\ell ', '&#8467;');\nLatexCmds.top = bind(VanillaSymbol, '\\\\top ', '&#8868;');\nLatexCmds.flat = bind(VanillaSymbol, '\\\\flat ', '&#9837;');\nLatexCmds.natural = bind(VanillaSymbol, '\\\\natural ', '&#9838;');\nLatexCmds.sharp = bind(VanillaSymbol, '\\\\sharp ', '&#9839;');\nLatexCmds.wp = bind(VanillaSymbol, '\\\\wp ', '&#8472;');\nLatexCmds.bot = bind(VanillaSymbol, '\\\\bot ', '&#8869;');\nLatexCmds.clubsuit = bind(VanillaSymbol, '\\\\clubsuit ', '&#9827;');\nLatexCmds.diamondsuit = bind(VanillaSymbol, '\\\\diamondsuit ', '&#9826;');\nLatexCmds.heartsuit = bind(VanillaSymbol, '\\\\heartsuit ', '&#9825;');\nLatexCmds.spadesuit = bind(VanillaSymbol, '\\\\spadesuit ', '&#9824;');\n//not real LaTex command see https://github.com/mathquill/mathquill/pull/552 for more details\nLatexCmds.parallelogram = bind(VanillaSymbol, '\\\\parallelogram ', '&#9649;');\nLatexCmds.square = bind(VanillaSymbol, '\\\\square ', '&#11036;');\n\n//variable-sized\nLatexCmds.oint = bind(VanillaSymbol, '\\\\oint ', '&#8750;');\nLatexCmds.bigcap = bind(VanillaSymbol, '\\\\bigcap ', '&#8745;');\nLatexCmds.bigcup = bind(VanillaSymbol, '\\\\bigcup ', '&#8746;');\nLatexCmds.bigsqcup = bind(VanillaSymbol, '\\\\bigsqcup ', '&#8852;');\nLatexCmds.bigvee = bind(VanillaSymbol, '\\\\bigvee ', '&#8744;');\nLatexCmds.bigwedge = bind(VanillaSymbol, '\\\\bigwedge ', '&#8743;');\nLatexCmds.bigodot = bind(VanillaSymbol, '\\\\bigodot ', '&#8857;');\nLatexCmds.bigotimes = bind(VanillaSymbol, '\\\\bigotimes ', '&#8855;');\nLatexCmds.bigoplus = bind(VanillaSymbol, '\\\\bigoplus ', '&#8853;');\nLatexCmds.biguplus = bind(VanillaSymbol, '\\\\biguplus ', '&#8846;');\n\n//delimiters\nLatexCmds.lfloor = bind(VanillaSymbol, '\\\\lfloor ', '&#8970;');\nLatexCmds.rfloor = bind(VanillaSymbol, '\\\\rfloor ', '&#8971;');\nLatexCmds.lceil = bind(VanillaSymbol, '\\\\lceil ', '&#8968;');\nLatexCmds.rceil = bind(VanillaSymbol, '\\\\rceil ', '&#8969;');\nLatexCmds.opencurlybrace = LatexCmds.lbrace = bind(VanillaSymbol, '\\\\lbrace ', '{');\nLatexCmds.closecurlybrace = LatexCmds.rbrace = bind(VanillaSymbol, '\\\\rbrace ', '}');\nLatexCmds.lbrack = bind(VanillaSymbol, '[');\nLatexCmds.rbrack = bind(VanillaSymbol, ']');\n\n//various symbols\nLatexCmds.slash = bind(VanillaSymbol, '/');\nLatexCmds.vert = bind(VanillaSymbol,'|');\nLatexCmds.perp = LatexCmds.perpendicular = bind(VanillaSymbol,'\\\\perp ','&perp;');\nLatexCmds.nabla = LatexCmds.del = bind(VanillaSymbol,'\\\\nabla ','&nabla;');\nLatexCmds.hbar = bind(VanillaSymbol,'\\\\hbar ','&#8463;');\n\nLatexCmds.AA = LatexCmds.Angstrom = LatexCmds.angstrom =\n  bind(VanillaSymbol,'\\\\text\\\\AA ','&#8491;');\n\nLatexCmds.ring = LatexCmds.circ = LatexCmds.circle =\n  bind(VanillaSymbol,'\\\\circ ','&#8728;');\n\nLatexCmds.bull = LatexCmds.bullet = bind(VanillaSymbol,'\\\\bullet ','&bull;');\n\nLatexCmds.setminus = LatexCmds.smallsetminus =\n  bind(VanillaSymbol,'\\\\setminus ','&#8726;');\n\nLatexCmds.not = //bind(Symbol,'\\\\not ','<span class=\"not\">/</span>');\nLatexCmds['\\u00ac'] = LatexCmds.neg = bind(VanillaSymbol,'\\\\neg ','&not;');\n\nLatexCmds['\\u2026'] = LatexCmds.dots = LatexCmds.ellip = LatexCmds.hellip =\nLatexCmds.ellipsis = LatexCmds.hellipsis =\n  bind(VanillaSymbol,'\\\\dots ','&hellip;');\n\nLatexCmds.converges =\nLatexCmds.darr = LatexCmds.dnarr = LatexCmds.dnarrow = LatexCmds.downarrow =\n  bind(VanillaSymbol,'\\\\downarrow ','&darr;');\n\nLatexCmds.dArr = LatexCmds.dnArr = LatexCmds.dnArrow = LatexCmds.Downarrow =\n  bind(VanillaSymbol,'\\\\Downarrow ','&dArr;');\n\nLatexCmds.diverges = LatexCmds.uarr = LatexCmds.uparrow =\n  bind(VanillaSymbol,'\\\\uparrow ','&uarr;');\n\nLatexCmds.uArr = LatexCmds.Uparrow = bind(VanillaSymbol,'\\\\Uparrow ','&uArr;');\n\nLatexCmds.to = bind(BinaryOperator,'\\\\to ','&rarr;');\n\nLatexCmds.rarr = LatexCmds.rightarrow = bind(VanillaSymbol,'\\\\rightarrow ','&rarr;');\n\nLatexCmds.implies = bind(BinaryOperator,'\\\\Rightarrow ','&rArr;');\n\nLatexCmds.rArr = LatexCmds.Rightarrow = bind(VanillaSymbol,'\\\\Rightarrow ','&rArr;');\n\nLatexCmds.gets = bind(BinaryOperator,'\\\\gets ','&larr;');\n\nLatexCmds.larr = LatexCmds.leftarrow = bind(VanillaSymbol,'\\\\leftarrow ','&larr;');\n\nLatexCmds.impliedby = bind(BinaryOperator,'\\\\Leftarrow ','&lArr;');\n\nLatexCmds.lArr = LatexCmds.Leftarrow = bind(VanillaSymbol,'\\\\Leftarrow ','&lArr;');\n\nLatexCmds.harr = LatexCmds.lrarr = LatexCmds.leftrightarrow =\n  bind(VanillaSymbol,'\\\\leftrightarrow ','&harr;');\n\nLatexCmds.iff = bind(BinaryOperator,'\\\\Leftrightarrow ','&hArr;');\n\nLatexCmds.hArr = LatexCmds.lrArr = LatexCmds.Leftrightarrow =\n  bind(VanillaSymbol,'\\\\Leftrightarrow ','&hArr;');\n\nLatexCmds.Re = LatexCmds.Real = LatexCmds.real = bind(VanillaSymbol,'\\\\Re ','&real;');\n\nLatexCmds.Im = LatexCmds.imag =\nLatexCmds.image = LatexCmds.imagin = LatexCmds.imaginary = LatexCmds.Imaginary =\n  bind(VanillaSymbol,'\\\\Im ','&image;');\n\nLatexCmds.part = LatexCmds.partial = bind(VanillaSymbol,'\\\\partial ','&part;');\n\nLatexCmds.infty = LatexCmds.infin = LatexCmds.infinity =\n  bind(VanillaSymbol,'\\\\infty ','&infin;');\n\nLatexCmds.alef = LatexCmds.alefsym = LatexCmds.aleph = LatexCmds.alephsym =\n  bind(VanillaSymbol,'\\\\aleph ','&alefsym;');\n\nLatexCmds.xist = //LOL\nLatexCmds.xists = LatexCmds.exist = LatexCmds.exists =\n  bind(VanillaSymbol,'\\\\exists ','&exist;');\n  \nLatexCmds.nexists = LatexCmds.nexist =\n      bind(VanillaSymbol, '\\\\nexists ', '&#8708;');\n\nLatexCmds.and = LatexCmds.land = LatexCmds.wedge =\n  bind(VanillaSymbol,'\\\\wedge ','&and;');\n\nLatexCmds.or = LatexCmds.lor = LatexCmds.vee = bind(VanillaSymbol,'\\\\vee ','&or;');\n\nLatexCmds.o = LatexCmds.O =\nLatexCmds.empty = LatexCmds.emptyset =\nLatexCmds.oslash = LatexCmds.Oslash =\nLatexCmds.nothing = LatexCmds.varnothing =\n  bind(BinaryOperator,'\\\\varnothing ','&empty;');\n\nLatexCmds.cup = LatexCmds.union = bind(BinaryOperator,'\\\\cup ','&cup;');\n\nLatexCmds.cap = LatexCmds.intersect = LatexCmds.intersection =\n  bind(BinaryOperator,'\\\\cap ','&cap;');\n\n// FIXME: the correct LaTeX would be ^\\circ but we can't parse that\nLatexCmds.deg = LatexCmds.degree = bind(VanillaSymbol,'\\\\degree ','&deg;');\n\nLatexCmds.ang = LatexCmds.angle = bind(VanillaSymbol,'\\\\angle ','&ang;');\nLatexCmds.measuredangle = bind(VanillaSymbol,'\\\\measuredangle ','&#8737;');\n/*********************************\n * Symbols for Basic Mathematics\n ********************************/\n\nvar Digit = P(VanillaSymbol, function(_, super_) {\n  _.createLeftOf = function(cursor) {\n    if (cursor.options.autoSubscriptNumerals\n        && cursor.parent !== cursor.parent.parent.sub\n        && ((cursor[L] instanceof Variable && cursor[L].isItalic !== false)\n            || (cursor[L] instanceof SupSub\n                && cursor[L][L] instanceof Variable\n                && cursor[L][L].isItalic !== false))) {\n      LatexCmds._().createLeftOf(cursor);\n      super_.createLeftOf.call(this, cursor);\n      cursor.insRightOf(cursor.parent.parent);\n    }\n    else super_.createLeftOf.call(this, cursor);\n  };\n});\n\nvar Variable = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<var>'+(html || ch)+'</var>');\n  };\n  _.text = function() {\n    var text = this.ctrlSeq;\n    if (this[L] && !(this[L] instanceof Variable)\n        && !(this[L] instanceof BinaryOperator)\n        && this[L].ctrlSeq !== \"\\\\ \")\n      text = '*' + text;\n    if (this[R] && !(this[R] instanceof BinaryOperator)\n        && !(this[R] instanceof SupSub))\n      text += '*';\n    return text;\n  };\n});\n\nOptions.p.autoCommands = { _maxLength: 0 };\noptionProcessors.autoCommands = function(cmds) {\n  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {\n    throw '\"'+cmds+'\" not a space-delimited list of only letters';\n  }\n  var list = cmds.split(' '), dict = {}, maxLength = 0;\n  for (var i = 0; i < list.length; i += 1) {\n    var cmd = list[i];\n    if (cmd.length < 2) {\n      throw 'autocommand \"'+cmd+'\" not minimum length of 2';\n    }\n    if (LatexCmds[cmd] === OperatorName) {\n      throw '\"' + cmd + '\" is a built-in operator name';\n    }\n    dict[cmd] = 1;\n    maxLength = max(maxLength, cmd.length);\n  }\n  dict._maxLength = maxLength;\n  return dict;\n};\n\nvar Letter = P(Variable, function(_, super_) {\n  _.init = function(ch) { return super_.init.call(this, this.letter = ch); };\n  _.createLeftOf = function(cursor) {\n    super_.createLeftOf.apply(this, arguments);\n    var autoCmds = cursor.options.autoCommands, maxLength = autoCmds._maxLength;\n    if (maxLength > 0) {\n      // want longest possible autocommand, so join together longest\n      // sequence of letters\n      var str = '', l = this, i = 0;\n      // FIXME: l.ctrlSeq === l.letter checks if first or last in an operator name\n      while (l instanceof Letter && l.ctrlSeq === l.letter && i < maxLength) {\n        str = l.letter + str, l = l[L], i += 1;\n      }\n      // check for an autocommand, going thru substrings longest to shortest\n      while (str.length) {\n        if (autoCmds.hasOwnProperty(str)) {\n          for (var i = 1, l = this; i < str.length; i += 1, l = l[L]);\n          Fragment(l, this).remove();\n          cursor[L] = l[L];\n          return LatexCmds[str](str).createLeftOf(cursor);\n        }\n        str = str.slice(1);\n      }\n    }\n  };\n  _.italicize = function(bool) {\n    this.isItalic = bool;\n    this.jQ.toggleClass('mq-operator-name', !bool);\n    return this;\n  };\n  _.finalizeTree = _.siblingDeleted = _.siblingCreated = function(opts, dir) {\n    // don't auto-un-italicize if the sibling to my right changed (dir === R or\n    // undefined) and it's now a Letter, it will un-italicize everyone\n    if (dir !== L && this[R] instanceof Letter) return;\n    this.autoUnItalicize(opts);\n  };\n  _.autoUnItalicize = function(opts) {\n    var autoOps = opts.autoOperatorNames;\n    if (autoOps._maxLength === 0) return;\n    // want longest possible operator names, so join together entire contiguous\n    // sequence of letters\n    var str = this.letter;\n    for (var l = this[L]; l instanceof Letter; l = l[L]) str = l.letter + str;\n    for (var r = this[R]; r instanceof Letter; r = r[R]) str += r.letter;\n\n    // removeClass and delete flags from all letters before figuring out\n    // which, if any, are part of an operator name\n    Fragment(l[R] || this.parent.ends[L], r[L] || this.parent.ends[R]).each(function(el) {\n      el.italicize(true).jQ.removeClass('mq-first mq-last mq-followed-by-supsub');\n      el.ctrlSeq = el.letter;\n    });\n\n    // check for operator names: at each position from left to right, check\n    // substrings from longest to shortest\n    outer: for (var i = 0, first = l[R] || this.parent.ends[L]; i < str.length; i += 1, first = first[R]) {\n      for (var len = min(autoOps._maxLength, str.length - i); len > 0; len -= 1) {\n        var word = str.slice(i, i + len);\n        if (autoOps.hasOwnProperty(word)) {\n          for (var j = 0, letter = first; j < len; j += 1, letter = letter[R]) {\n            letter.italicize(false);\n            var last = letter;\n          }\n\n          var isBuiltIn = BuiltInOpNames.hasOwnProperty(word);\n          first.ctrlSeq = (isBuiltIn ? '\\\\' : '\\\\operatorname{') + first.ctrlSeq;\n          last.ctrlSeq += (isBuiltIn ? ' ' : '}');\n          if (TwoWordOpNames.hasOwnProperty(word)) last[L][L][L].jQ.addClass('mq-last');\n          if (!shouldOmitPadding(first[L])) first.jQ.addClass('mq-first');\n          if (!shouldOmitPadding(last[R])) {\n            if (last[R] instanceof SupSub) {\n              var supsub = last[R]; // XXX monkey-patching, but what's the right thing here?\n              // Have operatorname-specific code in SupSub? A CSS-like language to style the\n              // math tree, but which ignores cursor and selection (which CSS can't)?\n              var respace = supsub.siblingCreated = supsub.siblingDeleted = function() {\n                supsub.jQ.toggleClass('mq-after-operator-name', !(supsub[R] instanceof Bracket));\n              };\n              respace();\n            }\n            else {\n              last.jQ.toggleClass('mq-last', !(last[R] instanceof Bracket));\n            }\n          }\n\n          i += len - 1;\n          first = last;\n          continue outer;\n        }\n      }\n    }\n  };\n  function shouldOmitPadding(node) {\n    // omit padding if no node, or if node already has padding (to avoid double-padding)\n    return !node || (node instanceof BinaryOperator) || (node instanceof SummationNotation);\n  }\n});\nvar BuiltInOpNames = {}; // the set of operator names like \\sin, \\cos, etc that\n  // are built-into LaTeX, see Section 3.17 of the Short Math Guide: http://tinyurl.com/jm9okjc\n  // MathQuill auto-unitalicizes some operator names not in that set, like 'hcf'\n  // and 'arsinh', which must be exported as \\operatorname{hcf} and\n  // \\operatorname{arsinh}. Note: over/under line/arrow \\lim variants like\n  // \\varlimsup are not supported\nvar AutoOpNames = Options.p.autoOperatorNames = { _maxLength: 9 }; // the set\n  // of operator names that MathQuill auto-unitalicizes by default; overridable\nvar TwoWordOpNames = { limsup: 1, liminf: 1, projlim: 1, injlim: 1 };\n(function() {\n  var mostOps = ('arg deg det dim exp gcd hom inf ker lg lim ln log max min sup'\n                 + ' limsup liminf injlim projlim Pr').split(' ');\n  for (var i = 0; i < mostOps.length; i += 1) {\n    BuiltInOpNames[mostOps[i]] = AutoOpNames[mostOps[i]] = 1;\n  }\n\n  var builtInTrigs = // why coth but not sech and csch, LaTeX?\n    'sin cos tan arcsin arccos arctan sinh cosh tanh sec csc cot coth'.split(' ');\n  for (var i = 0; i < builtInTrigs.length; i += 1) {\n    BuiltInOpNames[builtInTrigs[i]] = 1;\n  }\n\n  var autoTrigs = 'sin cos tan sec cosec csc cotan cot ctg'.split(' ');\n  for (var i = 0; i < autoTrigs.length; i += 1) {\n    AutoOpNames[autoTrigs[i]] =\n    AutoOpNames['arc'+autoTrigs[i]] =\n    AutoOpNames[autoTrigs[i]+'h'] =\n    AutoOpNames['ar'+autoTrigs[i]+'h'] =\n    AutoOpNames['arc'+autoTrigs[i]+'h'] = 1;\n  }\n\n  // compat with some of the nonstandard LaTeX exported by MathQuill\n  // before #247. None of these are real LaTeX commands so, seems safe\n  var moreNonstandardOps = 'gcf hcf lcm proj span'.split(' ');\n  for (var i = 0; i < moreNonstandardOps.length; i += 1) {\n    AutoOpNames[moreNonstandardOps[i]] = 1;\n  }\n}());\noptionProcessors.autoOperatorNames = function(cmds) {\n  if (!/^[a-z]+(?: [a-z]+)*$/i.test(cmds)) {\n    throw '\"'+cmds+'\" not a space-delimited list of only letters';\n  }\n  var list = cmds.split(' '), dict = {}, maxLength = 0;\n  for (var i = 0; i < list.length; i += 1) {\n    var cmd = list[i];\n    if (cmd.length < 2) {\n      throw '\"'+cmd+'\" not minimum length of 2';\n    }\n    dict[cmd] = 1;\n    maxLength = max(maxLength, cmd.length);\n  }\n  dict._maxLength = maxLength;\n  return dict;\n};\nvar OperatorName = P(Symbol, function(_, super_) {\n  _.init = function(fn) { this.ctrlSeq = fn; };\n  _.createLeftOf = function(cursor) {\n    var fn = this.ctrlSeq;\n    for (var i = 0; i < fn.length; i += 1) {\n      Letter(fn.charAt(i)).createLeftOf(cursor);\n    }\n  };\n  _.parser = function() {\n    var fn = this.ctrlSeq;\n    var block = MathBlock();\n    for (var i = 0; i < fn.length; i += 1) {\n      Letter(fn.charAt(i)).adopt(block, block.ends[R], 0);\n    }\n    return Parser.succeed(block.children());\n  };\n});\nfor (var fn in AutoOpNames) if (AutoOpNames.hasOwnProperty(fn)) {\n  LatexCmds[fn] = OperatorName;\n}\nLatexCmds.operatorname = P(MathCommand, function(_) {\n  _.createLeftOf = noop;\n  _.numBlocks = function() { return 1; };\n  _.parser = function() {\n    return latexMathParser.block.map(function(b) { return b.children(); });\n  };\n});\n\nLatexCmds.f = P(Letter, function(_, super_) {\n  _.init = function() {\n    Symbol.p.init.call(this, this.letter = 'f', '<var class=\"mq-f\">f</var>');\n  };\n  _.italicize = function(bool) {\n    this.jQ.html('f').toggleClass('mq-f', bool);\n    return super_.italicize.apply(this, arguments);\n  };\n});\n\n// VanillaSymbol's\nLatexCmds[' '] = LatexCmds.space = bind(VanillaSymbol, '\\\\ ', '&nbsp;');\n\nLatexCmds[\"'\"] = LatexCmds.prime = bind(VanillaSymbol, \"'\", '&prime;');\n\nLatexCmds.backslash = bind(VanillaSymbol,'\\\\backslash ','\\\\');\nif (!CharCmds['\\\\']) CharCmds['\\\\'] = LatexCmds.backslash;\n\nLatexCmds.$ = bind(VanillaSymbol, '\\\\$', '$');\n\n// does not use Symbola font\nvar NonSymbolaSymbol = P(Symbol, function(_, super_) {\n  _.init = function(ch, html) {\n    super_.init.call(this, ch, '<span class=\"mq-nonSymbola\">'+(html || ch)+'</span>');\n  };\n});\n\nLatexCmds['@'] = NonSymbolaSymbol;\nLatexCmds['&'] = bind(NonSymbolaSymbol, '\\\\&', '&amp;');\nLatexCmds['%'] = bind(NonSymbolaSymbol, '\\\\%', '%');\n\n//the following are all Greek to me, but this helped a lot: http://www.ams.org/STIX/ion/stixsig03.html\n\n//lowercase Greek letter variables\nLatexCmds.alpha =\nLatexCmds.beta =\nLatexCmds.gamma =\nLatexCmds.delta =\nLatexCmds.zeta =\nLatexCmds.eta =\nLatexCmds.theta =\nLatexCmds.iota =\nLatexCmds.kappa =\nLatexCmds.mu =\nLatexCmds.nu =\nLatexCmds.xi =\nLatexCmds.rho =\nLatexCmds.sigma =\nLatexCmds.tau =\nLatexCmds.chi =\nLatexCmds.psi =\nLatexCmds.omega = P(Variable, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this,'\\\\'+latex+' ','&'+latex+';');\n  };\n});\n\n//why can't anybody FUCKING agree on these\nLatexCmds.phi = //W3C or Unicode?\n  bind(Variable,'\\\\phi ','&#981;');\n\nLatexCmds.phiv = //Elsevier and 9573-13\nLatexCmds.varphi = //AMS and LaTeX\n  bind(Variable,'\\\\varphi ','&phi;');\n\nLatexCmds.epsilon = //W3C or Unicode?\n  bind(Variable,'\\\\epsilon ','&#1013;');\n\nLatexCmds.epsiv = //Elsevier and 9573-13\nLatexCmds.varepsilon = //AMS and LaTeX\n  bind(Variable,'\\\\varepsilon ','&epsilon;');\n\nLatexCmds.piv = //W3C/Unicode and Elsevier and 9573-13\nLatexCmds.varpi = //AMS and LaTeX\n  bind(Variable,'\\\\varpi ','&piv;');\n\nLatexCmds.sigmaf = //W3C/Unicode\nLatexCmds.sigmav = //Elsevier\nLatexCmds.varsigma = //LaTeX\n  bind(Variable,'\\\\varsigma ','&sigmaf;');\n\nLatexCmds.thetav = //Elsevier and 9573-13\nLatexCmds.vartheta = //AMS and LaTeX\nLatexCmds.thetasym = //W3C/Unicode\n  bind(Variable,'\\\\vartheta ','&thetasym;');\n\nLatexCmds.upsilon = //AMS and LaTeX and W3C/Unicode\nLatexCmds.upsi = //Elsevier and 9573-13\n  bind(Variable,'\\\\upsilon ','&upsilon;');\n\n//these aren't even mentioned in the HTML character entity references\nLatexCmds.gammad = //Elsevier\nLatexCmds.Gammad = //9573-13 -- WTF, right? I dunno if this was a typo in the reference (see above)\nLatexCmds.digamma = //LaTeX\n  bind(Variable,'\\\\digamma ','&#989;');\n\nLatexCmds.kappav = //Elsevier\nLatexCmds.varkappa = //AMS and LaTeX\n  bind(Variable,'\\\\varkappa ','&#1008;');\n\nLatexCmds.rhov = //Elsevier and 9573-13\nLatexCmds.varrho = //AMS and LaTeX\n  bind(Variable,'\\\\varrho ','&#1009;');\n\n//Greek constants, look best in non-italicized Times New Roman\nLatexCmds.pi = LatexCmds['\\u03c0'] = bind(NonSymbolaSymbol,'\\\\pi ','&pi;');\nLatexCmds.lambda = bind(NonSymbolaSymbol,'\\\\lambda ','&lambda;');\n\n//uppercase greek letters\n\nLatexCmds.Upsilon = //LaTeX\nLatexCmds.Upsi = //Elsevier and 9573-13\nLatexCmds.upsih = //W3C/Unicode \"upsilon with hook\"\nLatexCmds.Upsih = //'cos it makes sense to me\n  bind(Symbol,'\\\\Upsilon ','<var style=\"font-family: serif\">&upsih;</var>'); //Symbola's 'upsilon with a hook' is a capital Y without hooks :(\n\n//other symbols with the same LaTeX command and HTML character entity reference\nLatexCmds.Gamma =\nLatexCmds.Delta =\nLatexCmds.Theta =\nLatexCmds.Lambda =\nLatexCmds.Xi =\nLatexCmds.Pi =\nLatexCmds.Sigma =\nLatexCmds.Phi =\nLatexCmds.Psi =\nLatexCmds.Omega =\nLatexCmds.forall = P(VanillaSymbol, function(_, super_) {\n  _.init = function(latex) {\n    super_.init.call(this,'\\\\'+latex+' ','&'+latex+';');\n  };\n});\n\n// symbols that aren't a single MathCommand, but are instead a whole\n// Fragment. Creates the Fragment from a LaTeX string\nvar LatexFragment = P(MathCommand, function(_) {\n  _.init = function(latex) { this.latex = latex; };\n  _.createLeftOf = function(cursor) {\n    var block = latexMathParser.parse(this.latex);\n    block.children().adopt(cursor.parent, cursor[L], cursor[R]);\n    cursor[L] = block.ends[R];\n    block.jQize().insertBefore(cursor.jQ);\n    block.finalizeInsert(cursor.options, cursor);\n    if (block.ends[R][R].siblingCreated) block.ends[R][R].siblingCreated(cursor.options, L);\n    if (block.ends[L][L].siblingCreated) block.ends[L][L].siblingCreated(cursor.options, R);\n    cursor.parent.bubble('reflow');\n  };\n  _.parser = function() {\n    var frag = latexMathParser.parse(this.latex).children();\n    return Parser.succeed(frag);\n  };\n});\n\n// for what seems to me like [stupid reasons][1], Unicode provides\n// subscripted and superscripted versions of all ten Arabic numerals,\n// as well as [so-called \"vulgar fractions\"][2].\n// Nobody really cares about most of them, but some of them actually\n// predate Unicode, dating back to [ISO-8859-1][3], apparently also\n// known as \"Latin-1\", which among other things [Windows-1252][4]\n// largely coincides with, so Microsoft Word sometimes inserts them\n// and they get copy-pasted into MathQuill.\n//\n// (Irrelevant but funny story: though not a superset of Latin-1 aka\n// ISO-8859-1, Windows-1252 **is** a strict superset of the \"closely\n// related but distinct\"[3] \"ISO 8859-1\" -- see the lack of a dash\n// after \"ISO\"? Completely different character set, like elephants vs\n// elephant seals, or \"Zombies\" vs \"Zombie Redneck Torture Family\".\n// What kind of idiot would get them confused.\n// People in fact got them confused so much, it was so common to\n// mislabel Windows-1252 text as ISO-8859-1, that most modern web\n// browsers and email clients treat the MIME charset of ISO-8859-1\n// as actually Windows-1252, behavior now standard in the HTML5 spec.)\n//\n// [1]: http://en.wikipedia.org/wiki/Unicode_subscripts_andsuper_scripts\n// [2]: http://en.wikipedia.org/wiki/Number_Forms\n// [3]: http://en.wikipedia.org/wiki/ISO/IEC_8859-1\n// [4]: http://en.wikipedia.org/wiki/Windows-1252\nLatexCmds['\\u00b9'] = bind(LatexFragment, '^1');\nLatexCmds['\\u00b2'] = bind(LatexFragment, '^2');\nLatexCmds['\\u00b3'] = bind(LatexFragment, '^3');\nLatexCmds['\\u00bc'] = bind(LatexFragment, '\\\\frac14');\nLatexCmds['\\u00bd'] = bind(LatexFragment, '\\\\frac12');\nLatexCmds['\\u00be'] = bind(LatexFragment, '\\\\frac34');\n\nvar PlusMinus = P(BinaryOperator, function(_) {\n  _.init = VanillaSymbol.prototype.init;\n\n  _.contactWeld = _.siblingCreated = _.siblingDeleted = function(opts, dir) {\n    if (dir === R) return; // ignore if sibling only changed on the right\n    // If the left sibling is a binary operator or a separator (comma, semicolon, colon)\n    // or an open bracket (open parenthesis, open square bracket)\n    // consider the operator to be unary, otherwise binary\n    this.jQ[0].className =\n      (!this[L] || this[L] instanceof BinaryOperator || /^[,;:\\(\\[]$/.test(this[L].ctrlSeq) ? '' : 'mq-binary-operator');\n    return this;\n  };\n});\n\nLatexCmds['+'] = bind(PlusMinus, '+', '+');\n//yes, these are different dashes, I think one is an en dash and the other is a hyphen\nLatexCmds['\\u2013'] = LatexCmds['-'] = bind(PlusMinus, '-', '&minus;');\nLatexCmds['\\u00b1'] = LatexCmds.pm = LatexCmds.plusmn = LatexCmds.plusminus =\n  bind(PlusMinus,'\\\\pm ','&plusmn;');\nLatexCmds.mp = LatexCmds.mnplus = LatexCmds.minusplus =\n  bind(PlusMinus,'\\\\mp ','&#8723;');\n\nCharCmds['*'] = LatexCmds.sdot = LatexCmds.cdot =\n  bind(BinaryOperator, '\\\\cdot ', '&middot;', '*');\n//semantically should be &sdot;, but &middot; looks better\n\nvar Inequality = P(BinaryOperator, function(_, super_) {\n  _.init = function(data, strict) {\n    this.data = data;\n    this.strict = strict;\n    var strictness = (strict ? 'Strict' : '');\n    super_.init.call(this, data['ctrlSeq'+strictness], data['html'+strictness],\n                     data['text'+strictness]);\n  };\n  _.swap = function(strict) {\n    this.strict = strict;\n    var strictness = (strict ? 'Strict' : '');\n    this.ctrlSeq = this.data['ctrlSeq'+strictness];\n    this.jQ.html(this.data['html'+strictness]);\n    this.textTemplate = [ this.data['text'+strictness] ];\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (dir === L && !this.strict) {\n      this.swap(true);\n      this.bubble('reflow');\n      return;\n    }\n    super_.deleteTowards.apply(this, arguments);\n  };\n});\n\nvar less = { ctrlSeq: '\\\\le ', html: '&le;', text: '\\u2264',\n             ctrlSeqStrict: '<', htmlStrict: '&lt;', textStrict: '<' };\nvar greater = { ctrlSeq: '\\\\ge ', html: '&ge;', text: '\\u2265',\n                ctrlSeqStrict: '>', htmlStrict: '&gt;', textStrict: '>' };\n\nLatexCmds['<'] = LatexCmds.lt = bind(Inequality, less, true);\nLatexCmds['>'] = LatexCmds.gt = bind(Inequality, greater, true);\nLatexCmds['\\u2264'] = LatexCmds.le = LatexCmds.leq = bind(Inequality, less, false);\nLatexCmds['\\u2265'] = LatexCmds.ge = LatexCmds.geq = bind(Inequality, greater, false);\n\nvar Equality = P(BinaryOperator, function(_, super_) {\n  _.init = function() {\n    super_.init.call(this, '=', '=');\n  };\n  _.createLeftOf = function(cursor) {\n    if (cursor[L] instanceof Inequality && cursor[L].strict) {\n      cursor[L].swap(false);\n      cursor[L].bubble('reflow');\n      return;\n    }\n    super_.createLeftOf.apply(this, arguments);\n  };\n});\nLatexCmds['='] = Equality;\n\nLatexCmds['\\u00d7'] = LatexCmds.times = bind(BinaryOperator, '\\\\times ', '&times;', '[x]');\n\nLatexCmds['\\u00f7'] = LatexCmds.div = LatexCmds.divide = LatexCmds.divides =\n  bind(BinaryOperator,'\\\\div ','&divide;', '[/]');\n\nCharCmds['~'] = LatexCmds.sim = bind(BinaryOperator, '\\\\sim ', '~', '~');\n/***************************\n * Commands and Operators.\n **************************/\n\nvar scale, // = function(jQ, x, y) { ... }\n//will use a CSS 2D transform to scale the jQuery-wrapped HTML elements,\n//or the filter matrix transform fallback for IE 5.5-8, or gracefully degrade to\n//increasing the fontSize to match the vertical Y scaling factor.\n\n//ideas from http://github.com/louisremi/jquery.transform.js\n//see also http://msdn.microsoft.com/en-us/library/ms533014(v=vs.85).aspx\n\n  forceIERedraw = noop,\n  div = document.createElement('div'),\n  div_style = div.style,\n  transformPropNames = {\n    transform:1,\n    WebkitTransform:1,\n    MozTransform:1,\n    OTransform:1,\n    msTransform:1\n  },\n  transformPropName;\n\nfor (var prop in transformPropNames) {\n  if (prop in div_style) {\n    transformPropName = prop;\n    break;\n  }\n}\n\nif (transformPropName) {\n  scale = function(jQ, x, y) {\n    jQ.css(transformPropName, 'scale('+x+','+y+')');\n  };\n}\nelse if ('filter' in div_style) { //IE 6, 7, & 8 fallback, see https://github.com/laughinghan/mathquill/wiki/Transforms\n  forceIERedraw = function(el){ el.className = el.className; };\n  scale = function(jQ, x, y) { //NOTE: assumes y > x\n    x /= (1+(y-1)/2);\n    jQ.css('fontSize', y + 'em');\n    if (!jQ.hasClass('mq-matrixed-container')) {\n      jQ.addClass('mq-matrixed-container')\n      .wrapInner('<span class=\"mq-matrixed\"></span>');\n    }\n    var innerjQ = jQ.children()\n    .css('filter', 'progid:DXImageTransform.Microsoft'\n        + '.Matrix(M11=' + x + \",SizingMethod='auto expand')\"\n    );\n    function calculateMarginRight() {\n      jQ.css('marginRight', (innerjQ.width()-1)*(x-1)/x + 'px');\n    }\n    calculateMarginRight();\n    var intervalId = setInterval(calculateMarginRight);\n    $(window).load(function() {\n      clearTimeout(intervalId);\n      calculateMarginRight();\n    });\n  };\n}\nelse {\n  scale = function(jQ, x, y) {\n    jQ.css('fontSize', y + 'em');\n  };\n}\n\nvar Style = P(MathCommand, function(_, super_) {\n  _.init = function(ctrlSeq, tagName, attrs) {\n    super_.init.call(this, ctrlSeq, '<'+tagName+' '+attrs+'>&0</'+tagName+'>');\n  };\n});\n\n//fonts\nLatexCmds.mathrm = bind(Style, '\\\\mathrm', 'span', 'class=\"mq-roman mq-font\"');\nLatexCmds.mathit = bind(Style, '\\\\mathit', 'i', 'class=\"mq-font\"');\nLatexCmds.mathbf = bind(Style, '\\\\mathbf', 'b', 'class=\"mq-font\"');\nLatexCmds.mathsf = bind(Style, '\\\\mathsf', 'span', 'class=\"mq-sans-serif mq-font\"');\nLatexCmds.mathtt = bind(Style, '\\\\mathtt', 'span', 'class=\"mq-monospace mq-font\"');\n//text-decoration\nLatexCmds.underline = bind(Style, '\\\\underline', 'span', 'class=\"mq-non-leaf mq-underline\"');\nLatexCmds.overline = LatexCmds.bar = bind(Style, '\\\\overline', 'span', 'class=\"mq-non-leaf mq-overline\"');\nLatexCmds.overrightarrow = bind(Style, '\\\\overrightarrow', 'span', 'class=\"mq-non-leaf mq-overarrow mq-arrow-right\"');\nLatexCmds.overleftarrow = bind(Style, '\\\\overleftarrow', 'span', 'class=\"mq-non-leaf mq-overarrow mq-arrow-left\"');\n\n// `\\textcolor{color}{math}` will apply a color to the given math content, where\n// `color` is any valid CSS Color Value (see [SitePoint docs][] (recommended),\n// [Mozilla docs][], or [W3C spec][]).\n//\n// [SitePoint docs]: http://reference.sitepoint.com/css/colorvalues\n// [Mozilla docs]: https://developer.mozilla.org/en-US/docs/CSS/color_value#Values\n// [W3C spec]: http://dev.w3.org/csswg/css3-color/#colorunits\nvar TextColor = LatexCmds.textcolor = P(MathCommand, function(_, super_) {\n  _.setColor = function(color) {\n    this.color = color;\n    this.htmlTemplate =\n      '<span class=\"mq-textcolor\" style=\"color:' + color + '\">&0</span>';\n  };\n  _.latex = function() {\n    return '\\\\textcolor{' + this.color + '}{' + this.blocks[0].latex() + '}';\n  };\n  _.parser = function() {\n    var self = this;\n    var optWhitespace = Parser.optWhitespace;\n    var string = Parser.string;\n    var regex = Parser.regex;\n\n    return optWhitespace\n      .then(string('{'))\n      .then(regex(/^[#\\w\\s.,()%-]*/))\n      .skip(string('}'))\n      .then(function(color) {\n        self.setColor(color);\n        return super_.parser.call(self);\n      })\n    ;\n  };\n});\n\n// Very similar to the \\textcolor command, but will add the given CSS class.\n// Usage: \\class{classname}{math}\n// Note regex that whitelists valid CSS classname characters:\n// https://github.com/mathquill/mathquill/pull/191#discussion_r4327442\nvar Class = LatexCmds['class'] = P(MathCommand, function(_, super_) {\n  _.parser = function() {\n    var self = this, string = Parser.string, regex = Parser.regex;\n    return Parser.optWhitespace\n      .then(string('{'))\n      .then(regex(/^[-\\w\\s\\\\\\xA0-\\xFF]*/))\n      .skip(string('}'))\n      .then(function(cls) {\n        self.htmlTemplate = '<span class=\"mq-class '+cls+'\">&0</span>';\n        return super_.parser.call(self);\n      })\n    ;\n  };\n});\n\nvar SupSub = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '_{...}^{...}';\n  _.createLeftOf = function(cursor) {\n    if (!cursor[L] && cursor.options.supSubsRequireOperand) return;\n    return super_.createLeftOf.apply(this, arguments);\n  };\n  _.contactWeld = function(cursor) {\n    // Look on either side for a SupSub, if one is found compare my\n    // .sub, .sup with its .sub, .sup. If I have one that it doesn't,\n    // then call .addBlock() on it with my block; if I have one that\n    // it also has, then insert my block's children into its block,\n    // unless my block has none, in which case insert the cursor into\n    // its block (and not mine, I'm about to remove myself) in the case\n    // I was just typed.\n    // TODO: simplify\n\n    // equiv. to [L, R].forEach(function(dir) { ... });\n    for (var dir = L; dir; dir = (dir === L ? R : false)) {\n      if (this[dir] instanceof SupSub) {\n        // equiv. to 'sub sup'.split(' ').forEach(function(supsub) { ... });\n        for (var supsub = 'sub'; supsub; supsub = (supsub === 'sub' ? 'sup' : false)) {\n          var src = this[supsub], dest = this[dir][supsub];\n          if (!src) continue;\n          if (!dest) this[dir].addBlock(src.disown());\n          else if (!src.isEmpty()) { // ins src children at -dir end of dest\n            src.jQ.children().insAtDirEnd(-dir, dest.jQ);\n            var children = src.children().disown();\n            var pt = Point(dest, children.ends[R], dest.ends[L]);\n            if (dir === L) children.adopt(dest, dest.ends[R], 0);\n            else children.adopt(dest, 0, dest.ends[L]);\n          }\n          else var pt = Point(dest, 0, dest.ends[L]);\n          this.placeCursor = (function(dest, src) { // TODO: don't monkey-patch\n            return function(cursor) { cursor.insAtDirEnd(-dir, dest || src); };\n          }(dest, src));\n        }\n        this.remove();\n        if (cursor && cursor[L] === this) {\n          if (dir === R && pt) {\n            pt[L] ? cursor.insRightOf(pt[L]) : cursor.insAtLeftEnd(pt.parent);\n          }\n          else cursor.insRightOf(this[dir]);\n        }\n        break;\n      }\n    }\n  };\n  Options.p.charsThatBreakOutOfSupSub = '';\n  _.finalizeTree = function() {\n    this.ends[L].write = function(cursor, ch) {\n      if (cursor.options.autoSubscriptNumerals && this === this.parent.sub) {\n        if (ch === '_') return;\n        var cmd = this.chToCmd(ch);\n        if (cmd instanceof Symbol) cursor.deleteSelection();\n        else cursor.clearSelection().insRightOf(this.parent);\n        return cmd.createLeftOf(cursor.show());\n      }\n      if (cursor[L] && !cursor[R] && !cursor.selection\n          && cursor.options.charsThatBreakOutOfSupSub.indexOf(ch) > -1) {\n        cursor.insRightOf(this.parent);\n      }\n      MathBlock.p.write.apply(this, arguments);\n    };\n  };\n  _.moveTowards = function(dir, cursor, updown) {\n    if (cursor.options.autoSubscriptNumerals && !this.sup) {\n      cursor.insDirOf(dir, this);\n    }\n    else super_.moveTowards.apply(this, arguments);\n  };\n  _.deleteTowards = function(dir, cursor) {\n    if (cursor.options.autoSubscriptNumerals && this.sub) {\n      var cmd = this.sub.ends[-dir];\n      if (cmd instanceof Symbol) cmd.remove();\n      else if (cmd) cmd.deleteTowards(dir, cursor.insAtDirEnd(-dir, this.sub));\n\n      // TODO: factor out a .removeBlock() or something\n      if (this.sub.isEmpty()) {\n        this.sub.deleteOutOf(L, cursor.insAtLeftEnd(this.sub));\n        if (this.sup) cursor.insDirOf(-dir, this);\n        // Note `-dir` because in e.g. x_1^2| want backspacing (leftward)\n        // to delete the 1 but to end up rightward of x^2; with non-negated\n        // `dir` (try it), the cursor appears to have gone \"through\" the ^2.\n      }\n    }\n    else super_.deleteTowards.apply(this, arguments);\n  };\n  _.latex = function() {\n    function latex(prefix, block) {\n      var l = block && block.latex();\n      return block ? prefix + (l.length === 1 ? l : '{' + (l || ' ') + '}') : '';\n    }\n    return latex('_', this.sub) + latex('^', this.sup);\n  };\n  _.addBlock = function(block) {\n    if (this.supsub === 'sub') {\n      this.sup = this.upInto = this.sub.upOutOf = block;\n      block.adopt(this, this.sub, 0).downOutOf = this.sub;\n      block.jQ = $('<span class=\"mq-sup\"/>').append(block.jQ.children())\n        .attr(mqBlockId, block.id).prependTo(this.jQ);\n    }\n    else {\n      this.sub = this.downInto = this.sup.downOutOf = block;\n      block.adopt(this, 0, this.sup).upOutOf = this.sup;\n      block.jQ = $('<span class=\"mq-sub\"></span>').append(block.jQ.children())\n        .attr(mqBlockId, block.id).appendTo(this.jQ.removeClass('mq-sup-only'));\n      this.jQ.append('<span style=\"display:inline-block;width:0\">&#8203;</span>');\n    }\n    // like 'sub sup'.split(' ').forEach(function(supsub) { ... });\n    for (var i = 0; i < 2; i += 1) (function(cmd, supsub, oppositeSupsub, updown) {\n      cmd[supsub].deleteOutOf = function(dir, cursor) {\n        cursor.insDirOf((this[dir] ? -dir : dir), this.parent);\n        if (!this.isEmpty()) {\n          var end = this.ends[dir];\n          this.children().disown()\n            .withDirAdopt(dir, cursor.parent, cursor[dir], cursor[-dir])\n            .jQ.insDirOf(-dir, cursor.jQ);\n          cursor[-dir] = end;\n        }\n        cmd.supsub = oppositeSupsub;\n        delete cmd[supsub];\n        delete cmd[updown+'Into'];\n        cmd[oppositeSupsub][updown+'OutOf'] = insLeftOfMeUnlessAtEnd;\n        delete cmd[oppositeSupsub].deleteOutOf;\n        if (supsub === 'sub') $(cmd.jQ.addClass('mq-sup-only')[0].lastChild).remove();\n        this.remove();\n      };\n    }(this, 'sub sup'.split(' ')[i], 'sup sub'.split(' ')[i], 'down up'.split(' ')[i]));\n  };\n});\n\nfunction insLeftOfMeUnlessAtEnd(cursor) {\n  // cursor.insLeftOf(cmd), unless cursor at the end of block, and every\n  // ancestor cmd is at the end of every ancestor block\n  var cmd = this.parent, ancestorCmd = cursor;\n  do {\n    if (ancestorCmd[R]) return cursor.insLeftOf(cmd);\n    ancestorCmd = ancestorCmd.parent.parent;\n  } while (ancestorCmd !== cmd);\n  cursor.insRightOf(cmd);\n}\n\nLatexCmds.subscript =\nLatexCmds._ = P(SupSub, function(_, super_) {\n  _.supsub = 'sub';\n  _.htmlTemplate =\n      '<span class=\"mq-supsub mq-non-leaf\">'\n    +   '<span class=\"mq-sub\">&0</span>'\n    +   '<span style=\"display:inline-block;width:0\">&#8203;</span>'\n    + '</span>'\n  ;\n  _.textTemplate = [ '_' ];\n  _.finalizeTree = function() {\n    this.downInto = this.sub = this.ends[L];\n    this.sub.upOutOf = insLeftOfMeUnlessAtEnd;\n    super_.finalizeTree.call(this);\n  };\n});\n\nLatexCmds.superscript =\nLatexCmds.supscript =\nLatexCmds['^'] = P(SupSub, function(_, super_) {\n  _.supsub = 'sup';\n  _.htmlTemplate =\n      '<span class=\"mq-supsub mq-non-leaf mq-sup-only\">'\n    +   '<span class=\"mq-sup\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = [ '^' ];\n  _.finalizeTree = function() {\n    this.upInto = this.sup = this.ends[R];\n    this.sup.downOutOf = insLeftOfMeUnlessAtEnd;\n    super_.finalizeTree.call(this);\n  };\n});\n\nvar SummationNotation = P(MathCommand, function(_, super_) {\n  _.init = function(ch, html) {\n    var htmlTemplate =\n      '<span class=\"mq-large-operator mq-non-leaf\">'\n    +   '<span class=\"mq-to\"><span>&1</span></span>'\n    +   '<big>'+html+'</big>'\n    +   '<span class=\"mq-from\"><span>&0</span></span>'\n    + '</span>'\n    ;\n    Symbol.prototype.init.call(this, ch, htmlTemplate);\n  };\n  _.createLeftOf = function(cursor) {\n    super_.createLeftOf.apply(this, arguments);\n    if (cursor.options.sumStartsWithNEquals) {\n      Letter('n').createLeftOf(cursor);\n      Equality().createLeftOf(cursor);\n    }\n  };\n  _.latex = function() {\n    function simplify(latex) {\n      return latex.length === 1 ? latex : '{' + (latex || ' ') + '}';\n    }\n    return this.ctrlSeq + '_' + simplify(this.ends[L].latex()) +\n      '^' + simplify(this.ends[R].latex());\n  };\n  _.parser = function() {\n    var string = Parser.string;\n    var optWhitespace = Parser.optWhitespace;\n    var succeed = Parser.succeed;\n    var block = latexMathParser.block;\n\n    var self = this;\n    var blocks = self.blocks = [ MathBlock(), MathBlock() ];\n    for (var i = 0; i < blocks.length; i += 1) {\n      blocks[i].adopt(self, self.ends[R], 0);\n    }\n\n    return optWhitespace.then(string('_').or(string('^'))).then(function(supOrSub) {\n      var child = blocks[supOrSub === '_' ? 0 : 1];\n      return block.then(function(block) {\n        block.children().adopt(child, child.ends[R], 0);\n        return succeed(self);\n      });\n    }).many().result(self);\n  };\n  _.finalizeTree = function() {\n    this.downInto = this.ends[L];\n    this.upInto = this.ends[R];\n    this.ends[L].upOutOf = this.ends[R];\n    this.ends[R].downOutOf = this.ends[L];\n  };\n});\n\nLatexCmds['\\u2211'] =\nLatexCmds.sum =\nLatexCmds.summation = bind(SummationNotation,'\\\\sum ','&sum;');\n\nLatexCmds['\\u220f'] =\nLatexCmds.prod =\nLatexCmds.product = bind(SummationNotation,'\\\\prod ','&prod;');\n\nLatexCmds.coprod =\nLatexCmds.coproduct = bind(SummationNotation,'\\\\coprod ','&#8720;');\n\nLatexCmds['\\u222b'] =\nLatexCmds['int'] =\nLatexCmds.integral = P(SummationNotation, function(_, super_) {\n  _.init = function() {\n    var htmlTemplate =\n      '<span class=\"mq-int mq-non-leaf\">'\n    +   '<big>&int;</big>'\n    +   '<span class=\"mq-supsub mq-non-leaf\">'\n    +     '<span class=\"mq-sup\"><span class=\"mq-sup-inner\">&1</span></span>'\n    +     '<span class=\"mq-sub\">&0</span>'\n    +     '<span style=\"display:inline-block;width:0\">&#8203</span>'\n    +   '</span>'\n    + '</span>'\n    ;\n    Symbol.prototype.init.call(this, '\\\\int ', htmlTemplate);\n  };\n  // FIXME: refactor rather than overriding\n  _.createLeftOf = MathCommand.p.createLeftOf;\n});\n\nvar Fraction =\nLatexCmds.frac =\nLatexCmds.dfrac =\nLatexCmds.cfrac =\nLatexCmds.fraction = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\frac';\n  _.htmlTemplate =\n      '<span class=\"mq-fraction mq-non-leaf\">'\n    +   '<span class=\"mq-numerator\">&0</span>'\n    +   '<span class=\"mq-denominator\">&1</span>'\n    +   '<span style=\"display:inline-block;width:0\">&#8203;</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['(', ')/(', ')'];\n  _.finalizeTree = function() {\n    this.upInto = this.ends[R].upOutOf = this.ends[L];\n    this.downInto = this.ends[L].downOutOf = this.ends[R];\n  };\n});\n\nvar LiveFraction =\nLatexCmds.over =\nCharCmds['/'] = P(Fraction, function(_, super_) {\n  _.createLeftOf = function(cursor) {\n    if (!this.replacedFragment) {\n      var leftward = cursor[L];\n      while (leftward &&\n        !(\n          leftward instanceof BinaryOperator ||\n          leftward instanceof (LatexCmds.text || noop) ||\n          leftward instanceof SummationNotation ||\n          leftward.ctrlSeq === '\\\\ ' ||\n          /^[,;:]$/.test(leftward.ctrlSeq)\n        ) //lookbehind for operator\n      ) leftward = leftward[L];\n\n      if (leftward instanceof SummationNotation && leftward[R] instanceof SupSub) {\n        leftward = leftward[R];\n        if (leftward[R] instanceof SupSub && leftward[R].ctrlSeq != leftward.ctrlSeq)\n          leftward = leftward[R];\n      }\n\n      if (leftward !== cursor[L]) {\n        this.replaces(Fragment(leftward[R] || cursor.parent.ends[L], cursor[L]));\n        cursor[L] = leftward;\n      }\n    }\n    super_.createLeftOf.call(this, cursor);\n  };\n});\n\nvar SquareRoot =\nLatexCmds.sqrt =\nLatexCmds['\\u221a'] = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\sqrt';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-scaled mq-sqrt-prefix\">&radic;</span>'\n    +   '<span class=\"mq-non-leaf mq-sqrt-stem\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['sqrt(', ')'];\n  _.parser = function() {\n    return latexMathParser.optBlock.then(function(optBlock) {\n      return latexMathParser.block.map(function(block) {\n        var nthroot = NthRoot();\n        nthroot.blocks = [ optBlock, block ];\n        optBlock.adopt(nthroot, 0, 0);\n        block.adopt(nthroot, optBlock, 0);\n        return nthroot;\n      });\n    }).or(super_.parser.call(this));\n  };\n  _.reflow = function() {\n    var block = this.ends[R].jQ;\n    scale(block.prev(), 1, block.innerHeight()/+block.css('fontSize').slice(0,-2) - .1);\n  };\n});\n\nvar Vec = LatexCmds.vec = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\vec';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-vector-prefix\">&rarr;</span>'\n    +   '<span class=\"mq-vector-stem\">&0</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['vec(', ')'];\n});\n\nvar NthRoot =\nLatexCmds.nthroot = P(SquareRoot, function(_, super_) {\n  _.htmlTemplate =\n      '<sup class=\"mq-nthroot mq-non-leaf\">&0</sup>'\n    + '<span class=\"mq-scaled\">'\n    +   '<span class=\"mq-sqrt-prefix mq-scaled\">&radic;</span>'\n    +   '<span class=\"mq-sqrt-stem mq-non-leaf\">&1</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['sqrt[', '](', ')'];\n  _.latex = function() {\n    return '\\\\sqrt['+this.ends[L].latex()+']{'+this.ends[R].latex()+'}';\n  };\n});\n\nfunction DelimsMixin(_, super_) {\n  _.jQadd = function() {\n    super_.jQadd.apply(this, arguments);\n    this.delimjQs = this.jQ.children(':first').add(this.jQ.children(':last'));\n    this.contentjQ = this.jQ.children(':eq(1)');\n  };\n  _.reflow = function() {\n    var height = this.contentjQ.outerHeight()\n                 / parseFloat(this.contentjQ.css('fontSize'));\n    scale(this.delimjQs, min(1 + .2*(height - 1), 1.2), 1.2*height);\n  };\n}\n\n// Round/Square/Curly/Angle Brackets (aka Parens/Brackets/Braces)\n//   first typed as one-sided bracket with matching \"ghost\" bracket at\n//   far end of current block, until you type an opposing one\nvar Bracket = P(P(MathCommand, DelimsMixin), function(_, super_) {\n  _.init = function(side, open, close, ctrlSeq, end) {\n    super_.init.call(this, '\\\\left'+ctrlSeq, undefined, [open, close]);\n    this.side = side;\n    this.sides = {};\n    this.sides[L] = { ch: open, ctrlSeq: ctrlSeq };\n    this.sides[R] = { ch: close, ctrlSeq: end };\n  };\n  _.numBlocks = function() { return 1; };\n  _.html = function() { // wait until now so that .side may\n    this.htmlTemplate = // be set by createLeftOf or parser\n        '<span class=\"mq-non-leaf\">'\n      +   '<span class=\"mq-scaled mq-paren'+(this.side === R ? ' mq-ghost' : '')+'\">'\n      +     this.sides[L].ch\n      +   '</span>'\n      +   '<span class=\"mq-non-leaf\">&0</span>'\n      +   '<span class=\"mq-scaled mq-paren'+(this.side === L ? ' mq-ghost' : '')+'\">'\n      +     this.sides[R].ch\n      +   '</span>'\n      + '</span>'\n    ;\n    return super_.html.call(this);\n  };\n  _.latex = function() {\n    return '\\\\left'+this.sides[L].ctrlSeq+this.ends[L].latex()+'\\\\right'+this.sides[R].ctrlSeq;\n  };\n  _.oppBrack = function(opts, node, expectedSide) {\n    // return node iff it's a 1-sided bracket of expected side (if any, may be\n    // undefined), and of opposite side from me if I'm not a pipe\n    return node instanceof Bracket && node.side && node.side !== -expectedSide\n      && (this.sides[this.side].ch === '|' || node.side === -this.side)\n      && (!opts.restrictMismatchedBrackets\n        || OPP_BRACKS[this.sides[this.side].ch] === node.sides[node.side].ch\n        || { '(': ']', '[': ')' }[this.sides[L].ch] === node.sides[R].ch) && node;\n  };\n  _.closeOpposing = function(brack) {\n    brack.side = 0;\n    brack.sides[this.side] = this.sides[this.side]; // copy over my info (may be\n    brack.delimjQs.eq(this.side === L ? 0 : 1) // mismatched, like [a, b))\n      .removeClass('mq-ghost').html(this.sides[this.side].ch);\n  };\n  _.createLeftOf = function(cursor) {\n    if (!this.replacedFragment) { // unless wrapping seln in brackets,\n        // check if next to or inside an opposing one-sided bracket\n        // (must check both sides 'cos I might be a pipe)\n      var opts = cursor.options;\n      var brack = this.oppBrack(opts, cursor[L], L)\n                  || this.oppBrack(opts, cursor[R], R)\n                  || this.oppBrack(opts, cursor.parent.parent);\n    }\n    if (brack) {\n      var side = this.side = -brack.side; // may be pipe with .side not yet set\n      this.closeOpposing(brack);\n      if (brack === cursor.parent.parent && cursor[side]) { // move the stuff between\n        Fragment(cursor[side], cursor.parent.ends[side], -side) // me and ghost outside\n          .disown().withDirAdopt(-side, brack.parent, brack, brack[side])\n          .jQ.insDirOf(side, brack.jQ);\n        brack.bubble('reflow');\n      }\n    }\n    else {\n      brack = this, side = brack.side;\n      if (brack.replacedFragment) brack.side = 0; // wrapping seln, don't be one-sided\n      else if (cursor[-side]) { // elsewise, auto-expand so ghost is at far end\n        brack.replaces(Fragment(cursor[-side], cursor.parent.ends[-side], side));\n        cursor[-side] = 0;\n      }\n      super_.createLeftOf.call(brack, cursor);\n    }\n    if (side === L) cursor.insAtLeftEnd(brack.ends[L]);\n    else cursor.insRightOf(brack);\n  };\n  _.placeCursor = noop;\n  _.unwrap = function() {\n    this.ends[L].children().disown().adopt(this.parent, this, this[R])\n      .jQ.insertAfter(this.jQ);\n    this.remove();\n  };\n  _.deleteSide = function(side, outward, cursor) {\n    var parent = this.parent, sib = this[side], farEnd = parent.ends[side];\n\n    if (side === this.side) { // deleting non-ghost of one-sided bracket, unwrap\n      this.unwrap();\n      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n      return;\n    }\n\n    var opts = cursor.options, wasSolid = !this.side;\n    this.side = -side;\n    // if deleting like, outer close-brace of [(1+2)+3} where inner open-paren\n    if (this.oppBrack(opts, this.ends[L].ends[this.side], side)) { // is ghost,\n      this.closeOpposing(this.ends[L].ends[this.side]); // then become [1+2)+3\n      var origEnd = this.ends[L].ends[side];\n      this.unwrap();\n      if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);\n      sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n    }\n    else { // if deleting like, inner close-brace of ([1+2}+3) where outer\n      if (this.oppBrack(opts, this.parent.parent, side)) { // open-paren is\n        this.parent.parent.closeOpposing(this); // ghost, then become [1+2+3)\n        this.parent.parent.unwrap();\n      } // else if deleting outward from a solid pair, unwrap\n      else if (outward && wasSolid) {\n        this.unwrap();\n        sib ? cursor.insDirOf(-side, sib) : cursor.insAtDirEnd(side, parent);\n        return;\n      }\n      else { // else deleting just one of a pair of brackets, become one-sided\n        this.sides[side] = { ch: OPP_BRACKS[this.sides[this.side].ch],\n                             ctrlSeq: OPP_BRACKS[this.sides[this.side].ctrlSeq] };\n        this.delimjQs.removeClass('mq-ghost')\n          .eq(side === L ? 0 : 1).addClass('mq-ghost').html(this.sides[side].ch);\n      }\n      if (sib) { // auto-expand so ghost is at far end\n        var origEnd = this.ends[L].ends[side];\n        Fragment(sib, farEnd, -side).disown()\n          .withDirAdopt(-side, this.ends[L], origEnd, 0)\n          .jQ.insAtDirEnd(side, this.ends[L].jQ.removeClass('mq-empty'));\n        if (origEnd.siblingCreated) origEnd.siblingCreated(cursor.options, side);\n        cursor.insDirOf(-side, sib);\n      } // didn't auto-expand, cursor goes just outside or just inside parens\n      else (outward ? cursor.insDirOf(side, this)\n                    : cursor.insAtDirEnd(side, this.ends[L]));\n    }\n  };\n  _.deleteTowards = function(dir, cursor) {\n    this.deleteSide(-dir, false, cursor);\n  };\n  _.finalizeTree = function() {\n    this.ends[L].deleteOutOf = function(dir, cursor) {\n      this.parent.deleteSide(dir, true, cursor);\n    };\n    // FIXME HACK: after initial creation/insertion, finalizeTree would only be\n    // called if the paren is selected and replaced, e.g. by LiveFraction\n    this.finalizeTree = this.intentionalBlur = function() {\n      this.delimjQs.eq(this.side === L ? 1 : 0).removeClass('mq-ghost');\n      this.side = 0;\n    };\n  };\n  _.siblingCreated = function(opts, dir) { // if something typed between ghost and far\n    if (dir === -this.side) this.finalizeTree(); // end of its block, solidify\n  };\n});\n\nvar OPP_BRACKS = {\n  '(': ')',\n  ')': '(',\n  '[': ']',\n  ']': '[',\n  '{': '}',\n  '}': '{',\n  '\\\\{': '\\\\}',\n  '\\\\}': '\\\\{',\n  '&lang;': '&rang;',\n  '&rang;': '&lang;',\n  '\\\\langle ': '\\\\rangle ',\n  '\\\\rangle ': '\\\\langle ',\n  '|': '|'\n};\n\nfunction bindCharBracketPair(open, ctrlSeq) {\n  var ctrlSeq = ctrlSeq || open, close = OPP_BRACKS[open], end = OPP_BRACKS[ctrlSeq];\n  CharCmds[open] = bind(Bracket, L, open, close, ctrlSeq, end);\n  CharCmds[close] = bind(Bracket, R, open, close, ctrlSeq, end);\n}\nbindCharBracketPair('(');\nbindCharBracketPair('[');\nbindCharBracketPair('{', '\\\\{');\nLatexCmds.langle = bind(Bracket, L, '&lang;', '&rang;', '\\\\langle ', '\\\\rangle ');\nLatexCmds.rangle = bind(Bracket, R, '&lang;', '&rang;', '\\\\langle ', '\\\\rangle ');\nCharCmds['|'] = bind(Bracket, L, '|', '|', '|', '|');\n\nLatexCmds.left = P(MathCommand, function(_) {\n  _.parser = function() {\n    var regex = Parser.regex;\n    var string = Parser.string;\n    var succeed = Parser.succeed;\n    var optWhitespace = Parser.optWhitespace;\n\n    return optWhitespace.then(regex(/^(?:[([|]|\\\\\\{)/))\n      .then(function(ctrlSeq) { // TODO: \\langle, \\rangle\n        var open = (ctrlSeq.charAt(0) === '\\\\' ? ctrlSeq.slice(1) : ctrlSeq);\n        return latexMathParser.then(function (block) {\n          return string('\\\\right').skip(optWhitespace)\n            .then(regex(/^(?:[\\])|]|\\\\\\})/)).map(function(end) {\n              var close = (end.charAt(0) === '\\\\' ? end.slice(1) : end);\n              var cmd = Bracket(0, open, close, ctrlSeq, end);\n              cmd.blocks = [ block ];\n              block.adopt(cmd, 0, 0);\n              return cmd;\n            })\n          ;\n        });\n      })\n    ;\n  };\n});\n\nLatexCmds.right = P(MathCommand, function(_) {\n  _.parser = function() {\n    return Parser.fail('unmatched \\\\right');\n  };\n});\n\nvar Binomial =\nLatexCmds.binom =\nLatexCmds.binomial = P(P(MathCommand, DelimsMixin), function(_, super_) {\n  _.ctrlSeq = '\\\\binom';\n  _.htmlTemplate =\n      '<span class=\"mq-non-leaf\">'\n    +   '<span class=\"mq-paren mq-scaled\">(</span>'\n    +   '<span class=\"mq-non-leaf\">'\n    +     '<span class=\"mq-array mq-non-leaf\">'\n    +       '<span>&0</span>'\n    +       '<span>&1</span>'\n    +     '</span>'\n    +   '</span>'\n    +   '<span class=\"mq-paren mq-scaled\">)</span>'\n    + '</span>'\n  ;\n  _.textTemplate = ['choose(',',',')'];\n});\n\nvar Choose =\nLatexCmds.choose = P(Binomial, function(_) {\n  _.createLeftOf = LiveFraction.prototype.createLeftOf;\n});\n\nLatexCmds.editable = // backcompat with before cfd3620 on #233\nLatexCmds.MathQuillMathField = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\MathQuillMathField';\n  _.htmlTemplate =\n      '<span class=\"mq-editable-field\">'\n    +   '<span class=\"mq-root-block\">&0</span>'\n    + '</span>'\n  ;\n  _.parser = function() {\n    var self = this,\n      string = Parser.string, regex = Parser.regex, succeed = Parser.succeed;\n    return string('[').then(regex(/^[a-z][a-z0-9]*/i)).skip(string(']'))\n      .map(function(name) { self.name = name; }).or(succeed())\n      .then(super_.parser.call(self));\n  };\n  _.finalizeTree = function() {\n    var ctrlr = Controller(this.ends[L], this.jQ, Options());\n    ctrlr.KIND_OF_MQ = 'MathField';\n    ctrlr.editable = true;\n    ctrlr.createTextarea();\n    ctrlr.editablesTextareaEvents();\n    ctrlr.cursor.insAtRightEnd(ctrlr.root);\n    RootBlockMixin(ctrlr.root);\n  };\n  _.registerInnerField = function(innerFields, MathField) {\n    innerFields.push(innerFields[this.name] = MathField(this.ends[L].controller));\n  };\n  _.latex = function(){ return this.ends[L].latex(); };\n  _.text = function(){ return this.ends[L].text(); };\n});\n\n// Embed arbitrary things\n// Probably the closest DOM analogue would be an iframe?\n// From MathQuill's perspective, it's a Symbol, it can be\n// anywhere and the cursor can go around it but never in it.\n// Create by calling public API method .dropEmbedded(),\n// or by calling the global public API method .registerEmbed()\n// and rendering LaTeX like \\embed{registeredName} (see test).\nvar Embed = LatexCmds.embed = P(Symbol, function(_, super_) {\n  _.setOptions = function(options) {\n    function noop () { return \"\"; }\n    this.text = options.text || noop;\n    this.htmlTemplate = options.htmlString || \"\";\n    this.latex = options.latex || noop;\n    return this;\n  };\n  _.parser = function() {\n    var self = this;\n      string = Parser.string, regex = Parser.regex, succeed = Parser.succeed;\n    return string('{').then(regex(/^[a-z][a-z0-9]*/i)).skip(string('}'))\n      .then(function(name) {\n        // the chars allowed in the optional data block are arbitrary other than\n        // excluding curly braces and square brackets (which'd be too confusing)\n        return string('[').then(regex(/^[-\\w\\s]*/)).skip(string(']'))\n          .or(succeed()).map(function(data) {\n            return self.setOptions(EMBEDS[name](data));\n          })\n        ;\n      })\n    ;\n  };\n});\n/****************************************\n * Input box to type backslash commands\n ***************************************/\n\nvar LatexCommandInput =\nCharCmds['\\\\'] = P(MathCommand, function(_, super_) {\n  _.ctrlSeq = '\\\\';\n  _.replaces = function(replacedFragment) {\n    this._replacedFragment = replacedFragment.disown();\n    this.isEmpty = function() { return false; };\n  };\n  _.htmlTemplate = '<span class=\"mq-latex-command-input mq-non-leaf\">\\\\<span>&0</span></span>';\n  _.textTemplate = ['\\\\'];\n  _.createBlocks = function() {\n    super_.createBlocks.call(this);\n    this.ends[L].focus = function() {\n      this.parent.jQ.addClass('mq-hasCursor');\n      if (this.isEmpty())\n        this.parent.jQ.removeClass('mq-empty');\n\n      return this;\n    };\n    this.ends[L].blur = function() {\n      this.parent.jQ.removeClass('mq-hasCursor');\n      if (this.isEmpty())\n        this.parent.jQ.addClass('mq-empty');\n\n      return this;\n    };\n    this.ends[L].write = function(cursor, ch) {\n      cursor.show().deleteSelection();\n\n      if (ch.match(/[a-z]/i)) VanillaSymbol(ch).createLeftOf(cursor);\n      else {\n        this.parent.renderCommand(cursor);\n        if (ch !== '\\\\' || !this.isEmpty()) this.parent.parent.write(cursor, ch);\n      }\n    };\n    this.ends[L].keystroke = function(key, e, ctrlr) {\n      if (key === 'Tab' || key === 'Enter' || key === 'Spacebar') {\n        this.parent.renderCommand(ctrlr.cursor);\n        e.preventDefault();\n        return;\n      }\n      return super_.keystroke.apply(this, arguments);\n    };\n  };\n  _.createLeftOf = function(cursor) {\n    super_.createLeftOf.call(this, cursor);\n\n    if (this._replacedFragment) {\n      var el = this.jQ[0];\n      this.jQ =\n        this._replacedFragment.jQ.addClass('mq-blur').bind(\n          'mousedown mousemove', //FIXME: is monkey-patching the mousedown and mousemove handlers the right way to do this?\n          function(e) {\n            $(e.target = el).trigger(e);\n            return false;\n          }\n        ).insertBefore(this.jQ).add(this.jQ);\n    }\n  };\n  _.latex = function() {\n    return '\\\\' + this.ends[L].latex() + ' ';\n  };\n  _.renderCommand = function(cursor) {\n    this.jQ = this.jQ.last();\n    this.remove();\n    if (this[R]) {\n      cursor.insLeftOf(this[R]);\n    } else {\n      cursor.insAtRightEnd(this.parent);\n    }\n\n    var latex = this.ends[L].latex();\n    if (!latex) latex = ' ';\n    var cmd = LatexCmds[latex];\n    if (cmd) {\n      cmd = cmd(latex);\n      if (this._replacedFragment) cmd.replaces(this._replacedFragment);\n      cmd.createLeftOf(cursor);\n    }\n    else {\n      cmd = TextBlock();\n      cmd.replaces(latex);\n      cmd.createLeftOf(cursor);\n      cursor.insRightOf(cmd);\n      if (this._replacedFragment)\n        this._replacedFragment.remove();\n    }\n  };\n});\n\nvar MQ1 = getInterface(1);\nfor (var key in MQ1) (function(key, val) {\n  if (typeof val === 'function') {\n    MathQuill[key] = function() {\n      insistOnInterVer();\n      return val.apply(this, arguments);\n    };\n    MathQuill[key].prototype = val.prototype;\n  }\n  else MathQuill[key] = val;\n}(key, MQ1[key]));\n\n}());\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(7);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"72baf6dc\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT83NDIyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLENBQXdQO0FBQzlRLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBMEQ7QUFDNUUsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzJiYWY2ZGNcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vQXBwLnZ1ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgdmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwic2NvcGVkXFxcIjpmYWxzZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL0FwcC52dWVcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, "\\n#app {\\n  font-family: \'Avenir\', Helvetica, Arial, sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n", "", {"version":3,"sources":["E:/mygithub/math-keyboard/src/src/App.vue"],"names":[],"mappings":";AAuCA;EACA,oDAAA;EACA,oCAAA;EACA,mCAAA;CACA","file":"App.vue","sourcesContent":["<template>\\n  <div id=\\"app\\">\\n\x3c!--    <div v-on:click=\\"show = !show\\">--\x3e\\n    <div style=\\"display: none\\">\\n      <math-render :value.sync=\\"value\\" :imgshow=\'!show\'></math-render>\\n      <code @click=\\"a\\">latex: {{value}}</code>\\n    </div>\\n    <math-keyboard\\n        :show.sync=\\"show\\"\\n        v-bind:keypanel=\'1\'\\n        :value.sync=\\"value\\"\\n        :output.sync=\\"output\\"\\n    ></math-keyboard>\\n  </div>\\n</template>\\n\\n<script>\\nexport default {\\n  data(){\\n    return{\\n      show:true,\\n      value:\'\',\\n      output:\'\'\\n    }\\n  },\\n  methods:{\\n    a(){\\n      this.value = \'2^6\'\\n    }\\n  },\\n  watch:{\\n    ctrl(nval,oval){\\n      console.log(\'ctrl\'+nval)\\n    }\\n  }\\n}\\n<\/script>\\n\\n<style>\\n#app {\\n  font-family: \'Avenir\', Helvetica, Arial, sans-serif;\\n  -webkit-font-smoothing: antialiased;\\n  -moz-osx-font-smoothing: grayscale;\\n}\\n</style>\\n"],"sourceRoot":""}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvQXBwLnZ1ZT8wNWNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLENBQTRDO0FBQy9FOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxXQUFXLHdEQUF3RCx3Q0FBd0MsdUNBQXVDLEdBQUcsVUFBVSw0RkFBNEYsTUFBTSxXQUFXLFdBQVcsV0FBVyx1UUFBdVEsT0FBTyw2T0FBNk8sV0FBVyxhQUFhLDJEQUEyRCxLQUFLLGNBQWMsVUFBVSxpQ0FBaUMsS0FBSyxZQUFZLHNCQUFzQix1Q0FBdUMsS0FBSyxHQUFHLDhCQUE4Qix3REFBd0Qsd0NBQXdDLHVDQUF1QyxHQUFHLCtCQUErQjs7QUFFbHVDIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuI2FwcCB7XFxuICBmb250LWZhbWlseTogJ0F2ZW5pcicsIEhlbHZldGljYSwgQXJpYWwsIHNhbnMtc2VyaWY7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxufVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJFOi9teWdpdGh1Yi9tYXRoLWtleWJvYXJkL3NyYy9zcmMvQXBwLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBdUNBO0VBQ0Esb0RBQUE7RUFDQSxvQ0FBQTtFQUNBLG1DQUFBO0NBQ0FcIixcImZpbGVcIjpcIkFwcC52dWVcIixcInNvdXJjZXNDb250ZW50XCI6W1wiPHRlbXBsYXRlPlxcbiAgPGRpdiBpZD1cXFwiYXBwXFxcIj5cXG48IS0tICAgIDxkaXYgdi1vbjpjbGljaz1cXFwic2hvdyA9ICFzaG93XFxcIj4tLT5cXG4gICAgPGRpdiBzdHlsZT1cXFwiZGlzcGxheTogbm9uZVxcXCI+XFxuICAgICAgPG1hdGgtcmVuZGVyIDp2YWx1ZS5zeW5jPVxcXCJ2YWx1ZVxcXCIgOmltZ3Nob3c9JyFzaG93Jz48L21hdGgtcmVuZGVyPlxcbiAgICAgIDxjb2RlIEBjbGljaz1cXFwiYVxcXCI+bGF0ZXg6IHt7dmFsdWV9fTwvY29kZT5cXG4gICAgPC9kaXY+XFxuICAgIDxtYXRoLWtleWJvYXJkXFxuICAgICAgICA6c2hvdy5zeW5jPVxcXCJzaG93XFxcIlxcbiAgICAgICAgdi1iaW5kOmtleXBhbmVsPScxJ1xcbiAgICAgICAgOnZhbHVlLnN5bmM9XFxcInZhbHVlXFxcIlxcbiAgICAgICAgOm91dHB1dC5zeW5jPVxcXCJvdXRwdXRcXFwiXFxuICAgID48L21hdGgta2V5Ym9hcmQ+XFxuICA8L2Rpdj5cXG48L3RlbXBsYXRlPlxcblxcbjxzY3JpcHQ+XFxuZXhwb3J0IGRlZmF1bHQge1xcbiAgZGF0YSgpe1xcbiAgICByZXR1cm57XFxuICAgICAgc2hvdzp0cnVlLFxcbiAgICAgIHZhbHVlOicnLFxcbiAgICAgIG91dHB1dDonJ1xcbiAgICB9XFxuICB9LFxcbiAgbWV0aG9kczp7XFxuICAgIGEoKXtcXG4gICAgICB0aGlzLnZhbHVlID0gJzJeNidcXG4gICAgfVxcbiAgfSxcXG4gIHdhdGNoOntcXG4gICAgY3RybChudmFsLG92YWwpe1xcbiAgICAgIGNvbnNvbGUubG9nKCdjdHJsJytudmFsKVxcbiAgICB9XFxuICB9XFxufVxcbjwvc2NyaXB0PlxcblxcbjxzdHlsZT5cXG4jYXBwIHtcXG4gIGZvbnQtZmFtaWx5OiAnQXZlbmlyJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG59XFxuPC9zdHlsZT5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(9);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"97fe3112\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL21hdGhxdWlsbC5jc3M/NzYyMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxDQUE2QztBQUNuRSw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQWdEO0FBQ2xFLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL21hdGhxdWlsbC5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI5N2ZlMzExMlwiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL21hdGhxdWlsbC5jc3NcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vY3NzLWxvYWRlci9pbmRleC5qcyEuL21hdGhxdWlsbC5jc3NcIik7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,exports,__webpack_require__){eval('var escape = __webpack_require__(10);\nexports = module.exports = __webpack_require__(0)(false);\n// imports\n\n\n// module\nexports.push([module.i, "/*\\n * MathQuill v0.10.1               http://mathquill.com\\n * by Han, Jeanine, and Mary  maintainers@mathquill.com\\n *\\n * This Source Code Form is subject to the terms of the\\n * Mozilla Public License, v. 2.0. If a copy of the MPL\\n * was not distributed with this file, You can obtain\\n * one at http://mozilla.org/MPL/2.0/.\\n */\\n@font-face {\\n  font-family: Symbola;\\n  src: url(" + escape(__webpack_require__(11)) + ");\\n  src: local(\\"Symbola Regular\\"), local(\\"Symbola\\"), url(" + escape(__webpack_require__(12)) + ") format(\\"woff2\\"), url(" + escape(__webpack_require__(13)) + ") format(\\"woff\\"), url(" + escape(__webpack_require__(14)) + ") format(\\"truetype\\"), url(" + escape(__webpack_require__(15)) + ") format(\\"opentype\\"), url(" + escape(__webpack_require__(16)) + "#Symbola) format(\\"svg\\");\\n}\\n.mq-editable-field {\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-editable-field .mq-cursor {\\n  border-left: 1px solid black;\\n  margin-left: -1px;\\n  position: relative;\\n  z-index: 1;\\n  padding: 0;\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-editable-field .mq-cursor.mq-blink {\\n  visibility: hidden;\\n}\\n.mq-editable-field,\\n.mq-math-mode .mq-editable-field {\\n  border: 1px solid gray;\\n}\\n.mq-editable-field.mq-focused,\\n.mq-math-mode .mq-editable-field.mq-focused {\\n  -webkit-box-shadow: #8bd 0 0 1px 2px, inset #6ae 0 0 2px 0;\\n  -moz-box-shadow: #8bd 0 0 1px 2px, inset #6ae 0 0 2px 0;\\n  box-shadow: #8bd 0 0 1px 2px, inset #6ae 0 0 2px 0;\\n  border-color: #709AC0;\\n  border-radius: 1px;\\n}\\n.mq-math-mode .mq-editable-field {\\n  margin: 1px;\\n}\\n.mq-editable-field .mq-latex-command-input {\\n  color: inherit;\\n  font-family: \\"Courier New\\", monospace;\\n  border: 1px solid gray;\\n  padding-right: 1px;\\n  margin-right: 1px;\\n  margin-left: 2px;\\n}\\n.mq-editable-field .mq-latex-command-input.mq-empty {\\n  background: transparent;\\n}\\n.mq-editable-field .mq-latex-command-input.mq-hasCursor {\\n  border-color: ActiveBorder;\\n}\\n.mq-editable-field.mq-empty:after,\\n.mq-editable-field.mq-text-mode:after,\\n.mq-math-mode .mq-empty:after {\\n  visibility: hidden;\\n  content: \'c\';\\n}\\n.mq-editable-field .mq-cursor:only-child:after,\\n.mq-editable-field .mq-textarea + .mq-cursor:last-child:after {\\n  visibility: hidden;\\n  content: \'c\';\\n}\\n.mq-editable-field .mq-text-mode .mq-cursor:only-child:after {\\n  content: \'\';\\n}\\n.mq-editable-field.mq-text-mode {\\n  overflow-x: auto;\\n  overflow-y: hidden;\\n}\\n.mq-root-block,\\n.mq-math-mode .mq-root-block {\\n  display: -moz-inline-box;\\n  display: inline-block;\\n  width: 100%;\\n  padding: 2px;\\n  -webkit-box-sizing: border-box;\\n  -moz-box-sizing: border-box;\\n  box-sizing: border-box;\\n  white-space: nowrap;\\n  overflow: hidden;\\n  vertical-align: middle;\\n}\\n.mq-math-mode {\\n  font-variant: normal;\\n  font-weight: normal;\\n  font-style: normal;\\n  font-size: 115%;\\n  line-height: 1;\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-math-mode .mq-non-leaf,\\n.mq-math-mode .mq-scaled {\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-math-mode var,\\n.mq-math-mode .mq-text-mode,\\n.mq-math-mode .mq-nonSymbola {\\n  font-family: \\"Times New Roman\\", Symbola, serif;\\n  line-height: .9;\\n}\\n.mq-math-mode * {\\n  font-size: inherit;\\n  line-height: inherit;\\n  margin: 0;\\n  padding: 0;\\n  border-color: black;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  user-select: none;\\n  box-sizing: border-box;\\n}\\n.mq-math-mode .mq-empty {\\n  background: #ccc;\\n}\\n.mq-math-mode .mq-empty.mq-root-block {\\n  background: transparent;\\n}\\n.mq-math-mode.mq-empty {\\n  background: transparent;\\n}\\n.mq-math-mode .mq-text-mode {\\n  display: inline-block;\\n}\\n.mq-math-mode .mq-text-mode.mq-hasCursor {\\n  box-shadow: inset darkgray 0 .1em .2em;\\n  padding: 0 .1em;\\n  margin: 0 -0.1em;\\n  min-width: 1ex;\\n}\\n.mq-math-mode .mq-font {\\n  font: 1em \\"Times New Roman\\", Symbola, serif;\\n}\\n.mq-math-mode .mq-font * {\\n  font-family: inherit;\\n  font-style: inherit;\\n}\\n.mq-math-mode b,\\n.mq-math-mode b.mq-font {\\n  font-weight: bolder;\\n}\\n.mq-math-mode var,\\n.mq-math-mode i,\\n.mq-math-mode i.mq-font {\\n  font-style: italic;\\n}\\n.mq-math-mode var.mq-f {\\n  margin-right: 0.2em;\\n  margin-left: 0.1em;\\n}\\n.mq-math-mode .mq-roman var.mq-f {\\n  margin: 0;\\n}\\n.mq-math-mode big {\\n  font-size: 200%;\\n}\\n.mq-math-mode .mq-int > big {\\n  display: inline-block;\\n  -webkit-transform: scaleX(0.7);\\n  -moz-transform: scaleX(0.7);\\n  -ms-transform: scaleX(0.7);\\n  -o-transform: scaleX(0.7);\\n  transform: scaleX(0.7);\\n  vertical-align: -0.16em;\\n}\\n.mq-math-mode .mq-int > .mq-supsub {\\n  font-size: 80%;\\n  vertical-align: -1.1em;\\n  padding-right: .2em;\\n}\\n.mq-math-mode .mq-int > .mq-supsub > .mq-sup > .mq-sup-inner {\\n  vertical-align: 1.3em;\\n}\\n.mq-math-mode .mq-int > .mq-supsub > .mq-sub {\\n  margin-left: -0.35em;\\n}\\n.mq-math-mode .mq-roman {\\n  font-style: normal;\\n}\\n.mq-math-mode .mq-sans-serif {\\n  font-family: sans-serif, Symbola, serif;\\n}\\n.mq-math-mode .mq-monospace {\\n  font-family: monospace, Symbola, serif;\\n}\\n.mq-math-mode .mq-overline {\\n  border-top: 1px solid black;\\n  margin-top: 1px;\\n}\\n.mq-math-mode .mq-underline {\\n  border-bottom: 1px solid black;\\n  margin-bottom: 1px;\\n}\\n.mq-math-mode .mq-binary-operator {\\n  padding: 0 0.2em;\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-math-mode .mq-supsub {\\n  text-align: left;\\n  font-size: 90%;\\n  vertical-align: -0.5em;\\n}\\n.mq-math-mode .mq-supsub.mq-sup-only {\\n  vertical-align: .5em;\\n}\\n.mq-math-mode .mq-supsub.mq-sup-only .mq-sup {\\n  display: inline-block;\\n  vertical-align: text-bottom;\\n}\\n.mq-math-mode .mq-supsub .mq-sup {\\n  display: block;\\n}\\n.mq-math-mode .mq-supsub .mq-sub {\\n  display: block;\\n  float: left;\\n}\\n.mq-math-mode .mq-supsub .mq-binary-operator {\\n  padding: 0 .1em;\\n}\\n.mq-math-mode .mq-supsub .mq-fraction {\\n  font-size: 70%;\\n}\\n.mq-math-mode sup.mq-nthroot {\\n  font-size: 80%;\\n  vertical-align: 0.8em;\\n  margin-right: -0.6em;\\n  margin-left: .2em;\\n  min-width: .5em;\\n}\\n.mq-math-mode .mq-paren {\\n  padding: 0 .1em;\\n  vertical-align: top;\\n  -webkit-transform-origin: center .06em;\\n  -moz-transform-origin: center .06em;\\n  -ms-transform-origin: center .06em;\\n  -o-transform-origin: center .06em;\\n  transform-origin: center .06em;\\n}\\n.mq-math-mode .mq-paren.mq-ghost {\\n  color: silver;\\n}\\n.mq-math-mode .mq-paren + span {\\n  margin-top: .1em;\\n  margin-bottom: .1em;\\n}\\n.mq-math-mode .mq-array {\\n  vertical-align: middle;\\n  text-align: center;\\n}\\n.mq-math-mode .mq-array > span {\\n  display: block;\\n}\\n.mq-math-mode .mq-operator-name {\\n  font-family: Symbola, \\"Times New Roman\\", serif;\\n  line-height: .9;\\n  font-style: normal;\\n}\\n.mq-math-mode var.mq-operator-name.mq-first {\\n  padding-left: .2em;\\n}\\n.mq-math-mode var.mq-operator-name.mq-last,\\n.mq-math-mode .mq-supsub.mq-after-operator-name {\\n  padding-right: .2em;\\n}\\n.mq-math-mode .mq-fraction {\\n  font-size: 90%;\\n  text-align: center;\\n  vertical-align: -0.4em;\\n  padding: 0 .2em;\\n}\\n.mq-math-mode .mq-fraction,\\n.mq-math-mode .mq-large-operator,\\n.mq-math-mode x:-moz-any-link {\\n  display: -moz-groupbox;\\n}\\n.mq-math-mode .mq-fraction,\\n.mq-math-mode .mq-large-operator,\\n.mq-math-mode x:-moz-any-link,\\n.mq-math-mode x:default {\\n  display: inline-block;\\n}\\n.mq-math-mode .mq-numerator,\\n.mq-math-mode .mq-denominator {\\n  display: block;\\n}\\n.mq-math-mode .mq-numerator {\\n  padding: 0 0.1em;\\n}\\n.mq-math-mode .mq-denominator {\\n  border-top: 1px solid;\\n  float: right;\\n  width: 100%;\\n  padding: 0.1em;\\n}\\n.mq-math-mode .mq-sqrt-prefix {\\n  padding-top: 0;\\n  position: relative;\\n  top: 0.1em;\\n  vertical-align: top;\\n  -webkit-transform-origin: top;\\n  -moz-transform-origin: top;\\n  -ms-transform-origin: top;\\n  -o-transform-origin: top;\\n  transform-origin: top;\\n}\\n.mq-math-mode .mq-sqrt-stem {\\n  border-top: 1px solid;\\n  margin-top: 1px;\\n  padding-left: .15em;\\n  padding-right: .2em;\\n  margin-right: .1em;\\n  padding-top: 1px;\\n}\\n.mq-math-mode .mq-vector-prefix {\\n  display: block;\\n  text-align: center;\\n  line-height: .25em;\\n  margin-bottom: -0.1em;\\n  font-size: 0.75em;\\n}\\n.mq-math-mode .mq-vector-stem {\\n  display: block;\\n}\\n.mq-math-mode .mq-large-operator {\\n  vertical-align: -0.2em;\\n  padding: .2em;\\n  text-align: center;\\n}\\n.mq-math-mode .mq-large-operator .mq-from,\\n.mq-math-mode .mq-large-operator big,\\n.mq-math-mode .mq-large-operator .mq-to {\\n  display: block;\\n}\\n.mq-math-mode .mq-large-operator .mq-from,\\n.mq-math-mode .mq-large-operator .mq-to {\\n  font-size: 80%;\\n}\\n.mq-math-mode .mq-large-operator .mq-from {\\n  float: right;\\n  /* take out of normal flow to manipulate baseline */\\n  width: 100%;\\n}\\n.mq-math-mode,\\n.mq-math-mode .mq-editable-field {\\n  cursor: text;\\n  font-family: Symbola, \\"Times New Roman\\", serif;\\n}\\n.mq-math-mode .mq-overarrow {\\n  border-top: 1px solid black;\\n  margin-top: 1px;\\n  padding-top: 0.2em;\\n}\\n.mq-math-mode .mq-overarrow:before {\\n  display: block;\\n  position: relative;\\n  top: -0.34em;\\n  font-size: 0.5em;\\n  line-height: 0em;\\n  content: \'\\\\27A4\';\\n  text-align: right;\\n}\\n.mq-math-mode .mq-overarrow.mq-arrow-left:before {\\n  -moz-transform: scaleX(-1);\\n  -o-transform: scaleX(-1);\\n  -webkit-transform: scaleX(-1);\\n  transform: scaleX(-1);\\n  filter: FlipH;\\n  -ms-filter: \\"FlipH\\";\\n}\\n.mq-math-mode .mq-selection,\\n.mq-editable-field .mq-selection,\\n.mq-math-mode .mq-selection .mq-non-leaf,\\n.mq-editable-field .mq-selection .mq-non-leaf,\\n.mq-math-mode .mq-selection .mq-scaled,\\n.mq-editable-field .mq-selection .mq-scaled {\\n  background: #B4D5FE !important;\\n  background: Highlight !important;\\n  color: HighlightText;\\n  border-color: HighlightText;\\n}\\n.mq-math-mode .mq-selection .mq-matrixed,\\n.mq-editable-field .mq-selection .mq-matrixed {\\n  background: #39F !important;\\n}\\n.mq-math-mode .mq-selection .mq-matrixed-container,\\n.mq-editable-field .mq-selection .mq-matrixed-container {\\n  filter: progid:DXImageTransform.Microsoft.Chroma(color=\'#3399FF\') !important;\\n}\\n.mq-math-mode .mq-selection.mq-blur,\\n.mq-editable-field .mq-selection.mq-blur,\\n.mq-math-mode .mq-selection.mq-blur .mq-non-leaf,\\n.mq-editable-field .mq-selection.mq-blur .mq-non-leaf,\\n.mq-math-mode .mq-selection.mq-blur .mq-scaled,\\n.mq-editable-field .mq-selection.mq-blur .mq-scaled,\\n.mq-math-mode .mq-selection.mq-blur .mq-matrixed,\\n.mq-editable-field .mq-selection.mq-blur .mq-matrixed {\\n  background: #D4D4D4 !important;\\n  color: black;\\n  border-color: black;\\n}\\n.mq-math-mode .mq-selection.mq-blur .mq-matrixed-container,\\n.mq-editable-field .mq-selection.mq-blur .mq-matrixed-container {\\n  filter: progid:DXImageTransform.Microsoft.Chroma(color=\'#D4D4D4\') !important;\\n}\\n.mq-editable-field .mq-textarea,\\n.mq-math-mode .mq-textarea {\\n  position: relative;\\n  -webkit-user-select: text;\\n  -moz-user-select: text;\\n  user-select: text;\\n}\\n.mq-editable-field .mq-textarea *,\\n.mq-math-mode .mq-textarea *,\\n.mq-editable-field .mq-selectable,\\n.mq-math-mode .mq-selectable {\\n  -webkit-user-select: text;\\n  -moz-user-select: text;\\n  user-select: text;\\n  position: absolute;\\n  clip: rect(1em 1em 1em 1em);\\n  -webkit-transform: scale(0);\\n  -moz-transform: scale(0);\\n  -ms-transform: scale(0);\\n  -o-transform: scale(0);\\n  transform: scale(0);\\n  resize: none;\\n  width: 1px;\\n  height: 1px;\\n}\\n.mq-math-mode .mq-matrixed {\\n  background: white;\\n  display: -moz-inline-box;\\n  display: inline-block;\\n}\\n.mq-math-mode .mq-matrixed-container {\\n  filter: progid:DXImageTransform.Microsoft.Chroma(color=\'white\');\\n  margin-top: -0.1em;\\n}\\n", ""]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n')},function(module,exports){eval("module.exports = function escape(url) {\n    if (typeof url !== 'string') {\n        return url\n    }\n    // If url is already wrapped in quotes, remove them\n    if (/^['\"].*['\"]$/.test(url)) {\n        url = url.slice(1, -1);\n    }\n    // Should url be wrapped?\n    // See https://drafts.csswg.org/css-values-3/#urls\n    if (/[\"'() \\t\\n]/.test(url)) {\n        return '\"' + url.replace(/\"/g, '\\\\\"').replace(/\\n/g, '\\\\n') + '\"'\n    }\n\n    return url\n}\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvdXJsL2VzY2FwZS5qcz9iMDQxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGVzY2FwZSh1cmwpIHtcbiAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHVybFxuICAgIH1cbiAgICAvLyBJZiB1cmwgaXMgYWxyZWFkeSB3cmFwcGVkIGluIHF1b3RlcywgcmVtb3ZlIHRoZW1cbiAgICBpZiAoL15bJ1wiXS4qWydcIl0kLy50ZXN0KHVybCkpIHtcbiAgICAgICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgICB9XG4gICAgLy8gU2hvdWxkIHVybCBiZSB3cmFwcGVkP1xuICAgIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG4gICAgaWYgKC9bXCInKCkgXFx0XFxuXS8udGVzdCh1cmwpKSB7XG4gICAgICAgIHJldHVybiAnXCInICsgdXJsLnJlcGxhY2UoL1wiL2csICdcXFxcXCInKS5yZXBsYWNlKC9cXG4vZywgJ1xcXFxuJykgKyAnXCInXG4gICAgfVxuXG4gICAgcmV0dXJuIHVybFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.eot?e4ae9ff7ac2476ae421fc4278e5d3806";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS5lb3Q/MTdkMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjExLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL1N5bWJvbGEuZW90P2U0YWU5ZmY3YWMyNDc2YWU0MjFmYzQyNzhlNWQzODA2XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.woff2?cb8d804a242b86175fdd6cb8e11b1a35";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS53b2ZmMj81MjI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvU3ltYm9sYS53b2ZmMj9jYjhkODA0YTI0MmI4NjE3NWZkZDZjYjhlMTFiMWEzNVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.woff?b1445a46ceac48f13cec0860ab1acf5f";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS53b2ZmPzdjMDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9TeW1ib2xhLndvZmY/YjE0NDVhNDZjZWFjNDhmMTNjZWMwODYwYWIxYWNmNWZcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.ttf?52a6aac18ae26b6ecbd4f3a0d9579c9f";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS50dGY/NTMwYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjE0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL1N5bWJvbGEudHRmPzUyYTZhYWMxOGFlMjZiNmVjYmQ0ZjNhMGQ5NTc5YzlmXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.otf?4621fcfd9def63c694914f7ec5add610";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS5vdGY/OTVkNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjE1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL1N5bWJvbGEub3RmPzQ2MjFmY2ZkOWRlZjYzYzY5NDkxNGY3ZWM1YWRkNjEwXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/Symbola.svg?20db57ba32a046dfea3c30519898b278";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbWF0aHF1aWxsL2J1aWxkL2ZvbnQvU3ltYm9sYS5zdmc/MmE4YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjE2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL1N5bWJvbGEuc3ZnPzIwZGI1N2JhMzJhMDQ2ZGZlYTNjMzA1MTk4OThiMjc4XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(18);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"6372eaaf\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2tleWJvYXJkLnZ1ZT83NzdmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQWdTO0FBQ3RULDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBNkQ7QUFDL0UsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTc4ZTA5MmU0XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4va2V5Ym9hcmQudnVlXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciBhZGQgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXNDbGllbnQuanNcIikuZGVmYXVsdFxudmFyIHVwZGF0ZSA9IGFkZChcIjYzNzJlYWFmXCIsIGNvbnRlbnQsIGZhbHNlLCB7fSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz9zb3VyY2VNYXAhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3N0eWxlLWNvbXBpbGVyL2luZGV4LmpzP3tcXFwib3B0aW9uc0lkXFxcIjpcXFwiMFxcXCIsXFxcInZ1ZVxcXCI6dHJ1ZSxcXFwiaWRcXFwiOlxcXCJkYXRhLXYtNzhlMDkyZTRcXFwiLFxcXCJzY29wZWRcXFwiOnRydWUsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTAhLi9rZXlib2FyZC52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTc4ZTA5MmU0XFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4va2V5Ym9hcmQudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n")},function(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n*[data-v-78e092e4] {\\n  box-sizing: content-box !important;\\n}\\n#mathinput[data-v-78e092e4] {\\n  margin: 3px;\\n  background: #fff;\\n  border: 2px solid #0099FF;\\n  border-radius: 4px;\\n  width: 65%\\n}\\n.keyboard[data-v-78e092e4] {\\n  margin-top: -8px;\\n  width: auto;\\n  position: fixed;\\n  padding-bottom: 4px;\\n  left: 0;\\n  background-color: #F1F1F1;\\n  z-index: 16777271;\\n  transition: all 0.5s;\\n}\\n.keyboard-output[data-v-78e092e4] {\\n  width: calc(100% - 4px);\\n  position: relative;\\n  padding: 2px;\\n  background-color: #fff;\\n}\\n.left-right[data-v-78e092e4] {\\n  position: absolute;\\n  display: block;\\n  margin-left: calc(65% + 15px);\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n.left-right img[data-v-78e092e4] {\\n  width: 15px;\\n  height: 15px;\\n}\\n.keyboard-output > a[data-v-78e092e4] {\\n  display: block;\\n  text-decoration: none;\\n  line-height: 40px;\\n  width: 42px;\\n  text-align: center;\\n  background-color: #fff;\\n  color: #2e7bfd;\\n  font-size: 15px;\\n  position: absolute;\\n  right: 2px;\\n  top: 50%;\\n  transform: translateY(-50%);\\n}\\n@-webkit-keyframes van-circular-data-v-78e092e4 {\\n0% {\\n    stroke-dasharray: 1, 200;\\n    stroke-dashoffset: 0;\\n}\\n50% {\\n    stroke-dasharray: 90, 150;\\n    stroke-dashoffset: -40;\\n}\\nto {\\n    stroke-dasharray: 90, 150;\\n    stroke-dashoffset: -120;\\n}\\n}\\n@keyframes van-circular-data-v-78e092e4 {\\n0% {\\n    stroke-dasharray: 1, 200;\\n    stroke-dashoffset: 0;\\n}\\n50% {\\n    stroke-dasharray: 90, 150;\\n    stroke-dashoffset: -40;\\n}\\nto {\\n    stroke-dasharray: 90, 150;\\n    stroke-dashoffset: -120;\\n}\\n}\\n.keyboard-panel-letter[data-v-78e092e4] {\\n  width: 100vw;\\n  position: center;\\n}\\n.keyboard-bottom[data-v-78e092e4] {\\n  position: center;\\n}\\n.keyboard-bottom li[data-v-78e092e4] {\\n  background-color: #F7F7F7;\\n  margin-left: 4px;\\n  margin-top: 4px;\\n  width: calc((100vw - 28px) / 6);\\n}\\n.keyboard-bottom li[data-v-78e092e4]:nth-child(5) {\\n  width: calc((100vw - 28px) / 6 - 2px);\\n}\\n.keyboard-panel .letter-row[data-v-78e092e4] {\\n  margin-top: 5px;\\n  height: 42px;\\n  width: 100%;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(3) li[data-v-78e092e4]:first-child {\\n  width: calc((300vw - 97px) / 20);\\n  background-color: #F7F7F7;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(3) li[data-v-78e092e4]:last-child {\\n  width: calc((300vw - 97px) / 20);\\n  background-color: #F7F7F7;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(4) li[data-v-78e092e4]:first-child {\\n  width: calc((100vw - 19px) / 4);\\n  font-size: 15px;\\n  background-color: #F7F7F7;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(4) li[data-v-78e092e4]:last-child {\\n  width: calc((100vw - 19px) / 4);\\n  font-size: 15px;\\n  background-color: #F7F7F7;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(4) li[data-v-78e092e4]:nth-child(2) {\\n  width: calc((100vw - 49px) / 10);\\n  font-size: 15px;\\n  background-color: #F7F7F7;\\n}\\n.keyboard-panel-letter .letter-row:nth-child(4) li[data-v-78e092e4]:nth-child(3) {\\n  width: calc(2 * (100vw - 49px) / 5 + 15px);\\n  font-size: 15px;\\n  /* background-color: #F7F7F7 */\\n}\\n.keyboard-panel-letter ul[data-v-78e092e4] {\\n  position: relative;\\n  left: 50%;\\n  transform: translateX(-50%);\\n}\\n.keyboard-panel-default[data-v-78e092e4] {\\n  float: left;\\n  margin: 4px 4px 0 4px;\\n}\\n.keyboard-panel ul[data-v-78e092e4] {\\n  margin: 0;\\n  padding: 0;\\n  float: left;\\n}\\n.keyboard-panel ul li[data-v-78e092e4] {\\n  list-style: none;\\n  height: 42px;\\n  line-height: 42px;\\n  text-align: center;\\n  float: left;\\n  border-radius: 5px;\\n  -moz-user-select: none;\\n  -webkit-user-select: none;\\n  font-size: 20px;\\n  color: #0d0d0d;\\n  position: relative;\\n}\\n.letter-shade[data-v-78e092e4] {\\n  width: 100%;\\n  height: 100%;\\n  position: absolute;\\n  z-index: 1;\\n}\\n.keyboard-panel-letter ul li[data-v-78e092e4] {\\n  width: calc((100vw - 49px) / 10);\\n  margin-right: 5px;\\n  background-color: #fff;\\n}\\n.keyboard-panel-letter ul li[data-v-78e092e4]:last-child {\\n  margin-right: 0;\\n}\\n.keyboard-panel-default ul li[data-v-78e092e4] {\\n  width: calc((100vw - 29px) / 6);\\n  margin-top: 4px;\\n}\\n.keyboard-default-symbol[data-v-78e092e4] {\\n  width: calc((100vw - 16px) / 3);\\n  margin-right: 4px;\\n  float: left;\\n}\\n.keyboard-default-symbol > ul[data-v-78e092e4] {\\n  background-color: #F7F7F7;\\n  border-radius: 5px;\\n}\\n.keyboard-default-symbol ul li[data-v-78e092e4]:nth-child(2n) {\\n  margin-right: 0;\\n}\\n.keyboard-default-symbol > ul li[data-v-78e092e4]:nth-child(1) {\\n  margin-top: 0;\\n}\\n.keyboard-default-symbol > ul li[data-v-78e092e4]:nth-child(2) {\\n  margin-top: 0;\\n}\\n.keyboard-panel li img[data-v-78e092e4] {\\n  top: 50%;\\n  transform: translate(-50%, -50%);\\n  max-height: 42px;\\n  position: absolute;\\n  z-index: 0;\\n  left: 50%;\\n}\\n.keyboard-default-symbol-bottom ul li[data-v-78e092e4] {\\n  background-color: #F1F1F1;\\n  font-size: 15px;\\n}\\n.keyboard-default-num[data-v-78e092e4] {\\n  width: calc((100vw - 16px) / 2);\\n  float: left;\\n  margin-right: 4px;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4] {\\n  background-color: #fff;\\n  margin-right: 4px;\\n  width: calc(((100vw - 20px) / 2 - 8px) / 3);\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(1) {\\n  margin-top: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(2) {\\n  margin-top: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(3) {\\n  margin-top: 0;\\n  margin-right: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(6) {\\n  margin-right: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(9) {\\n  margin-right: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(11) {\\n  margin-right: 0;\\n}\\n.keyboard-default-num ul li[data-v-78e092e4]:nth-child(10) {\\n  width: calc((100vw - 28px) / 3 + 3px);\\n}\\n.keyboard-default-right[data-v-78e092e4] {\\n  width: calc((100vw - 16px) / 6 - 2px);\\n  float: right;\\n  background-color: #F7F7F7;\\n  border-radius: 4px;\\n}\\n.keyboard-default-right ul li[data-v-78e092e4] {\\n  background-color: #F7F7F7;\\n}\\n.keyboard-symbol-left > ul[data-v-78e092e4] {\\n  height: 146px;\\n  overflow-y: scroll;\\n  background-color: #F7F7F7;\\n  border-radius: 5px;\\n}\\n.keyboard-panel-symbol ul li[data-v-78e092e4] {\\n  width: calc((100vw - 29px) / 6);\\n  margin-top: 10px;\\n  margin-right: 5px;\\n}\\n.keyboard-symbol-left ul li[data-v-78e092e4]:nth-child(5n) {\\n  margin-right: 0;\\n}\\n.keyboard-symbol-left .keyboard-default-symbol-bottom ul li[data-v-78e092e4]:nth-child(3) {\\n  width: calc((100vw - 9px) / 2);\\n  margin-right: 0;\\n  background-color: #fff;\\n}\\n.keyboard-func img[data-v-78e092e4] {\\n  height: 36px;\\n}\\n.keyboard-func-icon:last-child img[data-v-78e092e4] {\\n  height: 28px;\\n  margin-top: 4px;\\n}\\n\\n\", \"\", {\"version\":3,\"sources\":[\"E:/mygithub/math-keyboard/src/lib/src/lib/keyboard.vue\"],\"names\":[],\"mappings\":\";AA6bA;EACA,mCAAA;CACA;AAEA;EACA,YAAA;EACA,iBAAA;EACA,0BAAA;EACA,mBAAA;EACA,UAAA;CACA;AAEA;EACA,iBAAA;EACA,YAAA;EACA,gBAAA;EACA,oBAAA;EACA,QAAA;EACA,0BAAA;EACA,kBAAA;EACA,qBAAA;CACA;AAEA;EACA,wBAAA;EACA,mBAAA;EACA,aAAA;EACA,uBAAA;CACA;AAEA;EACA,mBAAA;EACA,eAAA;EACA,8BAAA;EACA,SAAA;EACA,4BAAA;CACA;AAEA;EACA,YAAA;EACA,aAAA;CACA;AAEA;EACA,eAAA;EACA,sBAAA;EACA,kBAAA;EACA,YAAA;EACA,mBAAA;EACA,uBAAA;EACA,eAAA;EACA,gBAAA;EACA,mBAAA;EACA,WAAA;EACA,SAAA;EACA,4BAAA;CACA;AAEA;AACA;IACA,yBAAA;IACA,qBAAA;CACA;AACA;IACA,0BAAA;IACA,uBAAA;CACA;AACA;IACA,0BAAA;IACA,wBAAA;CACA;CACA;AAEA;AACA;IACA,yBAAA;IACA,qBAAA;CACA;AACA;IACA,0BAAA;IACA,uBAAA;CACA;AACA;IACA,0BAAA;IACA,wBAAA;CACA;CACA;AAEA;EACA,aAAA;EACA,iBAAA;CACA;AAEA;EACA,iBAAA;CACA;AAGA;EACA,0BAAA;EACA,iBAAA;EACA,gBAAA;EACA,gCAAA;CACA;AAEA;EACA,sCAAA;CACA;AAEA;EACA,gBAAA;EACA,aAAA;EACA,YAAA;CACA;AAEA;EACA,iCAAA;EACA,0BAAA;CACA;AAEA;EACA,iCAAA;EACA,0BAAA;CACA;AAEA;EACA,gCAAA;EACA,gBAAA;EACA,0BAAA;CACA;AAEA;EACA,gCAAA;EACA,gBAAA;EACA,0BAAA;CACA;AAEA;EACA,iCAAA;EACA,gBAAA;EACA,0BAAA;CACA;AAEA;EACA,2CAAA;EACA,gBAAA;EACA,+BAAA;CACA;AAEA;EACA,mBAAA;EACA,UAAA;EACA,4BAAA;CACA;AAEA;EACA,YAAA;EACA,sBAAA;CACA;AAEA;EACA,UAAA;EACA,WAAA;EACA,YAAA;CACA;AAEA;EACA,iBAAA;EACA,aAAA;EACA,kBAAA;EACA,mBAAA;EACA,YAAA;EACA,mBAAA;EACA,uBAAA;EACA,0BAAA;EACA,gBAAA;EACA,eAAA;EACA,mBAAA;CACA;AAEA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,WAAA;CACA;AAEA;EACA,iCAAA;EACA,kBAAA;EACA,uBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,gCAAA;EACA,gBAAA;CACA;AAEA;EACA,gCAAA;EACA,kBAAA;EACA,YAAA;CACA;AAEA;EACA,0BAAA;EACA,mBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,cAAA;CACA;AAEA;EACA,cAAA;CACA;AAEA;EACA,SAAA;EACA,iCAAA;EACA,iBAAA;EACA,mBAAA;EACA,WAAA;EACA,UAAA;CACA;AAEA;EACA,0BAAA;EACA,gBAAA;CACA;AAEA;EACA,gCAAA;EACA,YAAA;EACA,kBAAA;CACA;AAEA;EACA,uBAAA;EACA,kBAAA;EACA,4CAAA;CACA;AAEA;EACA,cAAA;CACA;AAEA;EACA,cAAA;CACA;AAEA;EACA,cAAA;EACA,gBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,sCAAA;CACA;AAEA;EACA,sCAAA;EACA,aAAA;EACA,0BAAA;EACA,mBAAA;CACA;AAEA;EACA,0BAAA;CACA;AAEA;EACA,cAAA;EACA,mBAAA;EACA,0BAAA;EACA,mBAAA;CACA;AAEA;EACA,gCAAA;EACA,iBAAA;EACA,kBAAA;CACA;AAEA;EACA,gBAAA;CACA;AAEA;EACA,+BAAA;EACA,gBAAA;EACA,uBAAA;CACA;AAEA;EACA,aAAA;CACA;AAEA;EACA,aAAA;EACA,gBAAA;CACA\",\"file\":\"keyboard.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"keyboard\\\" id=\\\"keyboard\\\">\\n    <div class=\\\"keyboard-output\\\">\\n      <span :id=\\\"mathinput\\\"\\n            @touchstart=\\\"cursorDown($event)\\\"\\n            @touchmove=\\\"cursorMove($event)\\\"\\n            @touchup=\\\"cursorUp($event)\\\">\\n      </span>\\n      <div class=\\\"left-right\\\">\\n        <img :src=\\\"img.cursor_left\\\" @click=\\\"cursorLeft($event)\\\"/>\\n        <img :src=\\\"img.cursor_right\\\" @click=\\\"cursorRight($event)\\\" style=\\\"margin-left: 20px\\\"/>\\n      </div>\\n      <a @click=\\\"keyhide()\\\" style=\\\"width: 15%\\\">确定</a>\\n    </div>\\n    <div class=\\\"keyboard-panel\\\"\\n         :style=\\\"{display:keyorwrite === 1 ? 'unset':'none'}\\\">\\n      <div class=\\\"keyboard-panel-default\\\" v-if=\\\"panel === 1\\\">\\n        <div class=\\\"keyboard-default-symbol\\\">\\n          <ul>\\n            <li v-for=\\\"item in keysym\\\" @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"keyboard-default-num\\\">\\n          <ul>\\n            <li v-for=\\\"item in keynum\\\"\\n                @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#fff'}\\\"\\n            >{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"keyboard-default-right\\\">\\n          <ul>\\n            <li @touchstart=\\\"backDown('Backspace')\\\" @touchend=\\\"backUp('Backspace')\\\"\\n                style=\\\"background-color: #F7F7F7;margin-top: 0px\\\"><img :src=\\\"img.back\\\"/></li>\\n            <li v-for=\\\"item in keyboardRight\\\"\\n                @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"keyboard-panel-letter\\\" v-if=\\\"panel === 3\\\">\\n        <div class=\\\"letter-row\\\" v-for=\\\"items in keyabc[capsletter]\\\">\\n          <ul>\\n            <li v-for=\\\"item in items\\\"\\n                @click=\\\"(item.v !== 'shift' ? (item.v !== 'Backspace' ? insertar(item.v) : '') : caps())\\\"\\n                @touchstart=\\\"item.t = true,backDown(item.v),item.v === 'Backspace' ? item.i = img.dback : ''\\\"\\n                @touchend=\\\"item.t = false,backUp(item.v),item.v === 'Backspace' ? item.i = img.back : ''\\\"\\n                :style=\\\"item.v !== 'shift' ? item.v !== 'Backspace' ? {'background-color':item.t ? '#bababa' : '#fff'} : {'background-color':item.t ? '#fff' : '#F7F7F7'} :{'background-color':item.s ? '#fff' : '#F7F7F7'}\\\"\\n            >\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n      <div class=\\\"keyboard-bottom\\\">\\n        <ul>\\n          <li @click=\\\"changepanel(panel===1?3:1)\\\" style=\\\"font-size: 14px;\\\">{{panel===1?'abc':'123'}}\\n          </li>\\n          <li v-for=\\\"item in keyBottomSym\\\"\\n              @click=\\\"item.v==='hide'?keyhide():insertar(item.v)\\\"\\n              @touchstart=\\\"item.t = true\\\"\\n              @touchend=\\\"item.t = false\\\"\\n              :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n            <div class=\\\"letter-shade\\\"></div>\\n            <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n\\n  </div>\\n</template>\\n\\n<script>\\n    import \\\"mathquill/build/mathquill\\\";\\n    import img from './img.js'\\n    import {setTimeout, clearTimeout} from 'timers';\\n\\n    export default {\\n        name: \\\"math-keyboard\\\",\\n        data() {\\n            return {\\n                img: img,\\n                mathField: null,\\n                mathview: 'mathview' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\\n                mathinput: 'mathinput',\\n                panel: this.keypanel,\\n                capsletter: 'letter',\\n                keyabc: {\\n                    'letter': [\\n                        [\\n                            {k: 'q', v: 'q', t: false},\\n                            {k: 'w', v: 'w', t: false},\\n                            {k: 'e', v: 'e', t: false},\\n                            {k: 'r', v: 'r', t: false},\\n                            {k: 't', v: 't', t: false},\\n                            {k: 'y', v: 'y', t: false},\\n                            {k: 'u', v: 'u', t: false},\\n                            {k: 'i', v: 'i', t: false},\\n                            {k: 'o', v: 'o', t: false},\\n                            {k: 'p', v: 'p', t: false},\\n                        ],\\n                        [\\n                            {k: 'a', v: 'a', t: false},\\n                            {k: 's', v: 's', t: false},\\n                            {k: 'd', v: 'd', t: false},\\n                            {k: 'f', v: 'f', t: false},\\n                            {k: 'g', v: 'g', t: false},\\n                            {k: 'h', v: 'h', t: false},\\n                            {k: 'j', v: 'j', t: false},\\n                            {k: 'k', v: 'k', t: false},\\n                            {k: 'l', v: 'l', t: false},\\n                        ],\\n                        [\\n                            {k: '', v: 'shift', i: img.shift, s: false},\\n                            {k: 'z', v: 'z', t: false},\\n                            {k: 'x', v: 'x', t: false},\\n                            {k: 'c', v: 'c', t: false},\\n                            {k: 'v', v: 'v', t: false},\\n                            {k: 'b', v: 'b', t: false},\\n                            {k: 'n', v: 'n', t: false},\\n                            {k: 'm', v: 'm', t: false},\\n                            {k: '', v: 'Backspace', i: img.back, t: false},\\n                        ]\\n                    ],\\n                    'caps': [\\n                        [\\n                            {k: 'Q', v: 'Q', t: false},\\n                            {k: 'W', v: 'W', t: false},\\n                            {k: 'E', v: 'E', t: false},\\n                            {k: 'R', v: 'R', t: false},\\n                            {k: 'T', v: 'T', t: false},\\n                            {k: 'Y', v: 'Y', t: false},\\n                            {k: 'U', v: 'U', t: false},\\n                            {k: 'I', v: 'I', t: false},\\n                            {k: 'O', v: 'O', t: false},\\n                            {k: 'P', v: 'P', t: false},\\n                        ],\\n                        [\\n                            {k: 'A', v: 'A', t: false},\\n                            {k: 'S', v: 'S', t: false},\\n                            {k: 'D', v: 'D', t: false},\\n                            {k: 'F', v: 'F', t: false},\\n                            {k: 'G', v: 'G', t: false},\\n                            {k: 'H', v: 'H', t: false},\\n                            {k: 'J', v: 'J', t: false},\\n                            {k: 'K', v: 'K', t: false},\\n                            {k: 'L', v: 'L', t: false},\\n                        ],\\n                        [\\n                            {k: '', v: 'shift', i: img.dshift, s: true},\\n                            {k: 'Z', v: 'Z', t: false},\\n                            {k: 'X', v: 'X', t: false},\\n                            {k: 'C', v: 'C', t: false},\\n                            {k: 'V', v: 'V', t: false},\\n                            {k: 'B', v: 'B', t: false},\\n                            {k: 'N', v: 'N', t: false},\\n                            {k: 'M', v: 'M', t: false},\\n                            {k: '', v: 'Backspace', i: img.back, t: false},\\n                        ]\\n                    ]\\n                },\\n                keynum: [\\n                    {k: '1', v: '1', t: false},\\n                    {k: '2', v: '2', t: false},\\n                    {k: '3', v: '3', t: false},\\n                    {k: '4', v: '4', t: false},\\n                    {k: '5', v: '5', t: false},\\n                    {k: '6', v: '6', t: false},\\n                    {k: '7', v: '7', t: false},\\n                    {k: '8', v: '8', t: false},\\n                    {k: '9', v: '9', t: false},\\n                    {k: '0', v: '0', t: false},\\n                    {k: '.', v: '.', t: false},\\n                ],\\n                keysym: [\\n                    {k: '', v: '\\\\\\\\nthroot', i: img.raiz, t: false},\\n                    {k: '', v: '\\\\\\\\sqrt', i: img.raiz2, t: false},\\n                    {k: '', v: '^', i: img.potencia, t: false},\\n                    {k: '', v: '^2', i: img.cuadrado, t: false},\\n                    {k: '', v: '|', i: img.abs, t: false},\\n                    {k: '', v: '/', i: img.fraccion, t: false},\\n                    {k: '', v: '\\\\\\\\pi', i: img._pi, t: false},\\n                    {k: '', v: '或', i: img.or, t: false},\\n                    // {k: '', v: '^3', i: img.tercera},\\n                    // {k: '(', v: '(', i: ''},\\n                    // {k: ')', v: ')', i: ''},\\n                    // {k: '[', v: '[', i: ''},\\n                    // {k: ']', v: ']', i: ''},\\n                    // {k: 'sin', v: '\\\\\\\\sin', i: ''},\\n                    // {k: 'cos', v: '\\\\\\\\cos', i: ''},\\n                    // {k: 'tan', v: '\\\\\\\\tan', i: ''},\\n                    // {k: '≈', v: '\\\\\\\\approx', i: ''},\\n                    // {k: '≠', v: '\\\\\\\\neq', i: ''},\\n                    // {k: '%', v: '%', i: ''},\\n                    // {k: '', v: '-', i: img.subtract},\\n                    // {k: '', v: '+', i: img.plus},\\n                    // {k: '×', v: '\\\\\\\\times', i: ''},\\n                    // {k: '÷', v: '\\\\\\\\div', i: ''},\\n                    // {k: '', v: '±', i: img.union},\\n                    // {k: ',', v: ',', i: ''},\\n                    // {k: ':', v: ':', i: ''},\\n                    // {k: '°', v: '\\\\\\\\degree', i: ''},\\n                    // {k: '且', v: '且', i: ''},\\n                    // {k: '非', v: '非', i: ''},\\n                    // {k: 'x', v: 'x', i: ''},\\n                    // {k: 'y', v: 'y', i: ''},\\n                    // {k: '∑', v: '\\\\\\\\sum', i: ''},\\n                    // {k: '向量', v: '\\\\\\\\overrightarrow', i: ''},\\n                    // {k: '∠', v: '∠', i: ''},\\n                    // {k: '∵', v: '\\\\\\\\because', i: ''},\\n                    // {k: '∴', v: '\\\\\\\\therefore', i: ''},\\n                    // {k: '∈', v: '\\\\\\\\in', i: ''},\\n                    // {k: '∉', v: '\\\\\\\\notin', i: ''},\\n                    // {k: '∩', v: '\\\\\\\\intersection', i: ''},\\n                    // {k: '∪', v: '\\\\\\\\cup', i: ''},\\n                    // {k: '⊂', v: '\\\\\\\\subset', i: ''},\\n                    // {k: '⊃', v: '\\\\\\\\superset', i: ''},\\n                    // {k: '∞', v: '\\\\\\\\infty', i: ''},\\n                    // {k: 'log', v: '\\\\\\\\log', i: ''},\\n                    // {k: '←', v: '\\\\\\\\leftarrow', i: ''},\\n                    // {k: '→', v: '\\\\\\\\rightarrow', i: ''},\\n                    // {k: '⇔', v: '\\\\\\\\iff', i: ''}\\n                ],\\n                keyBottomSym: [\\n                    // {k: '', v: 'abc', i: img.abc},\\n                    {k: '', v: 'hide', i: img.hide, t: false},\\n                    {k: '', v: '<', i: img.less_than, t: false},\\n                    {k: '', v: '>', i: img.more_than, t: false},\\n                    {k: '', v: '\\\\\\\\leq', i: img.less_equals, t: false},\\n                    {k: '', v: '\\\\\\\\geq', i: img.more_equals, t: false},\\n\\n                ],\\n                keyboardRight: [\\n                    {k: '', v: '-', i: img.subtract, t: false},\\n                    {k: '', v: '+', i: img.plus, t: false},\\n                    {k: '', v: '±', i: img.union, t: false}\\n                ],\\n                latex: this.value,\\n                keyshow: this.show,\\n                keyorwrite: 1,\\n                cursorx: 0,\\n                cursory: 0,\\n                timer: null,\\n                interval: null\\n            };\\n        },\\n        props: {\\n            show: Boolean,\\n            value: String,\\n            keypanel: {\\n                type: Number,\\n                default: 1\\n            },\\n            ctrl: {\\n                type: Number,\\n                default: 0\\n            },\\n            output: String,\\n        },\\n        mounted() {\\n            var that = this;\\n            var mathFieldSpan = document.getElementById(this.mathinput);\\n\\n            var MQ = MathQuill.getInterface(2);\\n            var mathField = that.mathField = MQ.MathField(mathFieldSpan, {\\n                spaceBehavesLikeTab: true,\\n                leftRightIntoCmdGoes: 'up',\\n                restrictMismatchedBrackets: true,\\n                sumStartsWithNEquals: true,\\n                supSubsRequireOperand: true,\\n                autoSubscriptNumerals: true,\\n                autoOperatorNames: 'sin COMMA',\\n                handlers: {\\n                    edit: function (mathField) {\\n                        that.$emit('update:value', mathField.latex());\\n                        //显示光标\\n                        const controller = mathField.__controller;\\n                        controller.cursor.show();\\n                        controller.blurred = false;\\n                    }\\n                }\\n            });\\n\\n            that.mathField.latex(that.value);\\n\\n            window.onresize = function () {\\n                var content = $('#mathinput .mq-root-block');\\n                content.scrollLeft(content[0].scrollWidth)\\n            };\\n        },\\n        methods: {\\n            /**\\n             * 插入符号\\n             * @param valor\\n             */\\n            insertar(valor) {\\n                var that = this;\\n                if (valor.includes(\\\"^2\\\") || valor.includes(\\\"^3\\\")) {\\n                    that.mathField.write(valor);\\n                } else if (valor === 'Backspace') {\\n                    that.mathField.keystroke(valor);\\n                } else {\\n                    that.mathField.cmd(valor);\\n                }\\n\\n            },\\n            /**\\n             * 键盘布局切换\\n             * @param val\\n             */\\n            changepanel(val) {\\n                this.panel = val;\\n                this.$emit('update:keypanel', val);\\n                let keyboardDiv = document.getElementById('keyboard');\\n                let height = window.getComputedStyle(keyboardDiv).getPropertyValue(\\\"height\\\");\\n                console.log(height);\\n                try {\\n                    $App.keyboardHeight(height);\\n                } catch (e) {\\n                }\\n            },\\n            /**\\n             * 字母大小写切换\\n             */\\n            caps() {\\n                if (this.capsletter === 'letter') {\\n                    this.capsletter = 'caps'\\n                } else {\\n                    this.capsletter = 'letter'\\n                }\\n            },\\n            /**\\n             * 键盘隐藏\\n             * @param event\\n             */\\n            keyhide(event) {\\n                this.$emit('update:show', false);\\n                this.$emit('update:output', this.value);\\n                $App.hideKeyboard();\\n            },\\n            cursorLeft(event) {\\n                this.mathField.keystroke(\\\"Left\\\");\\n                this.cursorx = event.changedTouches[0].clientX;\\n                console.log(\\\"Left\\\")\\n            },\\n            cursorRight(event) {\\n                this.mathField.keystroke(\\\"Right\\\");\\n                this.cursorx = event.changedTouches[0].clientX;\\n                console.log(\\\"Right\\\")\\n            },\\n            cursorUp(event) {\\n                var _this = this\\n            },\\n            cursorDown(event) {\\n                var _this = this;\\n                _this.cursorx = event.changedTouches[0].clientX;\\n                _this.cursory = event.changedTouches[0].clientY;\\n            },\\n            cursorMove(event) {\\n                var x = this.cursorx - event.changedTouches[0].clientX;\\n                var y = this.cursory - event.changedTouches[0].clientY;\\n\\n                if (x > 10) {\\n                    this.mathField.keystroke(\\\"Left\\\");\\n                    this.cursorx = event.changedTouches[0].clientX;\\n                    console.log(\\\"Left\\\")\\n                }\\n\\n                if (x < -10) {\\n                    this.mathField.keystroke(\\\"Right\\\");\\n                    this.cursorx = event.changedTouches[0].clientX;\\n                    console.log(\\\"Right\\\")\\n                }\\n\\n                if (y > 10) {\\n                    this.mathField.keystroke(\\\"Up\\\");\\n                    this.cursory = event.changedTouches[0].clientY;\\n                    console.log(\\\"Up\\\")\\n                }\\n\\n                if (y < -10) {\\n                    this.mathField.keystroke(\\\"Down\\\");\\n                    this.cursory = event.changedTouches[0].clientY;\\n                    console.log(\\\"Down\\\")\\n                }\\n\\n            },\\n\\n            backDown(val) {\\n                var _this = this;\\n                if (val === 'Backspace') {\\n                    _this.timer = setTimeout(function () {\\n                        _this.interval = setInterval(function () {\\n                            _this.mathField.keystroke('Backspace')\\n                        }, 100)\\n                    }, 500)\\n                }\\n\\n            },\\n            backUp(val) {\\n                if (val === 'Backspace') {\\n                    this.mathField.keystroke('Backspace');\\n                    clearTimeout(this.timer);\\n                    clearInterval(this.interval)\\n                }\\n            }\\n        },\\n        watch: {\\n            value(nval, oval) {\\n                if (!this.show) {\\n                    this.mathField.latex(this.value)\\n                }\\n\\n                var content = $('#mathinput .mq-root-block');\\n                content.scrollLeft(content[0].scrollWidth)\\n            },\\n            ctrl(nval, oval) {\\n                this.$emit('update:ctrl', nval)\\n                // this.keyhide()\\n                // console.log('ctrl'+nval)\\n            },\\n        }\\n    };\\n<\/script>\\n\\n\x3c!-- Add \\\"scoped\\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n  * {\\n    box-sizing: content-box !important;\\n  }\\n\\n  #mathinput {\\n    margin: 3px;\\n    background: #fff;\\n    border: 2px solid #0099FF;\\n    border-radius: 4px;\\n    width: 65%\\n  }\\n\\n  .keyboard {\\n    margin-top: -8px;\\n    width: auto;\\n    position: fixed;\\n    padding-bottom: 4px;\\n    left: 0;\\n    background-color: #F1F1F1;\\n    z-index: 16777271;\\n    transition: all 0.5s;\\n  }\\n\\n  .keyboard-output {\\n    width: calc(100% - 4px);\\n    position: relative;\\n    padding: 2px;\\n    background-color: #fff;\\n  }\\n\\n  .left-right {\\n    position: absolute;\\n    display: block;\\n    margin-left: calc(65% + 15px);\\n    top: 50%;\\n    transform: translateY(-50%);\\n  }\\n\\n  .left-right img {\\n    width: 15px;\\n    height: 15px;\\n  }\\n\\n  .keyboard-output > a {\\n    display: block;\\n    text-decoration: none;\\n    line-height: 40px;\\n    width: 42px;\\n    text-align: center;\\n    background-color: #fff;\\n    color: #2e7bfd;\\n    font-size: 15px;\\n    position: absolute;\\n    right: 2px;\\n    top: 50%;\\n    transform: translateY(-50%);\\n  }\\n\\n  @-webkit-keyframes van-circular {\\n    0% {\\n      stroke-dasharray: 1, 200;\\n      stroke-dashoffset: 0;\\n    }\\n    50% {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -40;\\n    }\\n    to {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -120;\\n    }\\n  }\\n\\n  @keyframes van-circular {\\n    0% {\\n      stroke-dasharray: 1, 200;\\n      stroke-dashoffset: 0;\\n    }\\n    50% {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -40;\\n    }\\n    to {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -120;\\n    }\\n  }\\n\\n  .keyboard-panel-letter {\\n    width: 100vw;\\n    position: center;\\n  }\\n\\n  .keyboard-bottom {\\n    position: center;\\n  }\\n\\n\\n  .keyboard-bottom li {\\n    background-color: #F7F7F7;\\n    margin-left: 4px;\\n    margin-top: 4px;\\n    width: calc((100vw - 28px) / 6);\\n  }\\n\\n  .keyboard-bottom li:nth-child(5) {\\n    width: calc((100vw - 28px) / 6 - 2px);\\n  }\\n\\n  .keyboard-panel .letter-row {\\n    margin-top: 5px;\\n    height: 42px;\\n    width: 100%;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(3) li:first-child {\\n    width: calc((300vw - 97px) / 20);\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(3) li:last-child {\\n    width: calc((300vw - 97px) / 20);\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:first-child {\\n    width: calc((100vw - 19px) / 4);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:last-child {\\n    width: calc((100vw - 19px) / 4);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:nth-child(2) {\\n    width: calc((100vw - 49px) / 10);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:nth-child(3) {\\n    width: calc(2 * (100vw - 49px) / 5 + 15px);\\n    font-size: 15px;\\n    /* background-color: #F7F7F7 */\\n  }\\n\\n  .keyboard-panel-letter ul {\\n    position: relative;\\n    left: 50%;\\n    transform: translateX(-50%);\\n  }\\n\\n  .keyboard-panel-default {\\n    float: left;\\n    margin: 4px 4px 0 4px;\\n  }\\n\\n  .keyboard-panel ul {\\n    margin: 0;\\n    padding: 0;\\n    float: left;\\n  }\\n\\n  .keyboard-panel ul li {\\n    list-style: none;\\n    height: 42px;\\n    line-height: 42px;\\n    text-align: center;\\n    float: left;\\n    border-radius: 5px;\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    font-size: 20px;\\n    color: #0d0d0d;\\n    position: relative;\\n  }\\n\\n  .letter-shade {\\n    width: 100%;\\n    height: 100%;\\n    position: absolute;\\n    z-index: 1;\\n  }\\n\\n  .keyboard-panel-letter ul li {\\n    width: calc((100vw - 49px) / 10);\\n    margin-right: 5px;\\n    background-color: #fff;\\n  }\\n\\n  .keyboard-panel-letter ul li:last-child {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-panel-default ul li {\\n    width: calc((100vw - 29px) / 6);\\n    margin-top: 4px;\\n  }\\n\\n  .keyboard-default-symbol {\\n    width: calc((100vw - 16px) / 3);\\n    margin-right: 4px;\\n    float: left;\\n  }\\n\\n  .keyboard-default-symbol > ul {\\n    background-color: #F7F7F7;\\n    border-radius: 5px;\\n  }\\n\\n  .keyboard-default-symbol ul li:nth-child(2n) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-symbol > ul li:nth-child(1) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-symbol > ul li:nth-child(2) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-panel li img {\\n    top: 50%;\\n    transform: translate(-50%, -50%);\\n    max-height: 42px;\\n    position: absolute;\\n    z-index: 0;\\n    left: 50%;\\n  }\\n\\n  .keyboard-default-symbol-bottom ul li {\\n    background-color: #F1F1F1;\\n    font-size: 15px;\\n  }\\n\\n  .keyboard-default-num {\\n    width: calc((100vw - 16px) / 2);\\n    float: left;\\n    margin-right: 4px;\\n  }\\n\\n  .keyboard-default-num ul li {\\n    background-color: #fff;\\n    margin-right: 4px;\\n    width: calc(((100vw - 20px) / 2 - 8px) / 3);\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(1) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(2) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(3) {\\n    margin-top: 0;\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(6) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(9) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(11) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(10) {\\n    width: calc((100vw - 28px) / 3 + 3px);\\n  }\\n\\n  .keyboard-default-right {\\n    width: calc((100vw - 16px) / 6 - 2px);\\n    float: right;\\n    background-color: #F7F7F7;\\n    border-radius: 4px;\\n  }\\n\\n  .keyboard-default-right ul li {\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-symbol-left > ul {\\n    height: 146px;\\n    overflow-y: scroll;\\n    background-color: #F7F7F7;\\n    border-radius: 5px;\\n  }\\n\\n  .keyboard-panel-symbol ul li {\\n    width: calc((100vw - 29px) / 6);\\n    margin-top: 10px;\\n    margin-right: 5px;\\n  }\\n\\n  .keyboard-symbol-left ul li:nth-child(5n) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-symbol-left .keyboard-default-symbol-bottom ul li:nth-child(3) {\\n    width: calc((100vw - 9px) / 2);\\n    margin-right: 0;\\n    background-color: #fff;\\n  }\\n\\n  .keyboard-func img {\\n    height: 36px;\\n  }\\n\\n  .keyboard-func-icon:last-child img {\\n    height: 28px;\\n    margin-top: 4px;\\n  }\\n\\n</style>\\n\\n<style>\\n  .keyboard textarea {\\n    display: none !important;\\n  }\\n\\n  .mathview textarea {\\n    display: none !important;\\n  }\\n\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///18\n")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(20);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"70f6bffa\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2tleWJvYXJkLnZ1ZT85ODg5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLEVBQXNRO0FBQzVSLDRDQUE0QyxRQUFTO0FBQ3JEO0FBQ0E7QUFDQSxVQUFVLG1CQUFPLENBQUMsQ0FBNkQ7QUFDL0UsK0NBQStDO0FBQy9DO0FBQ0EsR0FBRyxLQUFVLEVBQUUiLCJmaWxlIjoiMTkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTEhLi9rZXlib2FyZC52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiNzBmNmJmZmFcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0xIS4va2V5Ym9hcmQudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0xIS4va2V5Ym9hcmQudnVlXCIpO1xuICAgICBpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcbiAgICAgdXBkYXRlKG5ld0NvbnRlbnQpO1xuICAgfSk7XG4gfVxuIC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3NcbiBtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n")},function(module,exports,__webpack_require__){eval("exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.keyboard textarea {\\n  display: none !important;\\n}\\n.mathview textarea {\\n  display: none !important;\\n}\\n\\n\\n\", \"\", {\"version\":3,\"sources\":[\"E:/mygithub/math-keyboard/src/lib/src/lib/keyboard.vue\"],\"names\":[],\"mappings\":\";AAmwBA;EACA,yBAAA;CACA;AAEA;EACA,yBAAA;CACA\",\"file\":\"keyboard.vue\",\"sourcesContent\":[\"<template>\\n  <div class=\\\"keyboard\\\" id=\\\"keyboard\\\">\\n    <div class=\\\"keyboard-output\\\">\\n      <span :id=\\\"mathinput\\\"\\n            @touchstart=\\\"cursorDown($event)\\\"\\n            @touchmove=\\\"cursorMove($event)\\\"\\n            @touchup=\\\"cursorUp($event)\\\">\\n      </span>\\n      <div class=\\\"left-right\\\">\\n        <img :src=\\\"img.cursor_left\\\" @click=\\\"cursorLeft($event)\\\"/>\\n        <img :src=\\\"img.cursor_right\\\" @click=\\\"cursorRight($event)\\\" style=\\\"margin-left: 20px\\\"/>\\n      </div>\\n      <a @click=\\\"keyhide()\\\" style=\\\"width: 15%\\\">确定</a>\\n    </div>\\n    <div class=\\\"keyboard-panel\\\"\\n         :style=\\\"{display:keyorwrite === 1 ? 'unset':'none'}\\\">\\n      <div class=\\\"keyboard-panel-default\\\" v-if=\\\"panel === 1\\\">\\n        <div class=\\\"keyboard-default-symbol\\\">\\n          <ul>\\n            <li v-for=\\\"item in keysym\\\" @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"keyboard-default-num\\\">\\n          <ul>\\n            <li v-for=\\\"item in keynum\\\"\\n                @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#fff'}\\\"\\n            >{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n        <div class=\\\"keyboard-default-right\\\">\\n          <ul>\\n            <li @touchstart=\\\"backDown('Backspace')\\\" @touchend=\\\"backUp('Backspace')\\\"\\n                style=\\\"background-color: #F7F7F7;margin-top: 0px\\\"><img :src=\\\"img.back\\\"/></li>\\n            <li v-for=\\\"item in keyboardRight\\\"\\n                @click=\\\"insertar(item.v)\\\"\\n                @touchstart=\\\"item.t = true\\\"\\n                @touchend=\\\"item.t = false\\\"\\n                :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"keyboard-panel-letter\\\" v-if=\\\"panel === 3\\\">\\n        <div class=\\\"letter-row\\\" v-for=\\\"items in keyabc[capsletter]\\\">\\n          <ul>\\n            <li v-for=\\\"item in items\\\"\\n                @click=\\\"(item.v !== 'shift' ? (item.v !== 'Backspace' ? insertar(item.v) : '') : caps())\\\"\\n                @touchstart=\\\"item.t = true,backDown(item.v),item.v === 'Backspace' ? item.i = img.dback : ''\\\"\\n                @touchend=\\\"item.t = false,backUp(item.v),item.v === 'Backspace' ? item.i = img.back : ''\\\"\\n                :style=\\\"item.v !== 'shift' ? item.v !== 'Backspace' ? {'background-color':item.t ? '#bababa' : '#fff'} : {'background-color':item.t ? '#fff' : '#F7F7F7'} :{'background-color':item.s ? '#fff' : '#F7F7F7'}\\\"\\n            >\\n              <div class=\\\"letter-shade\\\"></div>\\n              <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n            </li>\\n          </ul>\\n        </div>\\n      </div>\\n      <div class=\\\"keyboard-bottom\\\">\\n        <ul>\\n          <li @click=\\\"changepanel(panel===1?3:1)\\\" style=\\\"font-size: 14px;\\\">{{panel===1?'abc':'123'}}\\n          </li>\\n          <li v-for=\\\"item in keyBottomSym\\\"\\n              @click=\\\"item.v==='hide'?keyhide():insertar(item.v)\\\"\\n              @touchstart=\\\"item.t = true\\\"\\n              @touchend=\\\"item.t = false\\\"\\n              :style=\\\"{'background-color':item.t?'#bababa':'#F7F7F7'}\\\">\\n            <div class=\\\"letter-shade\\\"></div>\\n            <img :src=\\\"item.i\\\" v-if=\\\"item.i\\\"/>{{item.k}}\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n\\n\\n  </div>\\n</template>\\n\\n<script>\\n    import \\\"mathquill/build/mathquill\\\";\\n    import img from './img.js'\\n    import {setTimeout, clearTimeout} from 'timers';\\n\\n    export default {\\n        name: \\\"math-keyboard\\\",\\n        data() {\\n            return {\\n                img: img,\\n                mathField: null,\\n                mathview: 'mathview' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\\n                mathinput: 'mathinput',\\n                panel: this.keypanel,\\n                capsletter: 'letter',\\n                keyabc: {\\n                    'letter': [\\n                        [\\n                            {k: 'q', v: 'q', t: false},\\n                            {k: 'w', v: 'w', t: false},\\n                            {k: 'e', v: 'e', t: false},\\n                            {k: 'r', v: 'r', t: false},\\n                            {k: 't', v: 't', t: false},\\n                            {k: 'y', v: 'y', t: false},\\n                            {k: 'u', v: 'u', t: false},\\n                            {k: 'i', v: 'i', t: false},\\n                            {k: 'o', v: 'o', t: false},\\n                            {k: 'p', v: 'p', t: false},\\n                        ],\\n                        [\\n                            {k: 'a', v: 'a', t: false},\\n                            {k: 's', v: 's', t: false},\\n                            {k: 'd', v: 'd', t: false},\\n                            {k: 'f', v: 'f', t: false},\\n                            {k: 'g', v: 'g', t: false},\\n                            {k: 'h', v: 'h', t: false},\\n                            {k: 'j', v: 'j', t: false},\\n                            {k: 'k', v: 'k', t: false},\\n                            {k: 'l', v: 'l', t: false},\\n                        ],\\n                        [\\n                            {k: '', v: 'shift', i: img.shift, s: false},\\n                            {k: 'z', v: 'z', t: false},\\n                            {k: 'x', v: 'x', t: false},\\n                            {k: 'c', v: 'c', t: false},\\n                            {k: 'v', v: 'v', t: false},\\n                            {k: 'b', v: 'b', t: false},\\n                            {k: 'n', v: 'n', t: false},\\n                            {k: 'm', v: 'm', t: false},\\n                            {k: '', v: 'Backspace', i: img.back, t: false},\\n                        ]\\n                    ],\\n                    'caps': [\\n                        [\\n                            {k: 'Q', v: 'Q', t: false},\\n                            {k: 'W', v: 'W', t: false},\\n                            {k: 'E', v: 'E', t: false},\\n                            {k: 'R', v: 'R', t: false},\\n                            {k: 'T', v: 'T', t: false},\\n                            {k: 'Y', v: 'Y', t: false},\\n                            {k: 'U', v: 'U', t: false},\\n                            {k: 'I', v: 'I', t: false},\\n                            {k: 'O', v: 'O', t: false},\\n                            {k: 'P', v: 'P', t: false},\\n                        ],\\n                        [\\n                            {k: 'A', v: 'A', t: false},\\n                            {k: 'S', v: 'S', t: false},\\n                            {k: 'D', v: 'D', t: false},\\n                            {k: 'F', v: 'F', t: false},\\n                            {k: 'G', v: 'G', t: false},\\n                            {k: 'H', v: 'H', t: false},\\n                            {k: 'J', v: 'J', t: false},\\n                            {k: 'K', v: 'K', t: false},\\n                            {k: 'L', v: 'L', t: false},\\n                        ],\\n                        [\\n                            {k: '', v: 'shift', i: img.dshift, s: true},\\n                            {k: 'Z', v: 'Z', t: false},\\n                            {k: 'X', v: 'X', t: false},\\n                            {k: 'C', v: 'C', t: false},\\n                            {k: 'V', v: 'V', t: false},\\n                            {k: 'B', v: 'B', t: false},\\n                            {k: 'N', v: 'N', t: false},\\n                            {k: 'M', v: 'M', t: false},\\n                            {k: '', v: 'Backspace', i: img.back, t: false},\\n                        ]\\n                    ]\\n                },\\n                keynum: [\\n                    {k: '1', v: '1', t: false},\\n                    {k: '2', v: '2', t: false},\\n                    {k: '3', v: '3', t: false},\\n                    {k: '4', v: '4', t: false},\\n                    {k: '5', v: '5', t: false},\\n                    {k: '6', v: '6', t: false},\\n                    {k: '7', v: '7', t: false},\\n                    {k: '8', v: '8', t: false},\\n                    {k: '9', v: '9', t: false},\\n                    {k: '0', v: '0', t: false},\\n                    {k: '.', v: '.', t: false},\\n                ],\\n                keysym: [\\n                    {k: '', v: '\\\\\\\\nthroot', i: img.raiz, t: false},\\n                    {k: '', v: '\\\\\\\\sqrt', i: img.raiz2, t: false},\\n                    {k: '', v: '^', i: img.potencia, t: false},\\n                    {k: '', v: '^2', i: img.cuadrado, t: false},\\n                    {k: '', v: '|', i: img.abs, t: false},\\n                    {k: '', v: '/', i: img.fraccion, t: false},\\n                    {k: '', v: '\\\\\\\\pi', i: img._pi, t: false},\\n                    {k: '', v: '或', i: img.or, t: false},\\n                    // {k: '', v: '^3', i: img.tercera},\\n                    // {k: '(', v: '(', i: ''},\\n                    // {k: ')', v: ')', i: ''},\\n                    // {k: '[', v: '[', i: ''},\\n                    // {k: ']', v: ']', i: ''},\\n                    // {k: 'sin', v: '\\\\\\\\sin', i: ''},\\n                    // {k: 'cos', v: '\\\\\\\\cos', i: ''},\\n                    // {k: 'tan', v: '\\\\\\\\tan', i: ''},\\n                    // {k: '≈', v: '\\\\\\\\approx', i: ''},\\n                    // {k: '≠', v: '\\\\\\\\neq', i: ''},\\n                    // {k: '%', v: '%', i: ''},\\n                    // {k: '', v: '-', i: img.subtract},\\n                    // {k: '', v: '+', i: img.plus},\\n                    // {k: '×', v: '\\\\\\\\times', i: ''},\\n                    // {k: '÷', v: '\\\\\\\\div', i: ''},\\n                    // {k: '', v: '±', i: img.union},\\n                    // {k: ',', v: ',', i: ''},\\n                    // {k: ':', v: ':', i: ''},\\n                    // {k: '°', v: '\\\\\\\\degree', i: ''},\\n                    // {k: '且', v: '且', i: ''},\\n                    // {k: '非', v: '非', i: ''},\\n                    // {k: 'x', v: 'x', i: ''},\\n                    // {k: 'y', v: 'y', i: ''},\\n                    // {k: '∑', v: '\\\\\\\\sum', i: ''},\\n                    // {k: '向量', v: '\\\\\\\\overrightarrow', i: ''},\\n                    // {k: '∠', v: '∠', i: ''},\\n                    // {k: '∵', v: '\\\\\\\\because', i: ''},\\n                    // {k: '∴', v: '\\\\\\\\therefore', i: ''},\\n                    // {k: '∈', v: '\\\\\\\\in', i: ''},\\n                    // {k: '∉', v: '\\\\\\\\notin', i: ''},\\n                    // {k: '∩', v: '\\\\\\\\intersection', i: ''},\\n                    // {k: '∪', v: '\\\\\\\\cup', i: ''},\\n                    // {k: '⊂', v: '\\\\\\\\subset', i: ''},\\n                    // {k: '⊃', v: '\\\\\\\\superset', i: ''},\\n                    // {k: '∞', v: '\\\\\\\\infty', i: ''},\\n                    // {k: 'log', v: '\\\\\\\\log', i: ''},\\n                    // {k: '←', v: '\\\\\\\\leftarrow', i: ''},\\n                    // {k: '→', v: '\\\\\\\\rightarrow', i: ''},\\n                    // {k: '⇔', v: '\\\\\\\\iff', i: ''}\\n                ],\\n                keyBottomSym: [\\n                    // {k: '', v: 'abc', i: img.abc},\\n                    {k: '', v: 'hide', i: img.hide, t: false},\\n                    {k: '', v: '<', i: img.less_than, t: false},\\n                    {k: '', v: '>', i: img.more_than, t: false},\\n                    {k: '', v: '\\\\\\\\leq', i: img.less_equals, t: false},\\n                    {k: '', v: '\\\\\\\\geq', i: img.more_equals, t: false},\\n\\n                ],\\n                keyboardRight: [\\n                    {k: '', v: '-', i: img.subtract, t: false},\\n                    {k: '', v: '+', i: img.plus, t: false},\\n                    {k: '', v: '±', i: img.union, t: false}\\n                ],\\n                latex: this.value,\\n                keyshow: this.show,\\n                keyorwrite: 1,\\n                cursorx: 0,\\n                cursory: 0,\\n                timer: null,\\n                interval: null\\n            };\\n        },\\n        props: {\\n            show: Boolean,\\n            value: String,\\n            keypanel: {\\n                type: Number,\\n                default: 1\\n            },\\n            ctrl: {\\n                type: Number,\\n                default: 0\\n            },\\n            output: String,\\n        },\\n        mounted() {\\n            var that = this;\\n            var mathFieldSpan = document.getElementById(this.mathinput);\\n\\n            var MQ = MathQuill.getInterface(2);\\n            var mathField = that.mathField = MQ.MathField(mathFieldSpan, {\\n                spaceBehavesLikeTab: true,\\n                leftRightIntoCmdGoes: 'up',\\n                restrictMismatchedBrackets: true,\\n                sumStartsWithNEquals: true,\\n                supSubsRequireOperand: true,\\n                autoSubscriptNumerals: true,\\n                autoOperatorNames: 'sin COMMA',\\n                handlers: {\\n                    edit: function (mathField) {\\n                        that.$emit('update:value', mathField.latex());\\n                        //显示光标\\n                        const controller = mathField.__controller;\\n                        controller.cursor.show();\\n                        controller.blurred = false;\\n                    }\\n                }\\n            });\\n\\n            that.mathField.latex(that.value);\\n\\n            window.onresize = function () {\\n                var content = $('#mathinput .mq-root-block');\\n                content.scrollLeft(content[0].scrollWidth)\\n            };\\n        },\\n        methods: {\\n            /**\\n             * 插入符号\\n             * @param valor\\n             */\\n            insertar(valor) {\\n                var that = this;\\n                if (valor.includes(\\\"^2\\\") || valor.includes(\\\"^3\\\")) {\\n                    that.mathField.write(valor);\\n                } else if (valor === 'Backspace') {\\n                    that.mathField.keystroke(valor);\\n                } else {\\n                    that.mathField.cmd(valor);\\n                }\\n\\n            },\\n            /**\\n             * 键盘布局切换\\n             * @param val\\n             */\\n            changepanel(val) {\\n                this.panel = val;\\n                this.$emit('update:keypanel', val);\\n                let keyboardDiv = document.getElementById('keyboard');\\n                let height = window.getComputedStyle(keyboardDiv).getPropertyValue(\\\"height\\\");\\n                console.log(height);\\n                try {\\n                    $App.keyboardHeight(height);\\n                } catch (e) {\\n                }\\n            },\\n            /**\\n             * 字母大小写切换\\n             */\\n            caps() {\\n                if (this.capsletter === 'letter') {\\n                    this.capsletter = 'caps'\\n                } else {\\n                    this.capsletter = 'letter'\\n                }\\n            },\\n            /**\\n             * 键盘隐藏\\n             * @param event\\n             */\\n            keyhide(event) {\\n                this.$emit('update:show', false);\\n                this.$emit('update:output', this.value);\\n                $App.hideKeyboard();\\n            },\\n            cursorLeft(event) {\\n                this.mathField.keystroke(\\\"Left\\\");\\n                this.cursorx = event.changedTouches[0].clientX;\\n                console.log(\\\"Left\\\")\\n            },\\n            cursorRight(event) {\\n                this.mathField.keystroke(\\\"Right\\\");\\n                this.cursorx = event.changedTouches[0].clientX;\\n                console.log(\\\"Right\\\")\\n            },\\n            cursorUp(event) {\\n                var _this = this\\n            },\\n            cursorDown(event) {\\n                var _this = this;\\n                _this.cursorx = event.changedTouches[0].clientX;\\n                _this.cursory = event.changedTouches[0].clientY;\\n            },\\n            cursorMove(event) {\\n                var x = this.cursorx - event.changedTouches[0].clientX;\\n                var y = this.cursory - event.changedTouches[0].clientY;\\n\\n                if (x > 10) {\\n                    this.mathField.keystroke(\\\"Left\\\");\\n                    this.cursorx = event.changedTouches[0].clientX;\\n                    console.log(\\\"Left\\\")\\n                }\\n\\n                if (x < -10) {\\n                    this.mathField.keystroke(\\\"Right\\\");\\n                    this.cursorx = event.changedTouches[0].clientX;\\n                    console.log(\\\"Right\\\")\\n                }\\n\\n                if (y > 10) {\\n                    this.mathField.keystroke(\\\"Up\\\");\\n                    this.cursory = event.changedTouches[0].clientY;\\n                    console.log(\\\"Up\\\")\\n                }\\n\\n                if (y < -10) {\\n                    this.mathField.keystroke(\\\"Down\\\");\\n                    this.cursory = event.changedTouches[0].clientY;\\n                    console.log(\\\"Down\\\")\\n                }\\n\\n            },\\n\\n            backDown(val) {\\n                var _this = this;\\n                if (val === 'Backspace') {\\n                    _this.timer = setTimeout(function () {\\n                        _this.interval = setInterval(function () {\\n                            _this.mathField.keystroke('Backspace')\\n                        }, 100)\\n                    }, 500)\\n                }\\n\\n            },\\n            backUp(val) {\\n                if (val === 'Backspace') {\\n                    this.mathField.keystroke('Backspace');\\n                    clearTimeout(this.timer);\\n                    clearInterval(this.interval)\\n                }\\n            }\\n        },\\n        watch: {\\n            value(nval, oval) {\\n                if (!this.show) {\\n                    this.mathField.latex(this.value)\\n                }\\n\\n                var content = $('#mathinput .mq-root-block');\\n                content.scrollLeft(content[0].scrollWidth)\\n            },\\n            ctrl(nval, oval) {\\n                this.$emit('update:ctrl', nval)\\n                // this.keyhide()\\n                // console.log('ctrl'+nval)\\n            },\\n        }\\n    };\\n<\/script>\\n\\n\x3c!-- Add \\\"scoped\\\" attribute to limit CSS to this component only --\x3e\\n<style scoped>\\n  * {\\n    box-sizing: content-box !important;\\n  }\\n\\n  #mathinput {\\n    margin: 3px;\\n    background: #fff;\\n    border: 2px solid #0099FF;\\n    border-radius: 4px;\\n    width: 65%\\n  }\\n\\n  .keyboard {\\n    margin-top: -8px;\\n    width: auto;\\n    position: fixed;\\n    padding-bottom: 4px;\\n    left: 0;\\n    background-color: #F1F1F1;\\n    z-index: 16777271;\\n    transition: all 0.5s;\\n  }\\n\\n  .keyboard-output {\\n    width: calc(100% - 4px);\\n    position: relative;\\n    padding: 2px;\\n    background-color: #fff;\\n  }\\n\\n  .left-right {\\n    position: absolute;\\n    display: block;\\n    margin-left: calc(65% + 15px);\\n    top: 50%;\\n    transform: translateY(-50%);\\n  }\\n\\n  .left-right img {\\n    width: 15px;\\n    height: 15px;\\n  }\\n\\n  .keyboard-output > a {\\n    display: block;\\n    text-decoration: none;\\n    line-height: 40px;\\n    width: 42px;\\n    text-align: center;\\n    background-color: #fff;\\n    color: #2e7bfd;\\n    font-size: 15px;\\n    position: absolute;\\n    right: 2px;\\n    top: 50%;\\n    transform: translateY(-50%);\\n  }\\n\\n  @-webkit-keyframes van-circular {\\n    0% {\\n      stroke-dasharray: 1, 200;\\n      stroke-dashoffset: 0;\\n    }\\n    50% {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -40;\\n    }\\n    to {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -120;\\n    }\\n  }\\n\\n  @keyframes van-circular {\\n    0% {\\n      stroke-dasharray: 1, 200;\\n      stroke-dashoffset: 0;\\n    }\\n    50% {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -40;\\n    }\\n    to {\\n      stroke-dasharray: 90, 150;\\n      stroke-dashoffset: -120;\\n    }\\n  }\\n\\n  .keyboard-panel-letter {\\n    width: 100vw;\\n    position: center;\\n  }\\n\\n  .keyboard-bottom {\\n    position: center;\\n  }\\n\\n\\n  .keyboard-bottom li {\\n    background-color: #F7F7F7;\\n    margin-left: 4px;\\n    margin-top: 4px;\\n    width: calc((100vw - 28px) / 6);\\n  }\\n\\n  .keyboard-bottom li:nth-child(5) {\\n    width: calc((100vw - 28px) / 6 - 2px);\\n  }\\n\\n  .keyboard-panel .letter-row {\\n    margin-top: 5px;\\n    height: 42px;\\n    width: 100%;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(3) li:first-child {\\n    width: calc((300vw - 97px) / 20);\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(3) li:last-child {\\n    width: calc((300vw - 97px) / 20);\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:first-child {\\n    width: calc((100vw - 19px) / 4);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:last-child {\\n    width: calc((100vw - 19px) / 4);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:nth-child(2) {\\n    width: calc((100vw - 49px) / 10);\\n    font-size: 15px;\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-panel-letter .letter-row:nth-child(4) li:nth-child(3) {\\n    width: calc(2 * (100vw - 49px) / 5 + 15px);\\n    font-size: 15px;\\n    /* background-color: #F7F7F7 */\\n  }\\n\\n  .keyboard-panel-letter ul {\\n    position: relative;\\n    left: 50%;\\n    transform: translateX(-50%);\\n  }\\n\\n  .keyboard-panel-default {\\n    float: left;\\n    margin: 4px 4px 0 4px;\\n  }\\n\\n  .keyboard-panel ul {\\n    margin: 0;\\n    padding: 0;\\n    float: left;\\n  }\\n\\n  .keyboard-panel ul li {\\n    list-style: none;\\n    height: 42px;\\n    line-height: 42px;\\n    text-align: center;\\n    float: left;\\n    border-radius: 5px;\\n    -moz-user-select: none;\\n    -webkit-user-select: none;\\n    font-size: 20px;\\n    color: #0d0d0d;\\n    position: relative;\\n  }\\n\\n  .letter-shade {\\n    width: 100%;\\n    height: 100%;\\n    position: absolute;\\n    z-index: 1;\\n  }\\n\\n  .keyboard-panel-letter ul li {\\n    width: calc((100vw - 49px) / 10);\\n    margin-right: 5px;\\n    background-color: #fff;\\n  }\\n\\n  .keyboard-panel-letter ul li:last-child {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-panel-default ul li {\\n    width: calc((100vw - 29px) / 6);\\n    margin-top: 4px;\\n  }\\n\\n  .keyboard-default-symbol {\\n    width: calc((100vw - 16px) / 3);\\n    margin-right: 4px;\\n    float: left;\\n  }\\n\\n  .keyboard-default-symbol > ul {\\n    background-color: #F7F7F7;\\n    border-radius: 5px;\\n  }\\n\\n  .keyboard-default-symbol ul li:nth-child(2n) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-symbol > ul li:nth-child(1) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-symbol > ul li:nth-child(2) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-panel li img {\\n    top: 50%;\\n    transform: translate(-50%, -50%);\\n    max-height: 42px;\\n    position: absolute;\\n    z-index: 0;\\n    left: 50%;\\n  }\\n\\n  .keyboard-default-symbol-bottom ul li {\\n    background-color: #F1F1F1;\\n    font-size: 15px;\\n  }\\n\\n  .keyboard-default-num {\\n    width: calc((100vw - 16px) / 2);\\n    float: left;\\n    margin-right: 4px;\\n  }\\n\\n  .keyboard-default-num ul li {\\n    background-color: #fff;\\n    margin-right: 4px;\\n    width: calc(((100vw - 20px) / 2 - 8px) / 3);\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(1) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(2) {\\n    margin-top: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(3) {\\n    margin-top: 0;\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(6) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(9) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(11) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-default-num ul li:nth-child(10) {\\n    width: calc((100vw - 28px) / 3 + 3px);\\n  }\\n\\n  .keyboard-default-right {\\n    width: calc((100vw - 16px) / 6 - 2px);\\n    float: right;\\n    background-color: #F7F7F7;\\n    border-radius: 4px;\\n  }\\n\\n  .keyboard-default-right ul li {\\n    background-color: #F7F7F7;\\n  }\\n\\n  .keyboard-symbol-left > ul {\\n    height: 146px;\\n    overflow-y: scroll;\\n    background-color: #F7F7F7;\\n    border-radius: 5px;\\n  }\\n\\n  .keyboard-panel-symbol ul li {\\n    width: calc((100vw - 29px) / 6);\\n    margin-top: 10px;\\n    margin-right: 5px;\\n  }\\n\\n  .keyboard-symbol-left ul li:nth-child(5n) {\\n    margin-right: 0;\\n  }\\n\\n  .keyboard-symbol-left .keyboard-default-symbol-bottom ul li:nth-child(3) {\\n    width: calc((100vw - 9px) / 2);\\n    margin-right: 0;\\n    background-color: #fff;\\n  }\\n\\n  .keyboard-func img {\\n    height: 36px;\\n  }\\n\\n  .keyboard-func-icon:last-child img {\\n    height: 28px;\\n    margin-top: 4px;\\n  }\\n\\n</style>\\n\\n<style>\\n  .keyboard textarea {\\n    display: none !important;\\n  }\\n\\n  .mathview textarea {\\n    display: none !important;\\n  }\\n\\n\\n</style>\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///20\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/(.png?896ea0d05bfb11083017d7fca4facf7d";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nLygucG5nPzM4MjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy8oLnBuZz84OTZlYTBkMDViZmIxMTA4MzAxN2Q3ZmNhNGZhY2Y3ZFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/+.svg?4e942b85af5fd371a755f998fe7c1fc7";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nLysuc3ZnPzg0MDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy8rLnN2Zz80ZTk0MmI4NWFmNWZkMzcxYTc1NWY5OThmZTdjMWZjN1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///22\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/-.svg?751c916c295d257c0d1103a29823eb8a";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nLy0uc3ZnPzcyYzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy8tLnN2Zz83NTFjOTE2YzI5NWQyNTdjMGQxMTAzYTI5ODIzZWI4YVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///23\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/less_than.svg?bdd16c381e0e992c4bf60796c4300f5e";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2xlc3NfdGhhbi5zdmc/ZGM5OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjI0LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2xlc3NfdGhhbi5zdmc/YmRkMTZjMzgxZTBlOTkyYzRiZjYwNzk2YzQzMDBmNWVcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///24\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/more_than.svg?edbb73ca1efc28aaf334447dfc4b66d3";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL21vcmVfdGhhbi5zdmc/NTllMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL21vcmVfdGhhbi5zdmc/ZWRiYjczY2ExZWZjMjhhYWYzMzQ0NDdkZmM0YjY2ZDNcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/).png?59cc94989b942a0c3a4399bba0a97b50";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nLykucG5nP2JmYWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy8pLnBuZz81OWNjOTQ5ODliOTQyYTBjM2E0Mzk5YmJhMGE5N2I1MFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///26\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/[.png?c96b4a02722860d83ec5f2f1906ad333";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL1sucG5nP2EwYzEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9bLnBuZz9jOTZiNGEwMjcyMjg2MGQ4M2VjNWYyZjE5MDZhZDMzM1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///27\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/].png?c53641ec7b4e9915a55094a352a7f13f";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL10ucG5nPzA2ODEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIyOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9dLnBuZz9jNTM2NDFlYzdiNGU5OTE1YTU1MDk0YTM1MmE3ZjEzZlwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///28\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/abs.svg?5d5fd75ba5c7c3b0762a218210c6c7a2";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2Ficy5zdmc/ZjU1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjI5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2Ficy5zdmc/NWQ1ZmQ3NWJhNWM3YzNiMDc2MmEyMTgyMTBjNmM3YTJcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///29\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/abc.svg?99be1fc5d285c93210b7d74dd2240d55";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2FiYy5zdmc/OTQyMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjMwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2FiYy5zdmc/OTliZTFmYzVkMjg1YzkzMjEwYjdkNzRkZDIyNDBkNTVcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///30\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/hide.svg?1d1ca89fbcafd58046c50ccb8706ba4d";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2hpZGUuc3ZnPzY5ZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9oaWRlLnN2Zz8xZDFjYTg5ZmJjYWZkNTgwNDZjNTBjY2I4NzA2YmE0ZFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///31\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/back.svg?750c888e0eec2b44f33f116cf0455f59";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2JhY2suc3ZnP2ZjYjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIzMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9iYWNrLnN2Zz83NTBjODg4ZTBlZWMyYjQ0ZjMzZjExNmNmMDQ1NWY1OVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///32\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/dback.png?eb909b3756c6999ae8e6a3b18f2d8b99";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2RiYWNrLnBuZz9kMGVmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvZGJhY2sucG5nP2ViOTA5YjM3NTZjNjk5OWFlOGU2YTNiMThmMmQ4Yjk5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///33\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/cuadrado.svg?a816b71f9bbad5da90adbd19aec6a4be";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2N1YWRyYWRvLnN2Zz9kNWQ0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMzQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvY3VhZHJhZG8uc3ZnP2E4MTZiNzFmOWJiYWQ1ZGE5MGFkYmQxOWFlYzZhNGJlXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///34\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/dshift.png?8de0b3ed64000048969cea945a85cbef";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2RzaGlmdC5wbmc/Y2Q4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjM1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2RzaGlmdC5wbmc/OGRlMGIzZWQ2NDAwMDA0ODk2OWNlYTk0NWE4NWNiZWZcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///35\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/fraccion.svg?676645f0a35ffe59a6989cc04540e4a8";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2ZyYWNjaW9uLnN2Zz9iYzg5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvZnJhY2Npb24uc3ZnPzY3NjY0NWYwYTM1ZmZlNTlhNjk4OWNjMDQ1NDBlNGE4XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///36\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/potencia.svg?197ea1338a338fd270dd2b5f8dd1558c";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3BvdGVuY2lhLnN2Zz84OTE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMzcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcG90ZW5jaWEuc3ZnPzE5N2VhMTMzOGEzMzhmZDI3MGRkMmI1ZjhkZDE1NThjXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///37\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/raiz.svg?d3e2b97f8c5566d78586a438f94bdd4e";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3JhaXouc3ZnPzYxMGIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiIzOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9yYWl6LnN2Zz9kM2UyYjk3ZjhjNTU2NmQ3ODU4NmE0MzhmOTRiZGQ0ZVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///38\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/raiz2.svg?d8d7f331cf9fc6e699f9218d1c9f7139";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3JhaXoyLnN2Zz9kY2Q5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiMzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcmFpejIuc3ZnP2Q4ZDdmMzMxY2Y5ZmM2ZTY5OWY5MjE4ZDFjOWY3MTM5XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///39\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/shift.svg?a59c1f1419616686fe0cb6098e8772ee";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3NoaWZ0LnN2Zz85MjM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvc2hpZnQuc3ZnP2E1OWMxZjE0MTk2MTY2ODZmZTBjYjYwOThlODc3MmVlXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///40\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/tercera.png?b69c1e8cc6478cd9a33b26b9578cd799";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3RlcmNlcmEucG5nPzBlYTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI0MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy90ZXJjZXJhLnBuZz9iNjljMWU4Y2M2NDc4Y2Q5YTMzYjI2Yjk1NzhjZDc5OVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///41\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/less_equals.svg?c37f585a26d12b5ba2ec1761c170f202";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2xlc3NfZXF1YWxzLnN2Zz81YTAyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvbGVzc19lcXVhbHMuc3ZnP2MzN2Y1ODVhMjZkMTJiNWJhMmVjMTc2MWMxNzBmMjAyXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///42\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/more_equals.svg?4e9dc72ae008eafd1d56acd59222ba04";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL21vcmVfZXF1YWxzLnN2Zz80ZDI3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvbW9yZV9lcXVhbHMuc3ZnPzRlOWRjNzJhZTAwOGVhZmQxZDU2YWNkNTkyMjJiYTA0XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///43\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/pi.svg?e1c9e8665fa66fe4e1b5b3390e1f8922";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3BpLnN2Zz8xODE4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvcGkuc3ZnP2UxYzllODY2NWZhNjZmZTRlMWI1YjMzOTBlMWY4OTIyXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///44\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/or.svg?1ba0f366d82cad8133d07db078fe4966";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL29yLnN2Zz9kZDJmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvb3Iuc3ZnPzFiYTBmMzY2ZDgyY2FkODEzM2QwN2RiMDc4ZmU0OTY2XCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///45\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/union.svg?ec3754fc7124043c88643adfe71b00bb";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3VuaW9uLnN2Zz83NzQ2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvdW5pb24uc3ZnP2VjMzc1NGZjNzEyNDA0M2M4ODY0M2FkZmU3MWIwMGJiXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///46\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/penicon.png?f005c09df874284e3a99ac78d3c86925";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL3Blbmljb24ucG5nPzgwYjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaUJBQWlCLHFCQUF1QiIsImZpbGUiOiI0Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImltZy9wZW5pY29uLnBuZz9mMDA1YzA5ZGY4NzQyODRlM2E5OWFjNzhkM2M4NjkyNVwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///47\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/cursor_left.svg?0f476a158d9666e779d967ee408f351f";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2N1cnNvcl9sZWZ0LnN2Zz8zMDJhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGlCQUFpQixxQkFBdUIiLCJmaWxlIjoiNDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbWcvY3Vyc29yX2xlZnQuc3ZnPzBmNDc2YTE1OGQ5NjY2ZTc3OWQ5NjdlZTQwOGYzNTFmXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///48\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "img/cursor_right.svg?4365f58e9a1a52051a1a2e2e4dde4db0";\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zdGF0aWMvaW1nL2N1cnNvcl9yaWdodC5zdmc/NzIxYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiaW1nL2N1cnNvcl9yaWdodC5zdmc/NDM2NWY1OGU5YTFhNTIwNTFhMWEyZTJlNGRkZTRkYjBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///49\n')},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(3), __webpack_require__(51)))\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///50\n')},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzP2YyOGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQzs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDJCQUEyQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsVUFBVSIsImZpbGUiOiI1MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///51\n")},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(53);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"7b43275e\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3JlbmRlci52dWU/MDE2MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUE4UjtBQUNwVCw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTZEO0FBQy9FLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjUyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xYWZmYTY1M1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3JlbmRlci52dWVcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiN2I0MzI3NWVcIiwgY29udGVudCwgZmFsc2UsIHt9KTtcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcbiAvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuIGlmKCFjb250ZW50LmxvY2Fscykge1xuICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJpZFxcXCI6XFxcImRhdGEtdi0xYWZmYTY1M1xcXCIsXFxcInNjb3BlZFxcXCI6dHJ1ZSxcXFwic291cmNlTWFwXFxcIjp0cnVlfSEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc2VsZWN0b3IuanM/dHlwZT1zdHlsZXMmaW5kZXg9MCEuL3JlbmRlci52dWVcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcImlkXFxcIjpcXFwiZGF0YS12LTFhZmZhNjUzXFxcIixcXFwic2NvcGVkXFxcIjp0cnVlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0wIS4vcmVuZGVyLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///52\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, "\\n.mathview[data-v-1affa653] {\\n  border: none;\\n  border-bottom: 1px solid gray;\\n  min-width: 45px;\\n  min-height: 22px;\\n}\\n.math-render[data-v-1affa653] {\\n  position: relative;\\n  float: left;\\n}\\n.math-render img[data-v-1affa653] {\\n  position: absolute;\\n  left: 10px;\\n  top: 0;\\n  height: 24px;\\n}\\n", "", {"version":3,"sources":["E:/mygithub/math-keyboard/src/lib/src/lib/render.vue"],"names":[],"mappings":";AAkDA;EACA,aAAA;EACA,8BAAA;EACA,gBAAA;EACA,iBAAA;CACA;AAEA;EACA,mBAAA;EACA,YAAA;CACA;AAEA;EACA,mBAAA;EACA,WAAA;EACA,OAAA;EACA,aAAA;CACA","file":"render.vue","sourcesContent":["<template >\\n  <div class=\\"math-render\\">\\n    <span :id=\\"mathview\\" class=\\"mathview\\"></span>\\n    <img :src=\\"img.penicon\\" v-if=\\"imgshow && !value\\"/>\\n  </div>\\n</template>\\n\\n<script>\\n    import \\"mathquill/build/mathquill\\";\\n    import img from \'./img.js\'\\n\\n    export default {\\n        name: \\"math-render\\",\\n        data() {\\n            return {\\n                img: img,\\n                mathview: \'mathview\' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\\n                viewField: null\\n            }\\n        },\\n        props: {\\n            value: String,\\n            imgshow: {\\n                type: Boolean,\\n                default: true\\n            }\\n        },\\n        mounted() {\\n            var that = this;\\n            var mathview = document.getElementById(this.mathview);\\n\\n            var MQ = MathQuill.getInterface(2);\\n\\n            var viewField = that.viewField = MQ.MathField(mathview);\\n\\n            viewField.latex(that.value)\\n        },\\n        watch: {\\n            value: function (val) {\\n                this.viewField.latex(val);\\n                try {\\n                    $App.outputLatex(\'$\' + val + \'$\')\\n                } catch (e) {\\n                }\\n            }\\n        }\\n    };\\n<\/script>\\n\\n<style scoped>\\n  .mathview {\\n    border: none;\\n    border-bottom: 1px solid gray;\\n    min-width: 45px;\\n    min-height: 22px;\\n  }\\n\\n  .math-render {\\n    position: relative;\\n    float: left;\\n  }\\n\\n  .math-render img {\\n    position: absolute;\\n    left: 10px;\\n    top: 0;\\n    height: 24px;\\n  }\\n</style>\\n\\n<style>\\n  .mathview textarea {\\n    display: none !important;\\n  }\\n\\n  .mathview .mq-cursor {\\n    display: none !important;\\n  }\\n</style>\\n"],"sourceRoot":""}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3JlbmRlci52dWU/OTVlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUErQztBQUNsRjs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsaUNBQWlDLGlCQUFpQixrQ0FBa0Msb0JBQW9CLHFCQUFxQixHQUFHLGlDQUFpQyx1QkFBdUIsZ0JBQWdCLEdBQUcscUNBQXFDLHVCQUF1QixlQUFlLFdBQVcsaUJBQWlCLEdBQUcsVUFBVSx1R0FBdUcsTUFBTSxVQUFVLFdBQVcsV0FBVyxXQUFXLEtBQUssS0FBSyxXQUFXLFVBQVUsS0FBSyxLQUFLLFdBQVcsVUFBVSxVQUFVLFVBQVUsd1JBQXdSLHdEQUF3RCxrREFBa0Qsc0JBQXNCLGlMQUFpTCxXQUFXLG1CQUFtQixvREFBb0QsOEVBQThFLFdBQVcsc0JBQXNCLDhCQUE4QixvRUFBb0UsbURBQW1ELHdFQUF3RSxzREFBc0QsbUJBQW1CLHFDQUFxQyw0Q0FBNEMsdUJBQXVCLDBFQUEwRSxZQUFZLG1CQUFtQixlQUFlLFdBQVcsUUFBUSw0Q0FBNEMsbUJBQW1CLG9DQUFvQyxzQkFBc0IsdUJBQXVCLEtBQUssb0JBQW9CLHlCQUF5QixrQkFBa0IsS0FBSyx3QkFBd0IseUJBQXlCLGlCQUFpQixhQUFhLG1CQUFtQixLQUFLLDZDQUE2QywrQkFBK0IsS0FBSyw0QkFBNEIsK0JBQStCLEtBQUssK0JBQStCOztBQUVuMUUiLCJmaWxlIjoiNTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLm1hdGh2aWV3W2RhdGEtdi0xYWZmYTY1M10ge1xcbiAgYm9yZGVyOiBub25lO1xcbiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIGdyYXk7XFxuICBtaW4td2lkdGg6IDQ1cHg7XFxuICBtaW4taGVpZ2h0OiAyMnB4O1xcbn1cXG4ubWF0aC1yZW5kZXJbZGF0YS12LTFhZmZhNjUzXSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICBmbG9hdDogbGVmdDtcXG59XFxuLm1hdGgtcmVuZGVyIGltZ1tkYXRhLXYtMWFmZmE2NTNdIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGxlZnQ6IDEwcHg7XFxuICB0b3A6IDA7XFxuICBoZWlnaHQ6IDI0cHg7XFxufVxcblwiLCBcIlwiLCB7XCJ2ZXJzaW9uXCI6MyxcInNvdXJjZXNcIjpbXCJFOi9teWdpdGh1Yi9tYXRoLWtleWJvYXJkL3NyYy9saWIvc3JjL2xpYi9yZW5kZXIudnVlXCJdLFwibmFtZXNcIjpbXSxcIm1hcHBpbmdzXCI6XCI7QUFrREE7RUFDQSxhQUFBO0VBQ0EsOEJBQUE7RUFDQSxnQkFBQTtFQUNBLGlCQUFBO0NBQ0E7QUFFQTtFQUNBLG1CQUFBO0VBQ0EsWUFBQTtDQUNBO0FBRUE7RUFDQSxtQkFBQTtFQUNBLFdBQUE7RUFDQSxPQUFBO0VBQ0EsYUFBQTtDQUNBXCIsXCJmaWxlXCI6XCJyZW5kZXIudnVlXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIjx0ZW1wbGF0ZSA+XFxuICA8ZGl2IGNsYXNzPVxcXCJtYXRoLXJlbmRlclxcXCI+XFxuICAgIDxzcGFuIDppZD1cXFwibWF0aHZpZXdcXFwiIGNsYXNzPVxcXCJtYXRodmlld1xcXCI+PC9zcGFuPlxcbiAgICA8aW1nIDpzcmM9XFxcImltZy5wZW5pY29uXFxcIiB2LWlmPVxcXCJpbWdzaG93ICYmICF2YWx1ZVxcXCIvPlxcbiAgPC9kaXY+XFxuPC90ZW1wbGF0ZT5cXG5cXG48c2NyaXB0PlxcbiAgICBpbXBvcnQgXFxcIm1hdGhxdWlsbC9idWlsZC9tYXRocXVpbGxcXFwiO1xcbiAgICBpbXBvcnQgaW1nIGZyb20gJy4vaW1nLmpzJ1xcblxcbiAgICBleHBvcnQgZGVmYXVsdCB7XFxuICAgICAgICBuYW1lOiBcXFwibWF0aC1yZW5kZXJcXFwiLFxcbiAgICAgICAgZGF0YSgpIHtcXG4gICAgICAgICAgICByZXR1cm4ge1xcbiAgICAgICAgICAgICAgICBpbWc6IGltZyxcXG4gICAgICAgICAgICAgICAgbWF0aHZpZXc6ICdtYXRodmlldycgKyBwYXJzZUludChNYXRoLnJhbmRvbSgpICogKDk5OTk5OSAtIDEwMDAwMCArIDEpICsgMTAwMDAwLCAxMCksXFxuICAgICAgICAgICAgICAgIHZpZXdGaWVsZDogbnVsbFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBwcm9wczoge1xcbiAgICAgICAgICAgIHZhbHVlOiBTdHJpbmcsXFxuICAgICAgICAgICAgaW1nc2hvdzoge1xcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuLFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSxcXG4gICAgICAgIG1vdW50ZWQoKSB7XFxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xcbiAgICAgICAgICAgIHZhciBtYXRodmlldyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubWF0aHZpZXcpO1xcblxcbiAgICAgICAgICAgIHZhciBNUSA9IE1hdGhRdWlsbC5nZXRJbnRlcmZhY2UoMik7XFxuXFxuICAgICAgICAgICAgdmFyIHZpZXdGaWVsZCA9IHRoYXQudmlld0ZpZWxkID0gTVEuTWF0aEZpZWxkKG1hdGh2aWV3KTtcXG5cXG4gICAgICAgICAgICB2aWV3RmllbGQubGF0ZXgodGhhdC52YWx1ZSlcXG4gICAgICAgIH0sXFxuICAgICAgICB3YXRjaDoge1xcbiAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiAodmFsKSB7XFxuICAgICAgICAgICAgICAgIHRoaXMudmlld0ZpZWxkLmxhdGV4KHZhbCk7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICAkQXBwLm91dHB1dExhdGV4KCckJyArIHZhbCArICckJylcXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9O1xcbjwvc2NyaXB0PlxcblxcbjxzdHlsZSBzY29wZWQ+XFxuICAubWF0aHZpZXcge1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmF5O1xcbiAgICBtaW4td2lkdGg6IDQ1cHg7XFxuICAgIG1pbi1oZWlnaHQ6IDIycHg7XFxuICB9XFxuXFxuICAubWF0aC1yZW5kZXIge1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICAgIGZsb2F0OiBsZWZ0O1xcbiAgfVxcblxcbiAgLm1hdGgtcmVuZGVyIGltZyB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgbGVmdDogMTBweDtcXG4gICAgdG9wOiAwO1xcbiAgICBoZWlnaHQ6IDI0cHg7XFxuICB9XFxuPC9zdHlsZT5cXG5cXG48c3R5bGU+XFxuICAubWF0aHZpZXcgdGV4dGFyZWEge1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuXFxuICAubWF0aHZpZXcgLm1xLWN1cnNvciB7XFxuICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG4gIH1cXG48L3N0eWxlPlxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///53\n')},function(module,exports,__webpack_require__){eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(55);\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(1).default\nvar update = add(\"873bcb4c\", content, false, {});\n// Hot Module Replacement\nif(false) {}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3JlbmRlci52dWU/NDlkNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBLGNBQWMsbUJBQU8sQ0FBQyxFQUFvUTtBQUMxUiw0Q0FBNEMsUUFBUztBQUNyRDtBQUNBO0FBQ0EsVUFBVSxtQkFBTyxDQUFDLENBQTZEO0FBQy9FLCtDQUErQztBQUMvQztBQUNBLEdBQUcsS0FBVSxFQUFFIiwiZmlsZSI6IjU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0xIS4vcmVuZGVyLnZ1ZVwiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgYWRkID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzQ2xpZW50LmpzXCIpLmRlZmF1bHRcbnZhciB1cGRhdGUgPSBhZGQoXCI4NzNiY2I0Y1wiLCBjb250ZW50LCBmYWxzZSwge30pO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuIC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG4gaWYoIWNvbnRlbnQubG9jYWxzKSB7XG4gICBtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/c291cmNlTWFwIS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zdHlsZS1jb21waWxlci9pbmRleC5qcz97XFxcIm9wdGlvbnNJZFxcXCI6XFxcIjBcXFwiLFxcXCJ2dWVcXFwiOnRydWUsXFxcInNjb3BlZFxcXCI6ZmFsc2UsXFxcInNvdXJjZU1hcFxcXCI6dHJ1ZX0hLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3NlbGVjdG9yLmpzP3R5cGU9c3R5bGVzJmluZGV4PTEhLi9yZW5kZXIudnVlXCIsIGZ1bmN0aW9uKCkge1xuICAgICB2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzP3NvdXJjZU1hcCEuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvc3R5bGUtY29tcGlsZXIvaW5kZXguanM/e1xcXCJvcHRpb25zSWRcXFwiOlxcXCIwXFxcIixcXFwidnVlXFxcIjp0cnVlLFxcXCJzY29wZWRcXFwiOmZhbHNlLFxcXCJzb3VyY2VNYXBcXFwiOnRydWV9IS4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9zZWxlY3Rvci5qcz90eXBlPXN0eWxlcyZpbmRleD0xIS4vcmVuZGVyLnZ1ZVwiKTtcbiAgICAgaWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG4gICAgIHVwZGF0ZShuZXdDb250ZW50KTtcbiAgIH0pO1xuIH1cbiAvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG4gbW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///54\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(0)(true);\n// imports\n\n\n// module\nexports.push([module.i, "\\n.mathview textarea {\\n  display: none !important;\\n}\\n.mathview .mq-cursor {\\n  display: none !important;\\n}\\n", "", {"version":3,"sources":["E:/mygithub/math-keyboard/src/lib/src/lib/render.vue"],"names":[],"mappings":";AAuEA;EACA,yBAAA;CACA;AAEA;EACA,yBAAA;CACA","file":"render.vue","sourcesContent":["<template >\\n  <div class=\\"math-render\\">\\n    <span :id=\\"mathview\\" class=\\"mathview\\"></span>\\n    <img :src=\\"img.penicon\\" v-if=\\"imgshow && !value\\"/>\\n  </div>\\n</template>\\n\\n<script>\\n    import \\"mathquill/build/mathquill\\";\\n    import img from \'./img.js\'\\n\\n    export default {\\n        name: \\"math-render\\",\\n        data() {\\n            return {\\n                img: img,\\n                mathview: \'mathview\' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\\n                viewField: null\\n            }\\n        },\\n        props: {\\n            value: String,\\n            imgshow: {\\n                type: Boolean,\\n                default: true\\n            }\\n        },\\n        mounted() {\\n            var that = this;\\n            var mathview = document.getElementById(this.mathview);\\n\\n            var MQ = MathQuill.getInterface(2);\\n\\n            var viewField = that.viewField = MQ.MathField(mathview);\\n\\n            viewField.latex(that.value)\\n        },\\n        watch: {\\n            value: function (val) {\\n                this.viewField.latex(val);\\n                try {\\n                    $App.outputLatex(\'$\' + val + \'$\')\\n                } catch (e) {\\n                }\\n            }\\n        }\\n    };\\n<\/script>\\n\\n<style scoped>\\n  .mathview {\\n    border: none;\\n    border-bottom: 1px solid gray;\\n    min-width: 45px;\\n    min-height: 22px;\\n  }\\n\\n  .math-render {\\n    position: relative;\\n    float: left;\\n  }\\n\\n  .math-render img {\\n    position: absolute;\\n    left: 10px;\\n    top: 0;\\n    height: 24px;\\n  }\\n</style>\\n\\n<style>\\n  .mathview textarea {\\n    display: none !important;\\n  }\\n\\n  .mathview .mq-cursor {\\n    display: none !important;\\n  }\\n</style>\\n"],"sourceRoot":""}]);\n\n// exports\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL3JlbmRlci52dWU/OGQyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyQkFBMkIsbUJBQU8sQ0FBQyxDQUErQztBQUNsRjs7O0FBR0E7QUFDQSxjQUFjLFFBQVMseUJBQXlCLDZCQUE2QixHQUFHLHdCQUF3Qiw2QkFBNkIsR0FBRyxVQUFVLHVHQUF1RyxNQUFNLFdBQVcsS0FBSyxLQUFLLFdBQVcsd1JBQXdSLHdEQUF3RCxrREFBa0Qsc0JBQXNCLGlMQUFpTCxXQUFXLG1CQUFtQixvREFBb0QsOEVBQThFLFdBQVcsc0JBQXNCLDhCQUE4QixvRUFBb0UsbURBQW1ELHdFQUF3RSxzREFBc0QsbUJBQW1CLHFDQUFxQyw0Q0FBNEMsdUJBQXVCLDBFQUEwRSxZQUFZLG1CQUFtQixlQUFlLFdBQVcsUUFBUSw0Q0FBNEMsbUJBQW1CLG9DQUFvQyxzQkFBc0IsdUJBQXVCLEtBQUssb0JBQW9CLHlCQUF5QixrQkFBa0IsS0FBSyx3QkFBd0IseUJBQXlCLGlCQUFpQixhQUFhLG1CQUFtQixLQUFLLDZDQUE2QywrQkFBK0IsS0FBSyw0QkFBNEIsK0JBQStCLEtBQUssK0JBQStCOztBQUVsakUiLCJmaWxlIjoiNTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKHRydWUpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXFxuLm1hdGh2aWV3IHRleHRhcmVhIHtcXG4gIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDtcXG59XFxuLm1hdGh2aWV3IC5tcS1jdXJzb3Ige1xcbiAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbn1cXG5cIiwgXCJcIiwge1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wiRTovbXlnaXRodWIvbWF0aC1rZXlib2FyZC9zcmMvbGliL3NyYy9saWIvcmVuZGVyLnZ1ZVwiXSxcIm5hbWVzXCI6W10sXCJtYXBwaW5nc1wiOlwiO0FBdUVBO0VBQ0EseUJBQUE7Q0FDQTtBQUVBO0VBQ0EseUJBQUE7Q0FDQVwiLFwiZmlsZVwiOlwicmVuZGVyLnZ1ZVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCI8dGVtcGxhdGUgPlxcbiAgPGRpdiBjbGFzcz1cXFwibWF0aC1yZW5kZXJcXFwiPlxcbiAgICA8c3BhbiA6aWQ9XFxcIm1hdGh2aWV3XFxcIiBjbGFzcz1cXFwibWF0aHZpZXdcXFwiPjwvc3Bhbj5cXG4gICAgPGltZyA6c3JjPVxcXCJpbWcucGVuaWNvblxcXCIgdi1pZj1cXFwiaW1nc2hvdyAmJiAhdmFsdWVcXFwiLz5cXG4gIDwvZGl2PlxcbjwvdGVtcGxhdGU+XFxuXFxuPHNjcmlwdD5cXG4gICAgaW1wb3J0IFxcXCJtYXRocXVpbGwvYnVpbGQvbWF0aHF1aWxsXFxcIjtcXG4gICAgaW1wb3J0IGltZyBmcm9tICcuL2ltZy5qcydcXG5cXG4gICAgZXhwb3J0IGRlZmF1bHQge1xcbiAgICAgICAgbmFtZTogXFxcIm1hdGgtcmVuZGVyXFxcIixcXG4gICAgICAgIGRhdGEoKSB7XFxuICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgaW1nOiBpbWcsXFxuICAgICAgICAgICAgICAgIG1hdGh2aWV3OiAnbWF0aHZpZXcnICsgcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqICg5OTk5OTkgLSAxMDAwMDAgKyAxKSArIDEwMDAwMCwgMTApLFxcbiAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IG51bGxcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LFxcbiAgICAgICAgcHJvcHM6IHtcXG4gICAgICAgICAgICB2YWx1ZTogU3RyaW5nLFxcbiAgICAgICAgICAgIGltZ3Nob3c6IHtcXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbixcXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogdHJ1ZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sXFxuICAgICAgICBtb3VudGVkKCkge1xcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcXG4gICAgICAgICAgICB2YXIgbWF0aHZpZXcgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm1hdGh2aWV3KTtcXG5cXG4gICAgICAgICAgICB2YXIgTVEgPSBNYXRoUXVpbGwuZ2V0SW50ZXJmYWNlKDIpO1xcblxcbiAgICAgICAgICAgIHZhciB2aWV3RmllbGQgPSB0aGF0LnZpZXdGaWVsZCA9IE1RLk1hdGhGaWVsZChtYXRodmlldyk7XFxuXFxuICAgICAgICAgICAgdmlld0ZpZWxkLmxhdGV4KHRoYXQudmFsdWUpXFxuICAgICAgICB9LFxcbiAgICAgICAgd2F0Y2g6IHtcXG4gICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHZhbCkge1xcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdGaWVsZC5sYXRleCh2YWwpO1xcbiAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgJEFwcC5vdXRwdXRMYXRleCgnJCcgKyB2YWwgKyAnJCcpXFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgfTtcXG48L3NjcmlwdD5cXG5cXG48c3R5bGUgc2NvcGVkPlxcbiAgLm1hdGh2aWV3IHtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgZ3JheTtcXG4gICAgbWluLXdpZHRoOiA0NXB4O1xcbiAgICBtaW4taGVpZ2h0OiAyMnB4O1xcbiAgfVxcblxcbiAgLm1hdGgtcmVuZGVyIHtcXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICBmbG9hdDogbGVmdDtcXG4gIH1cXG5cXG4gIC5tYXRoLXJlbmRlciBpbWcge1xcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XFxuICAgIGxlZnQ6IDEwcHg7XFxuICAgIHRvcDogMDtcXG4gICAgaGVpZ2h0OiAyNHB4O1xcbiAgfVxcbjwvc3R5bGU+XFxuXFxuPHN0eWxlPlxcbiAgLm1hdGh2aWV3IHRleHRhcmVhIHtcXG4gICAgZGlzcGxheTogbm9uZSAhaW1wb3J0YW50O1xcbiAgfVxcblxcbiAgLm1hdGh2aWV3IC5tcS1jdXJzb3Ige1xcbiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7XFxuICB9XFxuPC9zdHlsZT5cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///55\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/vue/dist/vue.esm.js\nvar vue_esm = __webpack_require__(4);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/App.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* harmony default export */ var App = ({\n  data: function data() {\n    return {\n      show: true,\n      value: '',\n      output: ''\n    };\n  },\n\n  methods: {\n    a: function a() {\n      this.value = '2^6';\n    }\n  },\n  watch: {\n    ctrl: function ctrl(nval, oval) {\n      console.log('ctrl' + nval);\n    }\n  }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-04c2046b\",\"hasScoped\":false,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/App.vue\nvar App_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { attrs: { id: \"app\" } },\n    [\n      _c(\n        \"div\",\n        { staticStyle: { display: \"none\" } },\n        [\n          _c(\"math-render\", {\n            attrs: { value: _vm.value, imgshow: !_vm.show },\n            on: {\n              \"update:value\": function($event) {\n                _vm.value = $event\n              }\n            }\n          }),\n          _vm._v(\" \"),\n          _c(\"code\", { on: { click: _vm.a } }, [\n            _vm._v(\"latex: \" + _vm._s(_vm.value))\n          ])\n        ],\n        1\n      ),\n      _vm._v(\" \"),\n      _c(\"math-keyboard\", {\n        attrs: {\n          show: _vm.show,\n          keypanel: 1,\n          value: _vm.value,\n          output: _vm.output\n        },\n        on: {\n          \"update:show\": function($event) {\n            _vm.show = $event\n          },\n          \"update:value\": function($event) {\n            _vm.value = $event\n          },\n          \"update:output\": function($event) {\n            _vm.output = $event\n          }\n        }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nApp_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/runtime/component-normalizer.js\n/* globals __VUE_SSR_CONTEXT__ */\n\n// IMPORTANT: Do NOT use ES2015 features in this file (except for modules).\n// This module is a runtime utility for cleaner component module output and will\n// be included in the final webpack user bundle.\n\nfunction normalizeComponent (\n  scriptExports,\n  render,\n  staticRenderFns,\n  functionalTemplate,\n  injectStyles,\n  scopeId,\n  moduleIdentifier, /* server only */\n  shadowMode /* vue-cli only */\n) {\n  scriptExports = scriptExports || {}\n\n  // ES6 modules interop\n  var type = typeof scriptExports.default\n  if (type === 'object' || type === 'function') {\n    scriptExports = scriptExports.default\n  }\n\n  // Vue.extend constructor export interop\n  var options = typeof scriptExports === 'function'\n    ? scriptExports.options\n    : scriptExports\n\n  // render functions\n  if (render) {\n    options.render = render\n    options.staticRenderFns = staticRenderFns\n    options._compiled = true\n  }\n\n  // functional template\n  if (functionalTemplate) {\n    options.functional = true\n  }\n\n  // scopedId\n  if (scopeId) {\n    options._scopeId = scopeId\n  }\n\n  var hook\n  if (moduleIdentifier) { // server build\n    hook = function (context) {\n      // 2.3 injection\n      context =\n        context || // cached call\n        (this.$vnode && this.$vnode.ssrContext) || // stateful\n        (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) // functional\n      // 2.2 with runInNewContext: true\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__\n      }\n      // inject component styles\n      if (injectStyles) {\n        injectStyles.call(this, context)\n      }\n      // register component module identifier for async chunk inferrence\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier)\n      }\n    }\n    // used by ssr in case component is cached and beforeCreate\n    // never gets called\n    options._ssrRegister = hook\n  } else if (injectStyles) {\n    hook = shadowMode\n      ? function () { injectStyles.call(this, this.$root.$options.shadowRoot) }\n      : injectStyles\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // for template-only hot-reload because in that case the render fn doesn't\n      // go through the normalizer\n      options._injectStyles = hook\n      // register for functioal component in vue file\n      var originalRender = options.render\n      options.render = function renderWithStyleInjection (h, context) {\n        hook.call(context)\n        return originalRender(h, context)\n      }\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate\n      options.beforeCreate = existing\n        ? [].concat(existing, hook)\n        : [hook]\n    }\n  }\n\n  return {\n    exports: scriptExports,\n    options: options\n  }\n}\n\n// CONCATENATED MODULE: ./src/App.vue\nvar disposed = false\nfunction injectStyle (context) {\n  if (disposed) return\n  __webpack_require__(6)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\n\nvar Component = normalizeComponent(\n  App,\n  App_render,\n  staticRenderFns,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\nComponent.options.__file = \"src\\\\App.vue\"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_App = (Component.exports);\n\n// EXTERNAL MODULE: ./node_modules/mathquill/build/mathquill.css\nvar mathquill = __webpack_require__(8);\n\n// EXTERNAL MODULE: ./node_modules/mathquill/build/mathquill.js\nvar build_mathquill = __webpack_require__(5);\n\n// CONCATENATED MODULE: ./src/lib/img.js\n/* harmony default export */ var img = ({\n  zkh: __webpack_require__(21),\n  plus: __webpack_require__(22),\n  subtract: __webpack_require__(23),\n  less_than: __webpack_require__(24),\n  more_than: __webpack_require__(25),\n  ykh: __webpack_require__(26),\n  zfkh: __webpack_require__(27),\n  yfkh: __webpack_require__(28),\n  abs: __webpack_require__(29),\n  abc: __webpack_require__(30),\n  hide: __webpack_require__(31),\n  back: __webpack_require__(32),\n  dback: __webpack_require__(33),\n  cuadrado: __webpack_require__(34),\n  dshift: __webpack_require__(35),\n  fraccion: __webpack_require__(36),\n  potencia: __webpack_require__(37),\n  raiz: __webpack_require__(38),\n  raiz2: __webpack_require__(39),\n  shift: __webpack_require__(40),\n  tercera: __webpack_require__(41),\n  less_equals: __webpack_require__(42),\n  more_equals: __webpack_require__(43),\n  _pi: __webpack_require__(44),\n  or: __webpack_require__(45),\n  union: __webpack_require__(46),\n  penicon: __webpack_require__(47),\n  cursor_left: __webpack_require__(48),\n  cursor_right: __webpack_require__(49)\n});\n// EXTERNAL MODULE: ./node_modules/timers-browserify/main.js\nvar main = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/lib/keyboard.vue\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ var keyboard = ({\n    name: \"math-keyboard\",\n    data: function data() {\n        return {\n            img: img,\n            mathField: null,\n            mathview: 'mathview' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\n            mathinput: 'mathinput',\n            panel: this.keypanel,\n            capsletter: 'letter',\n            keyabc: {\n                'letter': [[{ k: 'q', v: 'q', t: false }, { k: 'w', v: 'w', t: false }, { k: 'e', v: 'e', t: false }, { k: 'r', v: 'r', t: false }, { k: 't', v: 't', t: false }, { k: 'y', v: 'y', t: false }, { k: 'u', v: 'u', t: false }, { k: 'i', v: 'i', t: false }, { k: 'o', v: 'o', t: false }, { k: 'p', v: 'p', t: false }], [{ k: 'a', v: 'a', t: false }, { k: 's', v: 's', t: false }, { k: 'd', v: 'd', t: false }, { k: 'f', v: 'f', t: false }, { k: 'g', v: 'g', t: false }, { k: 'h', v: 'h', t: false }, { k: 'j', v: 'j', t: false }, { k: 'k', v: 'k', t: false }, { k: 'l', v: 'l', t: false }], [{ k: '', v: 'shift', i: img.shift, s: false }, { k: 'z', v: 'z', t: false }, { k: 'x', v: 'x', t: false }, { k: 'c', v: 'c', t: false }, { k: 'v', v: 'v', t: false }, { k: 'b', v: 'b', t: false }, { k: 'n', v: 'n', t: false }, { k: 'm', v: 'm', t: false }, { k: '', v: 'Backspace', i: img.back, t: false }]],\n                'caps': [[{ k: 'Q', v: 'Q', t: false }, { k: 'W', v: 'W', t: false }, { k: 'E', v: 'E', t: false }, { k: 'R', v: 'R', t: false }, { k: 'T', v: 'T', t: false }, { k: 'Y', v: 'Y', t: false }, { k: 'U', v: 'U', t: false }, { k: 'I', v: 'I', t: false }, { k: 'O', v: 'O', t: false }, { k: 'P', v: 'P', t: false }], [{ k: 'A', v: 'A', t: false }, { k: 'S', v: 'S', t: false }, { k: 'D', v: 'D', t: false }, { k: 'F', v: 'F', t: false }, { k: 'G', v: 'G', t: false }, { k: 'H', v: 'H', t: false }, { k: 'J', v: 'J', t: false }, { k: 'K', v: 'K', t: false }, { k: 'L', v: 'L', t: false }], [{ k: '', v: 'shift', i: img.dshift, s: true }, { k: 'Z', v: 'Z', t: false }, { k: 'X', v: 'X', t: false }, { k: 'C', v: 'C', t: false }, { k: 'V', v: 'V', t: false }, { k: 'B', v: 'B', t: false }, { k: 'N', v: 'N', t: false }, { k: 'M', v: 'M', t: false }, { k: '', v: 'Backspace', i: img.back, t: false }]]\n            },\n            keynum: [{ k: '1', v: '1', t: false }, { k: '2', v: '2', t: false }, { k: '3', v: '3', t: false }, { k: '4', v: '4', t: false }, { k: '5', v: '5', t: false }, { k: '6', v: '6', t: false }, { k: '7', v: '7', t: false }, { k: '8', v: '8', t: false }, { k: '9', v: '9', t: false }, { k: '0', v: '0', t: false }, { k: '.', v: '.', t: false }],\n            keysym: [{ k: '', v: '\\\\nthroot', i: img.raiz, t: false }, { k: '', v: '\\\\sqrt', i: img.raiz2, t: false }, { k: '', v: '^', i: img.potencia, t: false }, { k: '', v: '^2', i: img.cuadrado, t: false }, { k: '', v: '|', i: img.abs, t: false }, { k: '', v: '/', i: img.fraccion, t: false }, { k: '', v: '\\\\pi', i: img._pi, t: false }, { k: '', v: '或', i: img.or, t: false }],\n            keyBottomSym: [\n            // {k: '', v: 'abc', i: img.abc},\n            { k: '', v: 'hide', i: img.hide, t: false }, { k: '', v: '<', i: img.less_than, t: false }, { k: '', v: '>', i: img.more_than, t: false }, { k: '', v: '\\\\leq', i: img.less_equals, t: false }, { k: '', v: '\\\\geq', i: img.more_equals, t: false }],\n            keyboardRight: [{ k: '', v: '-', i: img.subtract, t: false }, { k: '', v: '+', i: img.plus, t: false }, { k: '', v: '±', i: img.union, t: false }],\n            latex: this.value,\n            keyshow: this.show,\n            keyorwrite: 1,\n            cursorx: 0,\n            cursory: 0,\n            timer: null,\n            interval: null\n        };\n    },\n\n    props: {\n        show: Boolean,\n        value: String,\n        keypanel: {\n            type: Number,\n            default: 1\n        },\n        ctrl: {\n            type: Number,\n            default: 0\n        },\n        output: String\n    },\n    mounted: function mounted() {\n        var that = this;\n        var mathFieldSpan = document.getElementById(this.mathinput);\n\n        var MQ = MathQuill.getInterface(2);\n        var mathField = that.mathField = MQ.MathField(mathFieldSpan, {\n            spaceBehavesLikeTab: true,\n            leftRightIntoCmdGoes: 'up',\n            restrictMismatchedBrackets: true,\n            sumStartsWithNEquals: true,\n            supSubsRequireOperand: true,\n            autoSubscriptNumerals: true,\n            autoOperatorNames: 'sin COMMA',\n            handlers: {\n                edit: function edit(mathField) {\n                    that.$emit('update:value', mathField.latex());\n                    //显示光标\n                    var controller = mathField.__controller;\n                    controller.cursor.show();\n                    controller.blurred = false;\n                }\n            }\n        });\n\n        that.mathField.latex(that.value);\n\n        window.onresize = function () {\n            var content = $('#mathinput .mq-root-block');\n            content.scrollLeft(content[0].scrollWidth);\n        };\n    },\n\n    methods: {\n        /**\n         * 插入符号\n         * @param valor\n         */\n        insertar: function insertar(valor) {\n            var that = this;\n            if (valor.includes(\"^2\") || valor.includes(\"^3\")) {\n                that.mathField.write(valor);\n            } else if (valor === 'Backspace') {\n                that.mathField.keystroke(valor);\n            } else {\n                that.mathField.cmd(valor);\n            }\n        },\n\n        /**\n         * 键盘布局切换\n         * @param val\n         */\n        changepanel: function changepanel(val) {\n            this.panel = val;\n            this.$emit('update:keypanel', val);\n            var keyboardDiv = document.getElementById('keyboard');\n            var height = window.getComputedStyle(keyboardDiv).getPropertyValue(\"height\");\n            console.log(height);\n            try {\n                $App.keyboardHeight(height);\n            } catch (e) {}\n        },\n\n        /**\n         * 字母大小写切换\n         */\n        caps: function caps() {\n            if (this.capsletter === 'letter') {\n                this.capsletter = 'caps';\n            } else {\n                this.capsletter = 'letter';\n            }\n        },\n\n        /**\n         * 键盘隐藏\n         * @param event\n         */\n        keyhide: function keyhide(event) {\n            this.$emit('update:show', false);\n            this.$emit('update:output', this.value);\n            $App.hideKeyboard();\n        },\n        cursorLeft: function cursorLeft(event) {\n            this.mathField.keystroke(\"Left\");\n            this.cursorx = event.changedTouches[0].clientX;\n            console.log(\"Left\");\n        },\n        cursorRight: function cursorRight(event) {\n            this.mathField.keystroke(\"Right\");\n            this.cursorx = event.changedTouches[0].clientX;\n            console.log(\"Right\");\n        },\n        cursorUp: function cursorUp(event) {\n            var _this = this;\n        },\n        cursorDown: function cursorDown(event) {\n            var _this = this;\n            _this.cursorx = event.changedTouches[0].clientX;\n            _this.cursory = event.changedTouches[0].clientY;\n        },\n        cursorMove: function cursorMove(event) {\n            var x = this.cursorx - event.changedTouches[0].clientX;\n            var y = this.cursory - event.changedTouches[0].clientY;\n\n            if (x > 10) {\n                this.mathField.keystroke(\"Left\");\n                this.cursorx = event.changedTouches[0].clientX;\n                console.log(\"Left\");\n            }\n\n            if (x < -10) {\n                this.mathField.keystroke(\"Right\");\n                this.cursorx = event.changedTouches[0].clientX;\n                console.log(\"Right\");\n            }\n\n            if (y > 10) {\n                this.mathField.keystroke(\"Up\");\n                this.cursory = event.changedTouches[0].clientY;\n                console.log(\"Up\");\n            }\n\n            if (y < -10) {\n                this.mathField.keystroke(\"Down\");\n                this.cursory = event.changedTouches[0].clientY;\n                console.log(\"Down\");\n            }\n        },\n        backDown: function backDown(val) {\n            var _this = this;\n            if (val === 'Backspace') {\n                _this.timer = Object(main[\"setTimeout\"])(function () {\n                    _this.interval = setInterval(function () {\n                        _this.mathField.keystroke('Backspace');\n                    }, 100);\n                }, 500);\n            }\n        },\n        backUp: function backUp(val) {\n            if (val === 'Backspace') {\n                this.mathField.keystroke('Backspace');\n                Object(main[\"clearTimeout\"])(this.timer);\n                clearInterval(this.interval);\n            }\n        }\n    },\n    watch: {\n        value: function value(nval, oval) {\n            if (!this.show) {\n                this.mathField.latex(this.value);\n            }\n\n            var content = $('#mathinput .mq-root-block');\n            content.scrollLeft(content[0].scrollWidth);\n        },\n        ctrl: function ctrl(nval, oval) {\n            this.$emit('update:ctrl', nval);\n            // this.keyhide()\n            // console.log('ctrl'+nval)\n        }\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-78e092e4\",\"hasScoped\":true,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/lib/keyboard.vue\nvar keyboard_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"keyboard\", attrs: { id: \"keyboard\" } }, [\n    _c(\"div\", { staticClass: \"keyboard-output\" }, [\n      _c(\"span\", {\n        attrs: { id: _vm.mathinput },\n        on: {\n          touchstart: function($event) {\n            return _vm.cursorDown($event)\n          },\n          touchmove: function($event) {\n            return _vm.cursorMove($event)\n          },\n          touchup: function($event) {\n            return _vm.cursorUp($event)\n          }\n        }\n      }),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"left-right\" }, [\n        _c(\"img\", {\n          attrs: { src: _vm.img.cursor_left },\n          on: {\n            click: function($event) {\n              return _vm.cursorLeft($event)\n            }\n          }\n        }),\n        _vm._v(\" \"),\n        _c(\"img\", {\n          staticStyle: { \"margin-left\": \"20px\" },\n          attrs: { src: _vm.img.cursor_right },\n          on: {\n            click: function($event) {\n              return _vm.cursorRight($event)\n            }\n          }\n        })\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"a\",\n        {\n          staticStyle: { width: \"15%\" },\n          on: {\n            click: function($event) {\n              return _vm.keyhide()\n            }\n          }\n        },\n        [_vm._v(\"确定\")]\n      )\n    ]),\n    _vm._v(\" \"),\n    _c(\n      \"div\",\n      {\n        staticClass: \"keyboard-panel\",\n        style: { display: _vm.keyorwrite === 1 ? \"unset\" : \"none\" }\n      },\n      [\n        _vm.panel === 1\n          ? _c(\"div\", { staticClass: \"keyboard-panel-default\" }, [\n              _c(\"div\", { staticClass: \"keyboard-default-symbol\" }, [\n                _c(\n                  \"ul\",\n                  _vm._l(_vm.keysym, function(item) {\n                    return _c(\n                      \"li\",\n                      {\n                        style: {\n                          \"background-color\": item.t ? \"#bababa\" : \"#F7F7F7\"\n                        },\n                        on: {\n                          click: function($event) {\n                            return _vm.insertar(item.v)\n                          },\n                          touchstart: function($event) {\n                            item.t = true\n                          },\n                          touchend: function($event) {\n                            item.t = false\n                          }\n                        }\n                      },\n                      [\n                        _c(\"div\", { staticClass: \"letter-shade\" }),\n                        _vm._v(\" \"),\n                        item.i\n                          ? _c(\"img\", { attrs: { src: item.i } })\n                          : _vm._e(),\n                        _vm._v(_vm._s(item.k) + \"\\n          \")\n                      ]\n                    )\n                  }),\n                  0\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"keyboard-default-num\" }, [\n                _c(\n                  \"ul\",\n                  _vm._l(_vm.keynum, function(item) {\n                    return _c(\n                      \"li\",\n                      {\n                        style: {\n                          \"background-color\": item.t ? \"#bababa\" : \"#fff\"\n                        },\n                        on: {\n                          click: function($event) {\n                            return _vm.insertar(item.v)\n                          },\n                          touchstart: function($event) {\n                            item.t = true\n                          },\n                          touchend: function($event) {\n                            item.t = false\n                          }\n                        }\n                      },\n                      [_vm._v(_vm._s(item.k) + \"\\n          \")]\n                    )\n                  }),\n                  0\n                )\n              ]),\n              _vm._v(\" \"),\n              _c(\"div\", { staticClass: \"keyboard-default-right\" }, [\n                _c(\n                  \"ul\",\n                  [\n                    _c(\n                      \"li\",\n                      {\n                        staticStyle: {\n                          \"background-color\": \"#F7F7F7\",\n                          \"margin-top\": \"0px\"\n                        },\n                        on: {\n                          touchstart: function($event) {\n                            return _vm.backDown(\"Backspace\")\n                          },\n                          touchend: function($event) {\n                            return _vm.backUp(\"Backspace\")\n                          }\n                        }\n                      },\n                      [_c(\"img\", { attrs: { src: _vm.img.back } })]\n                    ),\n                    _vm._v(\" \"),\n                    _vm._l(_vm.keyboardRight, function(item) {\n                      return _c(\n                        \"li\",\n                        {\n                          style: {\n                            \"background-color\": item.t ? \"#bababa\" : \"#F7F7F7\"\n                          },\n                          on: {\n                            click: function($event) {\n                              return _vm.insertar(item.v)\n                            },\n                            touchstart: function($event) {\n                              item.t = true\n                            },\n                            touchend: function($event) {\n                              item.t = false\n                            }\n                          }\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"letter-shade\" }),\n                          _vm._v(\" \"),\n                          item.i\n                            ? _c(\"img\", { attrs: { src: item.i } })\n                            : _vm._e(),\n                          _vm._v(_vm._s(item.k) + \"\\n          \")\n                        ]\n                      )\n                    })\n                  ],\n                  2\n                )\n              ])\n            ])\n          : _vm._e(),\n        _vm._v(\" \"),\n        _vm.panel === 3\n          ? _c(\n              \"div\",\n              { staticClass: \"keyboard-panel-letter\" },\n              _vm._l(_vm.keyabc[_vm.capsletter], function(items) {\n                return _c(\"div\", { staticClass: \"letter-row\" }, [\n                  _c(\n                    \"ul\",\n                    _vm._l(items, function(item) {\n                      return _c(\n                        \"li\",\n                        {\n                          style:\n                            item.v !== \"shift\"\n                              ? item.v !== \"Backspace\"\n                                ? {\n                                    \"background-color\": item.t\n                                      ? \"#bababa\"\n                                      : \"#fff\"\n                                  }\n                                : {\n                                    \"background-color\": item.t\n                                      ? \"#fff\"\n                                      : \"#F7F7F7\"\n                                  }\n                              : {\n                                  \"background-color\": item.s\n                                    ? \"#fff\"\n                                    : \"#F7F7F7\"\n                                },\n                          on: {\n                            click: function($event) {\n                              item.v !== \"shift\"\n                                ? item.v !== \"Backspace\"\n                                  ? _vm.insertar(item.v)\n                                  : \"\"\n                                : _vm.caps()\n                            },\n                            touchstart: function($event) {\n                              ;(item.t = true),\n                                _vm.backDown(item.v),\n                                item.v === \"Backspace\"\n                                  ? (item.i = _vm.img.dback)\n                                  : \"\"\n                            },\n                            touchend: function($event) {\n                              ;(item.t = false),\n                                _vm.backUp(item.v),\n                                item.v === \"Backspace\"\n                                  ? (item.i = _vm.img.back)\n                                  : \"\"\n                            }\n                          }\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"letter-shade\" }),\n                          _vm._v(\" \"),\n                          item.i\n                            ? _c(\"img\", { attrs: { src: item.i } })\n                            : _vm._e(),\n                          _vm._v(_vm._s(item.k) + \"\\n          \")\n                        ]\n                      )\n                    }),\n                    0\n                  )\n                ])\n              }),\n              0\n            )\n          : _vm._e(),\n        _vm._v(\" \"),\n        _c(\"div\", { staticClass: \"keyboard-bottom\" }, [\n          _c(\n            \"ul\",\n            [\n              _c(\n                \"li\",\n                {\n                  staticStyle: { \"font-size\": \"14px\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.changepanel(_vm.panel === 1 ? 3 : 1)\n                    }\n                  }\n                },\n                [_vm._v(_vm._s(_vm.panel === 1 ? \"abc\" : \"123\") + \"\\n        \")]\n              ),\n              _vm._v(\" \"),\n              _vm._l(_vm.keyBottomSym, function(item) {\n                return _c(\n                  \"li\",\n                  {\n                    style: {\n                      \"background-color\": item.t ? \"#bababa\" : \"#F7F7F7\"\n                    },\n                    on: {\n                      click: function($event) {\n                        item.v === \"hide\" ? _vm.keyhide() : _vm.insertar(item.v)\n                      },\n                      touchstart: function($event) {\n                        item.t = true\n                      },\n                      touchend: function($event) {\n                        item.t = false\n                      }\n                    }\n                  },\n                  [\n                    _c(\"div\", { staticClass: \"letter-shade\" }),\n                    _vm._v(\" \"),\n                    item.i ? _c(\"img\", { attrs: { src: item.i } }) : _vm._e(),\n                    _vm._v(_vm._s(item.k) + \"\\n        \")\n                  ]\n                )\n              })\n            ],\n            2\n          )\n        ])\n      ]\n    )\n  ])\n}\nvar keyboard_staticRenderFns = []\nkeyboard_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/lib/keyboard.vue\nvar keyboard_disposed = false\nfunction keyboard_injectStyle (context) {\n  if (keyboard_disposed) return\n  __webpack_require__(17)\n  __webpack_require__(19)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar keyboard_vue_template_functional_ = false\n/* styles */\nvar keyboard_vue_styles_ = keyboard_injectStyle\n/* scopeId */\nvar keyboard_vue_scopeId_ = \"data-v-78e092e4\"\n/* moduleIdentifier (server only) */\nvar keyboard_vue_module_identifier_ = null\n\nvar keyboard_Component = normalizeComponent(\n  keyboard,\n  keyboard_render,\n  keyboard_staticRenderFns,\n  keyboard_vue_template_functional_,\n  keyboard_vue_styles_,\n  keyboard_vue_scopeId_,\n  keyboard_vue_module_identifier_\n)\nkeyboard_Component.options.__file = \"src\\\\lib\\\\keyboard.vue\"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var lib_keyboard = (keyboard_Component.exports);\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib/selector.js?type=script&index=0!./src/lib/render.vue\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n/* harmony default export */ var lib_render = ({\n    name: \"math-render\",\n    data: function data() {\n        return {\n            img: img,\n            mathview: 'mathview' + parseInt(Math.random() * (999999 - 100000 + 1) + 100000, 10),\n            viewField: null\n        };\n    },\n\n    props: {\n        value: String,\n        imgshow: {\n            type: Boolean,\n            default: true\n        }\n    },\n    mounted: function mounted() {\n        var that = this;\n        var mathview = document.getElementById(this.mathview);\n\n        var MQ = MathQuill.getInterface(2);\n\n        var viewField = that.viewField = MQ.MathField(mathview);\n\n        viewField.latex(that.value);\n    },\n\n    watch: {\n        value: function value(val) {\n            this.viewField.latex(val);\n            try {\n                $App.outputLatex('$' + val + '$');\n            } catch (e) {}\n        }\n    }\n});\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-1affa653\",\"hasScoped\":true,\"optionsId\":\"0\",\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/lib/render.vue\nvar render_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", { staticClass: \"math-render\" }, [\n    _c(\"span\", { staticClass: \"mathview\", attrs: { id: _vm.mathview } }),\n    _vm._v(\" \"),\n    _vm.imgshow && !_vm.value\n      ? _c(\"img\", { attrs: { src: _vm.img.penicon } })\n      : _vm._e()\n  ])\n}\nvar render_staticRenderFns = []\nrender_render._withStripped = true\n\nif (false) {}\n// CONCATENATED MODULE: ./src/lib/render.vue\nvar render_disposed = false\nfunction render_injectStyle (context) {\n  if (render_disposed) return\n  __webpack_require__(52)\n  __webpack_require__(54)\n}\n/* script */\n\n\n/* template */\n\n/* template functional */\nvar render_vue_template_functional_ = false\n/* styles */\nvar render_vue_styles_ = render_injectStyle\n/* scopeId */\nvar render_vue_scopeId_ = \"data-v-1affa653\"\n/* moduleIdentifier (server only) */\nvar render_vue_module_identifier_ = null\n\nvar render_Component = normalizeComponent(\n  lib_render,\n  render_render,\n  render_staticRenderFns,\n  render_vue_template_functional_,\n  render_vue_styles_,\n  render_vue_scopeId_,\n  render_vue_module_identifier_\n)\nrender_Component.options.__file = \"src\\\\lib\\\\render.vue\"\n\n/* hot reload */\nif (false) {}\n\n/* harmony default export */ var src_lib_render = (render_Component.exports);\n\n// CONCATENATED MODULE: ./src/lib/index.js\n\n // 导入组件\n\nvar mathkeyboard = {\n    install: function install(Vue, options) {\n        Vue.component(lib_keyboard.name, lib_keyboard); // vuePayKeyboard.name 组件的name属性\n        Vue.component(src_lib_render.name, src_lib_render);\n        // 类似通过 this.$xxx 方式调用插件的 其实只是挂载到原型上而已\n        // Vue.prototype.$xxx  // 最终可以在任何地方通过 this.$xxx 调用\n        // 虽然没有明确规定用$开头  但是大家都默认遵守这个规定\n    }\n};\n\nif (typeof window !== 'undefined' && window.Vue) {\n    window.Vue.use(mathkeyboard);\n}\n\n/* harmony default export */ var lib = (mathkeyboard); // 导出..\n// CONCATENATED MODULE: ./src/main.js\n\n\n\nvue_esm[\"a\" /* default */].use(lib);\n\nnew vue_esm[\"a\" /* default */]({\n  el: '#app',\n  render: function render(h) {\n    return h(src_App);\n  }\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n")}]);